a:4:{s:5:"child";a:1:{s:0:"";a:1:{s:3:"rss";a:1:{i:0;a:6:{s:4:"data";s:4:"
  
";s:7:"attribs";a:1:{s:0:"";a:1:{s:7:"version";s:3:"2.0";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:1:{s:7:"channel";a:1:{i:0;a:6:{s:4:"data";s:103:"
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:4:{s:0:"";a:10:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:15:"Scott Hanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:30:"http://www.hanselman.com/blog/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:75:"Scott Hanselman's Thoughts on Programming, Technology, Fatherhood, and Life";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"image";a:1:{i:0;a:6:{s:4:"data";s:26:"
      
      
      
    ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:3:{s:3:"url";a:1:{i:0;a:5:{s:4:"data";s:48:"http://www.hanselman.com/blog/images/zenicon.jpg";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:15:"Scott Hanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:30:"http://www.hanselman.com/blog/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}s:9:"copyright";a:1:{i:0;a:5:{s:4:"data";s:5:"admin";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:13:"lastBuildDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Tue, 31 May 2011 04:07:05 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"generator";a:1:{i:0;a:5:{s:4:"data";s:34:"newtelligence dasBlog 2.4.279.6007";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:14:"managingEditor";a:1:{i:0;a:5:{s:4:"data";s:19:"scott@hanselman.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"webMaster";a:1:{i:0;a:5:{s:4:"data";s:19:"scott@hanselman.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"item";a:11:{i:0;a:6:{s:4:"data";s:110:"
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:7:{s:53:"http://madskills.com/public/xml/rss/module/trackback/";a:1:{s:4:"ping";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/Trackback.aspx?guid=bc1660bd-d620-44fa-8ac5-2d3d72f387ba";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:52:"http://madskills.com/public/xml/rss/module/pingback/";a:2:{s:6:"server";a:1:{i:0;a:5:{s:4:"data";s:43:"http://www.hanselman.com/blog/pingback.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"target";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=bc1660bd-d620-44fa-8ac5-2d3d72f387ba";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:15:"Scott Hanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:2:{s:7:"comment";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=bc1660bd-d620-44fa-8ac5-2d3d72f387ba";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:115:"http://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=bc1660bd-d620-44fa-8ac5-2d3d72f387ba";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:1:"7";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:99:"Hanselminutes Podcast 268 - Personal Systems of Organization - Rey Bango interviews Scott Hanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=bc1660bd-d620-44fa-8ac5-2d3d72f387ba";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:150:"http://feedproxy.google.com/~r/ScottHanselman/~3/ODD4fmz61SU/HanselminutesPodcast268PersonalSystemsOfOrganizationReyBangoInterviewsScottHanselman.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Tue, 31 May 2011 04:07:05 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:8350:"<div><p><img style="border-bottom: 0px; border-left: 0px; margin: 0px 0px 0px 10px; display: inline; border-top: 0px; border-right: 0px" title="When life gives you lemons, organize your closet and install a valet hook" border="0" alt="When life gives you lemons, organize your closet and install a valet hook" align="right" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/HanselminutesPodcast268PersonalSystemsof_128A6/When%20life%20gives%20you%20lemons,%20organize%20your%20closet%20and%20install%20a%20valet%20hook_3.jpg" width="350" height="261" />&#160;&#160; Tables turned this week and Rey Bango interviews Scott on his personal systems of organization. How has Scott synthesized the systems of Stephen Covey, David Allen, J.D. Meier and the Pomodoro Technique into a living system that works for him.</p>  <p><strong>Links from the Show</strong></p>  <ul>   <li><a href="http://www.gettingresults.com/"><strong>Free eBook: Getting Results the Agile Way</strong></a></li>    <li><a href="http://www.pomodorotechnique.com/">The Pomodoro Technique</a></li>    <li><a href="http://amzn.to/mGFGzl">Book: Getting Things Done: The Art of Stress-Free Productivity</a></li>    <li>My system in 2005: <a href="http://www.hanselman.com/blog/PersonalSystemsOfOrganization.aspx">Personal Systems of Organization</a></li>    <li><a href="http://www.hanselman.com/blog/OredevKeynoteInformationOverloadAndManagingTheFlowEffectivenessAndEfficiency.aspx">Oredev Keynote - Information Overload and Managing the Flow: Effectiveness and Efficiency</a></li>    <li><a href="http://www.hanselman.com/blog/DoTheyDeserveTheGiftOfYourKeystrokes.aspx">Do they deserve the gift of your keystrokes?</a></li>    <li><a href="http://www.hanselman.com/blog/HanselminutesPodcast234GettingThingsDoneWithLaneNewsom.aspx">Hanselminutes Podcast 234 - Getting Things Done with Lane Newsom</a></li>    <li><a href="http://www.hanselman.com/blog/TheThreeMostImportantOutlookRulesForProcessingMail.aspx">The Three Most Important Outlook Rules for Processing Mail</a></li>    <li><a href="http://www.hanselman.com/blog/GettingOrganizedWhileDrinkingFromTheOutlookFireHose.aspx">Getting Organized While Drinking from the (Outlook) Fire Hose</a></li> </ul>  <h3><strong>Download: </strong><a href="http://s3.amazonaws.com/hanselminutes/hanselminutes_0268.mp3">MP3 Full Show</a></h3>  <h3><strong>NOTE: If you want to download our complete archives as a feed - that's all 266 shows, </strong><a href="http://feeds.feedburner.com/HanselminutesCompleteMP3"><strong>subscribe to the Complete MP3 Feed here</strong></a><strong>.</strong></h3>  <p><strong>Also, please do take a moment and </strong><a href="http://phobos.apple.com/WebObjects/MZStore.woa/wa/viewPodcast?id=117488860"><strong>review the show on iTunes</strong></a><strong>.</strong> </p>  <h3><strong>Subscribe: </strong><a href="http://feeds.feedburner.com/Hanselminutes"><img border="0" alt="Subscribe to Hanselminutes" src="http://www.hanselman.com/blog/content/binary/feed_2Dicon_2D16x16.png" /></a> or <a href="http://phobos.apple.com/WebObjects/MZStore.woa/wa/viewPodcast?id=117488860"><img border="0" alt="Subscribe to my Podcast in iTunes" src="http://www.hanselman.com/blog/themes/zenGarden2/itunes_subscribe.gif" /></a> or <a href="zune://subscribe/?Hanselminutes=http://feeds.feedburner.com/hanselminutes"><strong>Zune</strong></a></h3>  <p>Do also <a href="http://www.hanselminutes.com/archives.aspx">remember the complete archives</a> are always up and they have <strong><em>PDF Transcripts</em></strong>, a little known feature that show up a few weeks after each show. </p>  <p><a href="http://www.telerik.com/products/aspnet/overview.aspx?gad=CPLKy9kDEghsdEbLXRZ0NBiF1bL_AyCCkdsU"><strong>Telerik</strong></a> is our sponsor for this show. </p>  <p><a href="http://www.telerik.com/products/aspnet/overview.aspx?gad=CPLKy9kDEghsdEbLXRZ0NBiF1bL_AyCCkdsU"><strong><img border="0" align="left" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/HanselminutesPodcast51StaticCodeAnalysis_140AB/telerikLogo%5B1%5D%5B8%5D.gif" width="216" height="74" /></strong></a><strong>Building quality software is never easy. It requires skills and imagination. We cannot promise to improve your skills, but when it comes to User Interface and developer tools, we can provide the building blocks to take your application a step closer to your imagination. Explore the leading UI suites for </strong><a href="http://asp.net/"><strong>ASP.NET</strong></a> <strong>AJAX, </strong><a href="http://www.telerik.com/products/aspnet-mvc.aspx"><strong>MVC</strong></a><strong>,</strong><a href="http://www.telerik.com/products/silverlight.aspx"><strong>Silverlight</strong></a><strong>, </strong><a href="http://www.telerik.com/products/winforms.aspx"><strong>Windows Forms</strong></a><strong> and </strong><a href="http://www.telerik.com/products/wpf.aspx"><strong>WPF</strong></a><strong>. Enjoy developer tools like </strong><a href="http://www.telerik.com/products/reporting.aspx"><strong>.NET Reporting</strong></a><strong>, </strong><a href="http://www.telerik.com/products/orm.aspx"><strong>ORM</strong></a><strong>, </strong><a href="http://www.telerik.com/automated-testing-tools.aspx"><strong>Automated Testing Tools</strong></a><strong>, </strong><a href="http://www.telerik.com/team-productivity-tools/teampulse.aspx"><strong>Agile Project Management Tools</strong></a><strong>, and </strong><a href="http://www.sitefinity.com/"><strong>Content Management Solution</strong></a><strong>. And now you can increase your productivity with </strong><a href="http://www.telerik.com/products/justcode.aspx"><strong>JustCode</strong></a><strong>, Telerik’s new productivity tool for code analysis and refactoring. Visit </strong><a href="http://www.telerik.com/"><strong>www.telerik.com</strong></a><strong>.</strong> </p>  <p><strong><em></em></strong>As I've said before this show comes to you with the audio expertise and stewardship of <a href="http://weblogs.asp.net/cfranklin/archive/2006/01/11/435036.aspx">Carl Franklin</a>. The name comes from <a href="http://www.paraesthesia.com/blog/comments.php?id=776_0_1_0_C">Travis Illig</a>, but the goal of the show is simple. Avoid wasting the listener's time. (and make the commute less boring) </p>  <p>Enjoy. Who knows what'll happen in the next show?</p><br/><hr/>© 2011 Scott Hanselman. All rights reserved. <br/></div>
<p><a href="http://feedads.g.doubleclick.net/~a/vCvCYFB1rw7OaAE0cc1xgKSIxxs/0/da"><img src="http://feedads.g.doubleclick.net/~a/vCvCYFB1rw7OaAE0cc1xgKSIxxs/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/vCvCYFB1rw7OaAE0cc1xgKSIxxs/1/da"><img src="http://feedads.g.doubleclick.net/~a/vCvCYFB1rw7OaAE0cc1xgKSIxxs/1/di" border="0" ismap="true"></img></a></p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=ODD4fmz61SU:pqm87sw_rmY:D7DqB2pKExk"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=ODD4fmz61SU:pqm87sw_rmY:D7DqB2pKExk" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=ODD4fmz61SU:pqm87sw_rmY:MjquXQBfoPI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=MjquXQBfoPI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=ODD4fmz61SU:pqm87sw_rmY:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=ODD4fmz61SU:pqm87sw_rmY:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=ODD4fmz61SU:pqm87sw_rmY:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=ODD4fmz61SU:pqm87sw_rmY:F7zBnMyn0Lo" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=ODD4fmz61SU:pqm87sw_rmY:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=ODD4fmz61SU:pqm87sw_rmY:5M_9TJJRyfI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=5M_9TJJRyfI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=ODD4fmz61SU:pqm87sw_rmY:YKYwmLGm_co"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=YKYwmLGm_co" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/ScottHanselman/~4/ODD4fmz61SU" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=bc1660bd-d620-44fa-8ac5-2d3d72f387ba";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:2:{i:0;a:5:{s:4:"data";s:7:"Musings";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:7:"Podcast";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:119:"http://www.hanselman.com/blog/HanselminutesPodcast268PersonalSystemsOfOrganizationReyBangoInterviewsScottHanselman.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:1;a:6:{s:4:"data";s:103:"
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:7:{s:53:"http://madskills.com/public/xml/rss/module/trackback/";a:1:{s:4:"ping";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/Trackback.aspx?guid=2ea833f5-9fba-4a7d-bc90-391d55d26fcc";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:52:"http://madskills.com/public/xml/rss/module/pingback/";a:2:{s:6:"server";a:1:{i:0;a:5:{s:4:"data";s:43:"http://www.hanselman.com/blog/pingback.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"target";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=2ea833f5-9fba-4a7d-bc90-391d55d26fcc";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:15:"Scott Hanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:2:{s:7:"comment";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=2ea833f5-9fba-4a7d-bc90-391d55d26fcc";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:115:"http://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=2ea833f5-9fba-4a7d-bc90-391d55d26fcc";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:2:"11";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:98:"Hanselminutes Podcast 267 - Before The Show: Off the Cuff Conversation with Jeff Atwood (EXPLICIT)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=2ea833f5-9fba-4a7d-bc90-391d55d26fcc";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:146:"http://feedproxy.google.com/~r/ScottHanselman/~3/CaDRlCNTZFA/HanselminutesPodcast267BeforeTheShowOffTheCuffConversationWithJeffAtwoodEXPLICIT.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Tue, 31 May 2011 04:02:31 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:7154:"<div><p><img style="border-bottom: 0px; border-left: 0px; margin: 0px 0px 0px 10px; display: inline; border-top: 0px; border-right: 0px" title="the-golden-child-original" border="0" alt="the-golden-child-original" align="right" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/HanselminutesPodcast267BeforeTheShowOfft_127E2/the-golden-child-original_3.jpg" width="445" height="250" />Sometimes the most interesting conversations happen before or after the show. Often they happen with Jeff Atwood. I (Scott) called Jeff to get some audio for our other show http://thisdeveloperslife.com and was recording as soon as Jeff and I started chatting. Here's our unedited random personal phone call that I thought might be fun</p>  <p><strong>To be clear: This was a personal conversation before we recorded an episode of </strong><a href="http://www.thisdeveloperslife.com/"><strong>This Developer's Life</strong></a><strong>. I thought it'd be interesting to share. I did beep out the swear words. Sorry if that offends.</strong></p>  <h3><strong>Download: </strong><a href="http://s3.amazonaws.com/hanselminutes/hanselminutes_0267.mp3">MP3 Full Show</a></h3>  <h3><strong>NOTE: If you want to download our complete archives as a feed - that's all 266 shows, </strong><a href="http://feeds.feedburner.com/HanselminutesCompleteMP3"><strong>subscribe to the Complete MP3 Feed here</strong></a><strong>.</strong></h3>  <p><strong>Also, please do take a moment and </strong><a href="http://phobos.apple.com/WebObjects/MZStore.woa/wa/viewPodcast?id=117488860"><strong>review the show on iTunes</strong></a><strong>.</strong></p>  <h3><strong>Subscribe: </strong><a href="http://feeds.feedburner.com/Hanselminutes"><img border="0" alt="Subscribe to Hanselminutes" src="http://www.hanselman.com/blog/content/binary/feed_2Dicon_2D16x16.png" /></a> or <a href="http://phobos.apple.com/WebObjects/MZStore.woa/wa/viewPodcast?id=117488860"><img border="0" alt="Subscribe to my Podcast in iTunes" src="http://www.hanselman.com/blog/themes/zenGarden2/itunes_subscribe.gif" /></a> or <a href="zune://subscribe/?Hanselminutes=http://feeds.feedburner.com/hanselminutes"><strong>Zune</strong></a></h3>  <p>Do also <a href="http://www.hanselminutes.com/archives.aspx">remember the complete archives</a> are always up and they have <strong><em>PDF Transcripts</em></strong>, a little known feature that show up a few weeks after each show.</p>  <p><a href="http://www.telerik.com/products/aspnet/overview.aspx?gad=CPLKy9kDEghsdEbLXRZ0NBiF1bL_AyCCkdsU"><strong>Telerik</strong></a> is our sponsor for this show.</p>  <p><a href="http://www.telerik.com/products/aspnet/overview.aspx?gad=CPLKy9kDEghsdEbLXRZ0NBiF1bL_AyCCkdsU"><strong><img border="0" align="left" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/HanselminutesPodcast51StaticCodeAnalysis_140AB/telerikLogo%5B1%5D%5B8%5D.gif" width="216" height="74" /></strong></a><strong>Building quality software is never easy. It requires skills and imagination. We cannot promise to improve your skills, but when it comes to User Interface and developer tools, we can provide the building blocks to take your application a step closer to your imagination. Explore the leading UI suites for </strong><a href="http://asp.net/"><strong>ASP.NET</strong></a> <strong>AJAX, </strong><a href="http://www.telerik.com/products/aspnet-mvc.aspx"><strong>MVC</strong></a><strong>,</strong><a href="http://www.telerik.com/products/silverlight.aspx"><strong>Silverlight</strong></a><strong>, </strong><a href="http://www.telerik.com/products/winforms.aspx"><strong>Windows Forms</strong></a><strong> and </strong><a href="http://www.telerik.com/products/wpf.aspx"><strong>WPF</strong></a><strong>. Enjoy developer tools like </strong><a href="http://www.telerik.com/products/reporting.aspx"><strong>.NET Reporting</strong></a><strong>, </strong><a href="http://www.telerik.com/products/orm.aspx"><strong>ORM</strong></a><strong>, </strong><a href="http://www.telerik.com/automated-testing-tools.aspx"><strong>Automated Testing Tools</strong></a><strong>, </strong><a href="http://www.telerik.com/team-productivity-tools/teampulse.aspx"><strong>Agile Project Management Tools</strong></a><strong>, and </strong><a href="http://www.sitefinity.com/"><strong>Content Management Solution</strong></a><strong>. And now you can increase your productivity with </strong><a href="http://www.telerik.com/products/justcode.aspx"><strong>JustCode</strong></a><strong>, Telerik’s new productivity tool for code analysis and refactoring. Visit </strong><a href="http://www.telerik.com/"><strong>www.telerik.com</strong></a><strong>.</strong></p>  <p><strong><em></em></strong>As I've said before this show comes to you with the audio expertise and stewardship of <a href="http://weblogs.asp.net/cfranklin/archive/2006/01/11/435036.aspx">Carl Franklin</a>. The name comes from <a href="http://www.paraesthesia.com/blog/comments.php?id=776_0_1_0_C">Travis Illig</a>, but the goal of the show is simple. Avoid wasting the listener's time. (and make the commute less boring)</p>  <p>Enjoy. Who knows what'll happen in the next show?</p><br/><hr/>© 2011 Scott Hanselman. All rights reserved. <br/></div>
<p><a href="http://feedads.g.doubleclick.net/~a/tnhQiULuHAyj0pNrG6QpKbjGzzE/0/da"><img src="http://feedads.g.doubleclick.net/~a/tnhQiULuHAyj0pNrG6QpKbjGzzE/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/tnhQiULuHAyj0pNrG6QpKbjGzzE/1/da"><img src="http://feedads.g.doubleclick.net/~a/tnhQiULuHAyj0pNrG6QpKbjGzzE/1/di" border="0" ismap="true"></img></a></p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=CaDRlCNTZFA:Wsz6DmENvXk:D7DqB2pKExk"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=CaDRlCNTZFA:Wsz6DmENvXk:D7DqB2pKExk" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=CaDRlCNTZFA:Wsz6DmENvXk:MjquXQBfoPI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=MjquXQBfoPI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=CaDRlCNTZFA:Wsz6DmENvXk:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=CaDRlCNTZFA:Wsz6DmENvXk:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=CaDRlCNTZFA:Wsz6DmENvXk:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=CaDRlCNTZFA:Wsz6DmENvXk:F7zBnMyn0Lo" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=CaDRlCNTZFA:Wsz6DmENvXk:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=CaDRlCNTZFA:Wsz6DmENvXk:5M_9TJJRyfI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=5M_9TJJRyfI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=CaDRlCNTZFA:Wsz6DmENvXk:YKYwmLGm_co"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=YKYwmLGm_co" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/ScottHanselman/~4/CaDRlCNTZFA" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=2ea833f5-9fba-4a7d-bc90-391d55d26fcc";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:1:{i:0;a:5:{s:4:"data";s:7:"Podcast";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:115:"http://www.hanselman.com/blog/HanselminutesPodcast267BeforeTheShowOffTheCuffConversationWithJeffAtwoodEXPLICIT.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:2;a:6:{s:4:"data";s:124:"
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:7:{s:53:"http://madskills.com/public/xml/rss/module/trackback/";a:1:{s:4:"ping";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/Trackback.aspx?guid=62cf6ffa-f029-4fb2-941c-868d72cc0e10";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:52:"http://madskills.com/public/xml/rss/module/pingback/";a:2:{s:6:"server";a:1:{i:0;a:5:{s:4:"data";s:43:"http://www.hanselman.com/blog/pingback.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"target";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=62cf6ffa-f029-4fb2-941c-868d72cc0e10";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:15:"Scott Hanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:2:{s:7:"comment";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=62cf6ffa-f029-4fb2-941c-868d72cc0e10";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:115:"http://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=62cf6ffa-f029-4fb2-941c-868d72cc0e10";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:2:"16";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:101:"Globalization, Internationalization and Localization in ASP.NET MVC 3, JavaScript and jQuery - Part 1";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=62cf6ffa-f029-4fb2-941c-868d72cc0e10";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:150:"http://feedproxy.google.com/~r/ScottHanselman/~3/OCay-mxaXi0/GlobalizationInternationalizationAndLocalizationInASPNETMVC3JavaScriptAndJQueryPart1.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Thu, 26 May 2011 02:56:14 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:31611:"<div><p>There are several books worth of information to be said about Internationalization (i18n) out there, so I can't solve it all in a blog post. Even <a href="http://www.hanselman.com/blog/CategoryView.aspx?category=Internationalization">9 pages of blog posts</a>. I like to call it <a href="http://www.hanselman.com/blog/I%c3%b1t%c3%abrn%c3%a2ti%c3%b4n%c3%a0liz%c3%a6ti%c3%b8n.aspx">Iñtërnâtiônàlizætiøn</a>, actually. </p>  <p>There's a couple of basic things to understand though, before you create a multilingual ASP.NET application. Let's agree on some basic definitions as these terms are often used interchangeably.</p>  <ul>   <li>Internationalization (i18n) - Making your application able to support a range of languages and locales </li>    <li>Localization (L10n) - Making your application support a specific language/locale. </li>    <li>Globalization - The combination of Internationalization and Localization<!--EndFragment--> </li>    <li>Language - For example, Spanish generally. ISO code &quot;es&quot; </li>    <li>Locale - Mexico. Note that Spanish in Spain is not the same as Spanish in Mexico, e.g. &quot;es-ES&quot; vs. &quot;es-MX&quot; </li> </ul>  <h3>Culture and UICulture</h3>  <p>The User Interface Culture is a CultureInfo instance from the .NET base class library (BCL). It lives on Thread.CurrentThread.CurrentUICulture and if you felt like it, you could set it manually like this:</p>  <pre class="brush: csharp; toolbar: false; auto-links: false;">Thread.CurrentThread.CurrentUICulture = new CultureInfo(&quot;es-MX&quot;);</pre>

<p>The CurrentCulture is used for Dates, Currency, etc.</p>

<pre class="brush: csharp; toolbar: false; auto-links: false;">Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;es-MX&quot;); </pre>

<p>However, you really ought to avoid doing this kind of stuff unless you know what you're doing and you really have a good reason. </p>

<p>The user's browser will report their language preferences in the Accept-Languages HTTP Header like this:</p>

<pre>GET http://www.hanselman.com HTTP/1.1<br />Connection: keep-alive<br />Cache-Control: max-age=0<br />Accept-Encoding: gzip,deflate,sdch<br />Accept-Language: en-US,en;q=0.8</pre>

<p>See how I prefer en-US and then en? I can get ASP.NET to automatically pass those values and setup the threads with with the correct culture. I need to set my web.config like this:</p>

<pre class="brush: xml; toolbar: false; auto-links: false;">&lt;system.web&gt;<br />    &lt;globalization culture=&quot;auto&quot; uiCulture=&quot;auto&quot; enableClientBasedCulture=&quot;true&quot; /&gt;<br />...snip...</pre>

<p>That one line will do the work for me. At this point the current thread and current UI thread's culture will be automatically set by ASP.NET.</p>

<h3>The Importance of Pseudointernationalization</h3>

<p><a href="http://www.hanselman.com/blog/PsuedoInternationalizationAndYourASPNETApplication.aspx">Back in 2005 I updated John Robbin's Pseudoizer</a> (and misspelled it then!) and I've just ported it over to .NET 4 and used it for this application. I find this technique for creating localizable sites really convenient because I'm effectively changing all the strings within my app to another language which allows me to spot strings I missed with the tedium of translating strings. </p>

<h3><strong>You can </strong><a href="http://www.hanselman.com/blog/content/binary/PsuedoizerNet4.zip"><strong>download the .NET Pseudoizer here</strong></a><strong>.</strong></h3>

<p>Here's an example from that earlier post before I run it through Pseudointernationalization:</p>

<pre class="brush: xml; toolbar: false; auto-links: false;">&lt;data name=&quot;Accounts.Download.Title&quot;&gt;<br />  &lt;value&gt;Transaction Download&lt;/value&gt;<br />&lt;/data&gt;<br />&lt;data name=&quot;Accounts.Statements.Action.ViewStatement&quot;&gt;<br />  &lt;value&gt;View Statement&lt;/value&gt;<br />&lt;/data&gt;<br />&lt;data name=&quot;Accounts.Statements.Instructions&quot;&gt;<br />  &lt;value&gt;Select an account below to view or download your available online statements.&lt;/value&gt;<br />&lt;/data&gt;</pre>

<p>I can convert these resources with the pseudoizer like this:</p>

<pre>PsuedoizerConsole examplestrings.en.resx examplestrings.xx.resx</pre>

<p>and here's the result:</p>

<pre class="brush: xml; toolbar: false; auto-links: false;">&lt;data name=&quot;Accounts.Download.Title&quot;&gt;<br />  &lt;value&gt;[Ŧřäŉşäčŧįőŉ Đőŵŉľőäđ !!! !!!]&lt;/value&gt;<br />&lt;/data&gt;<br />&lt;data name=&quot;Accounts.Statements.Action.ViewStatement&quot;&gt;<br />  &lt;value&gt;[Vįęŵ Ŝŧäŧęmęŉŧ !!! !!!]&lt;/value&gt;<br />&lt;/data&gt;<br />&lt;data name=&quot;Accounts.Statements.Instructions&quot;&gt;<br />  &lt;value&gt;[Ŝęľęčŧ äŉ äččőūŉŧ þęľőŵ ŧő vįęŵ őř đőŵŉľőäđ yőūř äväįľäþľę őŉľįŉę şŧäŧęmęŉŧş. !!! !!! !!! !!! !!!]&lt;/value&gt;<br />&lt;/data&gt; </pre>

<p>Cool, eh? If you're working with RESX files a lot, be sure to familiarize yourself with the resgen.exe command-line tool that is included with Visual Studio and the .NET SDK. You have this on your system already. You can move easily between the RESX XML-based file format and a more human- (and translator-) friendly text name=value format like this:</p>

<pre>resgen /compile examplestrings.xx.resx,examplestrings.xx.txt</pre>

<p>And now they are a nice name=value format, and as I said, I can move between them.</p>

<pre>Accounts.Download.Title=[Ŧřäŉşäčŧįőŉ Đőŵŉľőäđ !!! !!!]<br />Accounts.Statements.Action.ViewStatement=[Vįęŵ Ŝŧäŧęmęŉŧ !!! !!!]<br />Accounts.Statements.Instructions=[Ŝęľęčŧ äŉ äččőūŉŧ þęľőŵ ŧő vįęŵ őř đőŵŉľőäđ yőūř äväįľäþľę őŉľįŉę şŧäŧęmęŉŧş. !!! !!! !!! !!! !!!]</pre>

<p>During development time I like to add this Pseudoizer step to my Continuous Integration build or as a pre-build step and assign the resources to a random language I'm NOT going to be creating, like Polish (with all due respect to the Poles) so I'd make examplestrings.pl.resx and the then we can test our fake language by changing our browser's UserLanguages to prefer pl-PL over en-US.</p>

<h3>Localization Fallback</h3>

<p>Different languages take different amounts of space. God bless the Germans but their strings will take an average of 30% more space than English phrases. Chinese will take 30% less. The Pseudoizer pads strings in order to illustrate these differences and encourage you to take them into consideration in your layouts.</p>

<p>Localization within .NET (not specific to ASP.NET Proper or ASP.NET MVC) implements a standard fallback mechanism. That means it will start looking for the most specific string from the required locale, then <em>fallback </em>continuing to look until it ends on the neutral language (whatever that is). This fallback is handled by convention-based naming. Here is an older, but <a href="http://authors.aspalliance.com/aspxtreme/webapps/demos/resourcefallback.aspx">still excellent <strong>live</strong> demo of Resource Fallback at ASPAlliance</a>.</p>

<p>For example, let's say there are three resources. Resources.resx, Resources.es.resx, and Resources.es-MX.resx.</p>

<p><strong>Resources.resx: 
    <br /></strong>HelloString=Hello, what's up? 

  <br />GoodbyeString=See ya! 

  <br />DudeString=Duuuude!</p>

<p><strong>Resources.es.resx: 
    <br /></strong>HelloString=¿Cómo está? 

  <br />GoodbyeString=Adiós!</p>

<p><strong>Resources.es-MX.resx: 
    <br /></strong>HelloString=¿Hola, qué tal?</p>

<p>Consider these three files in a fallback scenario. The user shows up with his browser requesting es-MX. If we ask for HelloString, he'll get the most specific one. If we ask for GoodbyeString, we have no &quot;es-MX&quot; equivalent, so we move up one to just &quot;es.&quot; If we ask for DudeString, we have no es strings at all, so we'll fall all the way back to the neutral resource. </p>

<p>Using this basic concept of fallback, you can minimize the numbers of strings you localize and provide users with not only language specific strings (Spanish) but also local (Mexican Spanish) strings. And yes, I realize this is a silly example and isn't really representative of Spaniards or Mexican colloquial language.</p>

<h3>Views rather than Resources</h3>

<p>If you don't like the idea of resources, while you will still have to deal with <em>some </em>resources, you could also have difference views for different languages and locales. You can structure your ~/Views folders like <a href="http://brianreiter.org/2011/03/23/simple-asp-net-mvc-globalization-with-graceful-fallback/">Brian Reiter</a> and others have. It's actually pretty obvious once you have bought into the idea of resource fallback as above. Here's Brian's example:</p>

<pre>/Views<br />    /Globalization<br />        /ar<br />            /Home<br />                /Index.aspx<br />            /Shared<br />                /Site.master<br />                /Navigation.aspx<br />        /es<br />            /Home<br />                /Index.aspx<br />            /Shared<br />                /Navigation.aspx<br />        /fr<br />            /Home<br />                /Index.aspx<br />            /Shared<br />    /Home<br />        /Index.aspx<br />    /Shared<br />        /Error.aspx<br />        /Footer.aspx<br />        /Navigation.aspx<br />        /Site.master</pre>

<p>Just as you can let ASP.NET change the current UI culture based on UserLanguages or a cookie, you can also control the way that Views are selected by a small override of your favorite ViewEngine. <a href="http://brianreiter.org/2011/03/23/simple-asp-net-mvc-globalization-with-graceful-fallback/">Brian includes a few lines to pick views based on a language cookie on his blog</a>. </p>

<p>He also includes some simple jQuery to allow a user to override their language with a cookie like this:</p>

<pre class="brush: js; toolbar: false; auto-links: false;">var mySiteNamespace = {}<br /><br />mySiteNamespace.switchLanguage = function (lang) {<br />    $.cookie('language', lang);<br />    window.location.reload();<br />}<br /><br />$(document).ready(function () {<br />    // attach mySiteNamespace.switchLanguage to click events based on css classes<br />    $('.lang-english').click(function () { mySiteNamespace.switchLanguage('en'); });<br />    $('.lang-french').click(function () { mySiteNamespace.switchLanguage('fr'); });<br />    $('.lang-arabic').click(function () { mySiteNamespace.switchLanguage('ar'); });<br />    $('.lang-spanish').click(function () { mySiteNamespace.switchLanguage('es'); });<br />});</pre>

<p>I'd probably make this a single client event and use data-language or an HTML5 attribute (brainstorming) like this:</p>

<pre class="brush: js; toolbar: false; auto-links: false;">$(document).ready(function () {<br />        $('.language').click(function (event) {<br />            $.cookie('language', $(event.target).data('lang'));<br />        })<br />});</pre>

<p>But you get the idea. You can set override cookies, check those first, then check the UserLanguages header. It depends on the experience you're looking for and you need to hook it up between the client and server</p>

<h3>Globalized JavaScript Validation</h3>

<p>If you're doing a lot of client-side work using JavaScript and jQuery, you'll need to get familiar with the <a href="https://github.com/jquery/jquery-global">jQuery Global plugin</a>. You may also want the localization files for things like the DatePicker and jQuery UI on <a href="http://nuget.org/List/Packages/jQuery.UI.i18n">NuGet </a>via &quot;install-package jQuery.UI.i18n.&quot;</p>

<p>Turns out the one thing you can't ask your browser via JavaScript is what languages it prefers. That is sitting inside an HTTP Header called &quot;Accept-Language&quot; and looks like this, as it's a weighted list.</p>

<pre>en-ca,en;q=0.8,en-us;q=0.6,de-de;q=0.4,de;q=0.2</pre>

<p>We want to tell jQuery and friends about this value, so we need access to it from the client side in a different way, so I propose this. </p>

<h4>This is Cheesy - use Ajax</h4>

<p>We could do this, with a simple controller on the server side:</p>

<pre class="brush: csharp; toolbar: false; auto-links: false;">public class LocaleController : Controller {<br />    public ActionResult CurrentCulture()  {<br />        return Json(System.Threading.Thread.Current.CurrentUICulture.ToString(), JsonRequestBehavior.AllowGet);<br />    }<br />}</pre>

<p>And then call it from the client side. Ask jQuery to figure it out, and be sure you have the client side globalization libraries you want for the cultures you'll support. I downloaded <a href="https://github.com/jquery/jquery-global">all 700 jQuery Globs from GitHub</a>. Then I could make a quick Ajax call and get that info dynamically from the server. I also include the locales I want to support as scripts like&#160; /Scripts/globinfo/jquery.glob.fr.js. You could also build a dynamic parser and load these dynamically also, or load them ALL when they show up on the Google or Microsoft CDNs as a complete blob.</p>

<pre class="brush: js; toolbar: false; auto-links: false;">&lt;script&gt;<br />    $(document).ready(function () {<br />        //Ask ASP.NET what culture we prefer<br />        $.getJSON('/locale/currentculture', function (data) {<br />            //Tell jQuery to figure it out also on the client side.<br />            $.global.preferCulture(data);<br />        });<br />    });<br />&lt;/script&gt;</pre>

<p>But that is a little <strong>cheesy </strong>because I have to make that little JSON call. Perhaps this belongs somewhere else, like a custom META tag.</p>

<h4>Slightly Less Cheesy - Meta Tag</h4>

<p>Why not put the value of this header in a META tag on the page and access it there? It means no extra AJAX call and I can still use jQuery as before. I'll create an HTML helper and use it in my main layout page. Here's the HTML Helper. It uses the current thread, which was automatically set earlier by the setting we added to the web.config.</p>

<pre class="brush: csharp; toolbar: false; auto-links: false;">namespace System.Web.Mvc<br />{<br />    public static class LocalizationHelpers<br />    {<br />        public static IHtmlString MetaAcceptLanguage&lt;T&gt;(this HtmlHelper&lt;T&gt; html)<br />        {<br />            var acceptLanguage = HttpUtility.HtmlAttributeEncode(Threading.Thread.CurrentThread.CurrentUICulture.ToString());<br />            return new HtmlString(String.Format(&quot;&lt;meta name=\&quot;accept-language\&quot; content=\&quot;{0}\&quot; /&gt;&quot;,acceptLanguage));<br />        }<br />    }<br />}</pre>

<p>I use this helper like this on the main layout page:</p>

<pre class="brush: xml; toolbar: false; auto-links: false;">&lt;html&gt;<br />&lt;head&gt;<br />    &lt;meta charset=&quot;utf-8&quot; /&gt;<br />    &lt;title&gt;@ViewBag.Title&lt;/title&gt;<br />    &lt;link href=&quot;@Url.Content(&quot;~/Content/Site.css&quot;)&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;<br />    &lt;script src=&quot;@Url.Content(&quot;~/Scripts/jquery-1.5.1.min.js&quot;)&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;<br />&#160;&#160;&#160; &lt;script src=&quot;@Url.Content(&quot;~/Scripts/globinfo/jquery.glob.fr.js&quot;)&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt; <br />    &lt;script src=&quot;@Url.Content(&quot;~/Scripts/modernizr-1.7.min.js&quot;)&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;<br />    &lt;script src=&quot;@Url.Content(&quot;~/Scripts/jquery.global.js&quot;)&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;<br />    @Html.MetaAcceptLanguage()<br />&lt;/head&gt;<br />...</pre>

<p>And the resulting HTML looks like this. Note that this made-up META tag would be semantically different from the Content-Language or the lang= attributes as it's part of the the parsed HTTP Header that ASP.NET decided was our current culture, moved into the client.</p>

<pre class="brush: xml; toolbar: false; auto-links: false;">&lt;html&gt;<br />&lt;head&gt;<br />    &lt;meta charset=&quot;utf-8&quot; /&gt;<br />    &lt;title&gt;Home Page&lt;/title&gt;<br />    &lt;link href=&quot;/Content/Site.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;<br />    &lt;script src=&quot;/Scripts/jquery-1.5.1.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;<br />&#160;&#160;&#160; &lt;script src=&quot;/Scripts/globinfo/jquery.glob.fr.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt; <br />    &lt;script src=&quot;/Scripts/modernizr-1.7.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;<br />    &lt;script src=&quot;/Scripts/jquery.global.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;<br />    &lt;meta name=&quot;accept-language&quot; content=&quot;en-US&quot; /&gt;<br />&lt;/head&gt;</pre>

<p>Now I can access it with similar code from the client side. I hope to improve this and support dynamic loading of the JS, however preferCulture isn't smart and actually NEEDS the resources loaded in order to make a decision. I would like a method that would tell me the preferred culture so that I might load the resources on-demand.</p>

<pre class="brush: js; toolbar: false; auto-links: false;">&lt;script&gt;<br />    $(document).ready(function () {<br />        //Ask ASP.NET what culture we prefer, because we stuck it in a meta tag<br />        var data = $(&quot;meta[name='accept-language']&quot;).attr(&quot;content&quot;)<br />        //Tell jQuery to figure it out also on the client side.<br />        $.global.preferCulture(data);<br />    });<br />&lt;/script&gt;</pre>

<p>So what? Now when I am on the client side, my validation and JavaScript is a little smarter. Once jQuery on the client knows about your current preferred culture, you can start being smart with your jQuery. Make sure you are moving around non-culture-specific data values on the wire, then convert them as they become visible to the user.</p>

<pre class="brush: js; toolbar: false; auto-links: false;">var price = $.format(123.789, &quot;c&quot;);<br />jQuery(&quot;#price&quot;).html('12345');<br /></pre>

<pre class="brush: js; toolbar: false; auto-links: false;">var date = $.format(new Date(1972, 2, 5), &quot;D&quot;);<br />jQuery(&quot;#date&quot;).html(date);</pre>

<pre class="brush: js; toolbar: false; auto-links: false;">var units = $.format(12345, &quot;n0&quot;);<br />jQuery(&quot;#unitsMoved&quot;).html(units);</pre>

<p>Now, you can apply these concepts to validation within ASP.NET MVC.</p>

<h3>Globalized jQuery Unobtrusive Validation&#160; </h3>

<p>Adding onto the code above, we can hook up the globalization to validation, so that we'll better understand how to manage values like 5,50 which is 5.50 for the French, for example. There are a number of validation methods you can hook up, here's number parsing.</p>

<pre class="brush: js; toolbar: false; auto-links: false;">$(document).ready(function () {<br />    //Ask ASP.NET what culture we prefer, because we stuck it in a meta tag<br />    var data = $(&quot;meta[name='accept-language']&quot;).attr(&quot;content&quot;)<br />    //Tell jQuery to figure it out also on the client side.<br />    $.global.preferCulture(data);<br /><br />    //Tell the validator, for example,<br />    // that we want numbers parsed a certain way!<br />    $.validator.methods.number = function (value, element) {<br />        if ($.global.parseFloat(value)) {<br />            return true;<br />        }<br />        return false;<br />    }<br />});</pre>

<p>If I set my User Languages to prefer French (fr-FR) as in this screenshot:</p>

<p><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="Language Preference Dialog preferring French" border="0" alt="Language Preference Dialog preferring French" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/82459d5e0fe4_C1A4/Language%20Preference%20(78)_3.png" width="405" height="438" /></p>

<p>Then my validation realizes that and won't allow 5.50 as a value, but will allow 5,50, given this model:</p>

<pre class="brush: csharp; toolbar: false; auto-links: false;">public class Example<br />{<br />    public int ID { get; set; }<br />    [Required]<br />    [StringLength(30)]<br />    public string First { get; set; }<br />    [Required]<br />    [StringLength(30)]<br />    public string Last { get; set; }<br />    [Required]<br />    public DateTime BirthDate { get; set; }<br />    [Required]<br />    [Range(0,100)]<br />    public float HourlyRate { get; set; } <br />}</pre>

<p>I'll see this validation error, as the client side knows our preference for , as a decimal separator.</p>

<p><strong>NOTE:</strong> It seems to me that the [Range] attribute that talks to jQuery Validation doesn't support globalization and isn't calling into the localized methods so it won't work with the , and . decimal problem. I was able to fix this problem by overriding the range method in jQuery like this, forcing it to use the global implementation of parseFloat. Thanks to <a href="http://blog.brainnovative.com/2010/12/globalizing-aspnet-mvc-unobtrusive.html">Kostas in the comments on this post for this info</a>.</p>

<pre class="brush: js; toolbar: false; auto-links: false;">jQuery.extend(jQuery.validator.methods, {<br />    range: function (value, element, param) {<br />        //Use the Globalization plugin to parse the value<br />        var val = $.global.parseFloat(value);<br />        return this.optional(element) || (val &gt;= param[0] &amp;&amp; val &lt;= param[1]);<br />    }<br />});</pre>
Here it is working with validity...&#160; <p><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="The Value 4.5 is not valid for Hourly Rate" border="0" alt="The Value 4.5 is not valid for Hourly Rate" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/82459d5e0fe4_C1A4/image_3.png" width="512" height="426" /></p>

<p>And here it is in a Danish culture working with [range]:</p>

<p><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="Localized Range " border="0" alt="Localized Range " src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/82459d5e0fe4_C1A4/image_11.png" width="579" height="394" /></p>

<p>&#160;</p>

<p>I can also set the Required Attribute to use specific resources and names and localized them from an ExampleResources.resx file like this:</p>

<pre class="brush: csharp; toolbar: false; auto-links: false;">public class Example<br />{<br />    public int ID { get; set; }<br />    [Required(ErrorMessageResourceType=typeof(ExampleResources),<br />              ErrorMessageResourceName=&quot;RequiredPropertyValue&quot;)]<br />    [StringLength(30)]<br />    public string First { get; set; }<br />...snip...</pre>

<p>And see this:</p>

<p><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/82459d5e0fe4_C1A4/image_8.png" width="550" height="212" /></p>

<p><strong>NOTE: </strong>I'm looking into how to set new defaults for all fields, rather than overriding them individually. I've been able to override some with a resource file that has keys called &quot;PropertyValueInvalid&quot; and &quot;PropertyValueRequired&quot; then setting these values in the Global.asax, but something isn't right.</p>

<pre class="brush: csharp; toolbar: false; auto-links: false;">DefaultModelBinder.ResourceClassKey = &quot;ExampleResources&quot;;<br />ValidationExtensions.ResourceClassKey = &quot;ExampleResources&quot;;</pre>

<p>I'll continue to explore this.</p>

<h3>Dynamically Localizing the jQuery DatePicker</h3>

<p>Since I know what the current jQuery UI culture is, I can use it to dynamically load the resources I need for the DatePicker. I've installed the &quot;<a href="http://nuget.org/List/Packages/MvcHtml5Templates">MvcHtml5Templates</a>&quot; NuGet library from <a href="https://github.com/srkirkland/Html5MvcTemplates">Scott Kirkland</a> so my input type is &quot;datetime&quot; and I've added this little bit of JavaScript that says, do we support dates? Are we non-English? If so, go get the right DatePicker script and set it's info as the default for our DatePicker by getting the regional settings given the current global culture.</p>

<pre class="brush: js; toolbar: false; auto-links: false;">//Setup datepickers if we don't support it natively!<br />if (!Modernizr.inputtypes.date) {<br />    if ($.global.culture.name != &quot;en-us&quot; &amp;&amp; $.global.culture.name != &quot;en&quot;) {<br />        var datepickerScriptFile = &quot;/Scripts/globdatepicker/jquery.ui.datepicker-&quot; + $.global.culture.name + &quot;.js&quot;;<br />        //Now, load the date picker support for this language <br />        // and set the defaults for a localized calendar<br />        $.getScript(datepickerScriptFile, function () {<br />            $.datepicker.setDefaults($.datepicker.regional[$.global.culture.name]);<br />        });<br />    }<br />    $(&quot;input[type='datetime']&quot;).datepicker();<br />}</pre>

<p>Then we set all input's with type=datetime. You could have used a CSS class if you like as well. </p>

<p><a href="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/82459d5e0fe4_C1A4/image_5.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/82459d5e0fe4_C1A4/image_thumb_1.png" width="298" height="301" /></a></p>

<p>Now our jQuery DatePicker is French.</p>

<h3>Right to Left (body=rtl)</h3>

<p>For languages like Arabic and Hebrew that read Right To Left (RTL) you'll need to change the dir= attribute of the elements you want flipped. Most often you'll change the root &lt;HTML&gt; element to &lt;HTML dir=&quot;rtl&quot;&gt; or change it with CSS like:</p>

<pre class="brush: css; toolbar: false; auto-links: false;">div {<br />   direction:rtl;<br />}</pre>

<p>The point is to have a general strategy, whether it be a custom layout file for RTL languages or just flipping your shared layout with either CSS or an HTML Helper. Often folks put the direction in the resources and pull out the value ltr or rtl depending.</p>

<h3>Conclusion</h3>

<p>Globalization is hard and requires actual thought and analysis. The current JavaScript offerings are <em>in flux </em>and that's kind. </p>

<p>A lot of this stuff could be made boilerplate or automatic, but much of it is a moving target. I'm currently exploring either a NuGet package that sets stuff up for you OR a &quot;File | New Project&quot; template with all the best practices already setup and packaged into one super-package. What's your preference, Dear Reader?</p>

<h3>The Complete Script</h3>

<p>Here's my current &quot;complete&quot; working script that could then be moved into its own file. This is a work in progress, to be sure. Please forgive any obvious mistakes as I'm still learning JavaScript.</p>

<p><script src="https://gist.github.com/992458.js?file=gistfile1.js"></script>

<h3>Related Links</h3>

<ul>
  <li><a href="http://weblogs.asp.net/scottgu/archive/2010/06/10/jquery-globalization-plugin-from-microsoft.aspx">jQuery Globalization Plugin from Microsoft</a> </li>

  <li><a href="http://blog.brainnovative.com/2010/12/globalizing-aspnet-mvc-unobtrusive.html">Globalizing ASP.NET MVC unobtrusive validation</a> </li>

  <li><a href="http://www.codeproject.com/KB/aspnet/Globalisation_with_jQuery.aspx?display=Mobile">Exploring Globalization with jQuery</a> </li>

  <li><strong>MSDN: </strong><a href="http://msdn.microsoft.com/en-us/library/gg674880(v=vs.98).aspx">Supporting ASP.NET MVC 3 Validation with Non-English Locales</a> </li>

  <li><strong>Open Source Projects TO WATCH: New Internationalization ASP.NET MVC project from Daniel Crenna called &quot;i18n&quot; on GitHub: </strong><a title="https://github.com/danielcrenna/i18n" href="https://github.com/danielcrenna/i18n"><strong>https://github.com/danielcrenna/i18n</strong></a> 

    <br />From his site: 

    <ul>
      <li>Globally recognized interface; localize like the big kids </li>

      <li>Localizes everything; views, controllers, validation attributes, and even routes! </li>

      <li>SEO-friendly; language selection varies the URL, and <code>Content-Language</code> is set appropriately </li>

      <li>Automatic; no routing changes required, just use an alias method where you want localization </li>

      <li>Smart; knows when to hold them, fold them, walk away, or run, based on i18n best practices </li>
    </ul>
  </li>
</ul><br/><hr/>© 2011 Scott Hanselman. All rights reserved. <br/></div>
<p><a href="http://feedads.g.doubleclick.net/~a/zSCCvGmvxOwF8XJyHW_lVzb9K7A/0/da"><img src="http://feedads.g.doubleclick.net/~a/zSCCvGmvxOwF8XJyHW_lVzb9K7A/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/zSCCvGmvxOwF8XJyHW_lVzb9K7A/1/da"><img src="http://feedads.g.doubleclick.net/~a/zSCCvGmvxOwF8XJyHW_lVzb9K7A/1/di" border="0" ismap="true"></img></a></p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=OCay-mxaXi0:EM9QgOHuj_Y:D7DqB2pKExk"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=OCay-mxaXi0:EM9QgOHuj_Y:D7DqB2pKExk" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=OCay-mxaXi0:EM9QgOHuj_Y:MjquXQBfoPI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=MjquXQBfoPI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=OCay-mxaXi0:EM9QgOHuj_Y:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=OCay-mxaXi0:EM9QgOHuj_Y:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=OCay-mxaXi0:EM9QgOHuj_Y:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=OCay-mxaXi0:EM9QgOHuj_Y:F7zBnMyn0Lo" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=OCay-mxaXi0:EM9QgOHuj_Y:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=OCay-mxaXi0:EM9QgOHuj_Y:5M_9TJJRyfI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=5M_9TJJRyfI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=OCay-mxaXi0:EM9QgOHuj_Y:YKYwmLGm_co"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=YKYwmLGm_co" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/ScottHanselman/~4/OCay-mxaXi0" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=62cf6ffa-f029-4fb2-941c-868d72cc0e10";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:4:{i:0;a:5:{s:4:"data";s:7:"ASP.NET";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:11:"ASP.NET MVC";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:20:"Internationalization";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:3;a:5:{s:4:"data";s:10:"Javascript";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:119:"http://www.hanselman.com/blog/GlobalizationInternationalizationAndLocalizationInASPNETMVC3JavaScriptAndJQueryPart1.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:3;a:6:{s:4:"data";s:110:"
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:7:{s:53:"http://madskills.com/public/xml/rss/module/trackback/";a:1:{s:4:"ping";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/Trackback.aspx?guid=e1cdb2d6-c55e-4412-9220-0e7df6eb98b9";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:52:"http://madskills.com/public/xml/rss/module/pingback/";a:2:{s:6:"server";a:1:{i:0;a:5:{s:4:"data";s:43:"http://www.hanselman.com/blog/pingback.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"target";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=e1cdb2d6-c55e-4412-9220-0e7df6eb98b9";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:15:"Scott Hanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:2:{s:7:"comment";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=e1cdb2d6-c55e-4412-9220-0e7df6eb98b9";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:115:"http://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=e1cdb2d6-c55e-4412-9220-0e7df6eb98b9";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:2:"22";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:82:"NuGet for the Enterprise: NuGet in a Continuous Integration Automated Build System";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=e1cdb2d6-c55e-4412-9220-0e7df6eb98b9";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:136:"http://feedproxy.google.com/~r/ScottHanselman/~3/wNE2PX0UkCc/NuGetForTheEnterpriseNuGetInAContinuousIntegrationAutomatedBuildSystem.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Wed, 25 May 2011 00:48:33 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:26889:"<div><p><a href="http://channel9.msdn.com/Events/TechEd/NorthAmerica/2011/DEV338"><img style="background-image: none; border-right-width: 0px; margin: 0px 0px 0px 5px; padding-left: 0px; padding-right: 0px; display: inline; float: right; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="NuGet: Microsoft .NET Package Management for the Enterprise" border="0" alt="NuGet: Microsoft .NET Package Management for the Enterprise" align="right" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/NuGet-for-the-Enterprise-NuGet-in-a-Cont_DED9/image_3.png" width="440" height="240" /></a>I had the pleasure of speaking at TechEd 2011 North America last week in Atlanta. You can see <a href="http://channel9.msdn.com/Events/TechEd/NorthAmerica/2011">ALL the videos of all the sessions on Channel 9</a>. As an aside, you might notice that they are in the process of organizing video archives of ALL Microsoft developer events at <a href="http://channel9.msdn.com/Events">http://channel9.msdn.com/Events</a>. You can even see PDC 1999 if you like or see sessions by Speaker at <a href="http://channel9.msdn.com/Events/Speakers">http://channel9.msdn.com/Events/Speakers</a>. Here are <a href="http://channel9.msdn.com/Events/Speakers/Scott+Hanselman">all my talks with a horrible headshot</a> that I plan on asking Duncan to swap out ASAP.</p>  <p>My favorite talk was <a href="http://channel9.msdn.com/Events/TechEd/NorthAmerica/2011/DEV338"><strong>NuGet: Microsoft .NET Package Management for the Enterprise</strong></a>. I talked about <a href="http://channel9.msdn.com/Events/DevDays/DevDays-2011-Netherlands/Devdays027">NuGet, like I did in The Netherlands</a> a few weeks ago, except the TechEd talk was focused much more on how NuGet fits into the software development lifecycle in a diverse Enterprise (or big boring company, if you prefer) environment.</p>  <p>Here's the video downloads, or you can click the slide at the right.</p>  <ul>   <li>Just the <a href="http://media.ch9.ms/teched/na/2011/ppt/DEV338.pptx">Slides</a> (useless) </li>    <li><a href="http://media.ch9.ms/teched/na/2011/mp4/DEV338.mp4">MP4</a> (iPod, Zune HD) </li>    <li><a href="http://media.ch9.ms/teched/na/2011/wmv/DEV338.wmv">Mid Quality WMV</a> (Lo-band, Mobile) </li>    <li><a href="http://media.ch9.ms/teched/na/2011/wmv-hq/DEV338-HD.wmv">High Quality WMV</a> (PC, XBox, MCE) </li> </ul>  <p>At my last company, we used Subversion for source control and CruiseControl for Continuous Integration (CI). I thought it'd be nice to setup a similar system using the latest free (and mostly free) tools. Note, you can do all this with TFS as well for both Source and Build. I'll do a post on that later. For now, I give you:</p>  <h3>Setting up NuGet to build using Mercurial for Source Control and JetBrains TeamCity for Continuous Integration while pushing to a local Orchard NuGet Gallery Server</h3>  <p>Oh yes, that's a long H3 right there but it's descriptive, right? Here's the general idea. </p>  <p><a href="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/NuGet-for-the-Enterprise-NuGet-in-a-Cont_DED9/image_5.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="Progession Diagram: Source, Build, NuGet, Gallery" border="0" alt="Progession Diagram: Source, Build, NuGet, Gallery" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/NuGet-for-the-Enterprise-NuGet-in-a-Cont_DED9/image_thumb_1.png" width="600" height="233" /></a></p>  <p>This of course, is not unique to NuGet, as NuGet is just a build artifact. At my last company we had several things that popped out of the build. Not just the DLLs, but also a ZIP file, MSI installer and even a complete configured and prepped Virtual Machine for sales people to pick up and give demos with our latest bits. You can setup your Continuous Integration system to be as awesome or as simple as you like. You should be thinking about which libraries and parts will create NuGet packages.</p>  <p>Another thing to think about is daily (or every build) packages vs. stable or release packages. There are some discussions on the <a href="http://nuget.codeplex.com">NuGet site</a> around a &quot;-beta&quot; switch and baked-in support for understanding stable vs. volatile builds. For now, consider two locations for your builds, one for each build and one for &quot;blessed.&quot; For some, this might mean a folder for dailies and only blessed go to a server. </p>  <p>Here's the demo I did. You can change what you like and swap out for your favorite tools. I'll point out some gotchas and issues that hit me and might hit you. It's not perfect, but we're moving in the right direction.</p>  <h3>Step 0 - Prep Stuff</h3>  <p>Some of these steps are &quot;make sure x is setup&quot; type steps and can happen whenever, so don't take the ordering of the steps as totally crucial. Here's what I used and installed.</p>  <ul>   <li>Get <a href="http://www.nuget.org"><strong>NuGet</strong></a><strong> </strong>for VS if you like, but at least the <a href="http://nuget.codeplex.com/releases"><strong>NuGet.exe command line</strong></a> and put it in your PATH. </li>    <li>Get whatever SCM (Source Control Management) system you want. I'm using Mercurial and <a href="http://tortoisehg.bitbucket.org/"><strong>TortoiseHg</strong></a> because it feels like Subversion which I'm used to. </li>    <li>Install the <a href="http://www.jetbrains.com/teamcity/"><strong>TeamCity</strong></a> Continuous Integration Server. They have a free version for small teams. </li>    <li>You can use a network share or local folder for a &quot;poor man's NuGet Server&quot; or you can install a full-on Orchard-based NuGet Gallery      <ul>       <li>The <a href="http://docs.nuget.org/docs/contribute/setting-up-a-local-gallery">full (draft) instructions for setting up an <strong>Orcgard NuGet Gallery </strong>are up on <strong>docs.nuget.org</strong></a>. We'll be updating them with graphics and more explicit detail soon. If you get stuck here, don't worry, just use a local folder, or even a <a href="http://haacked.com/archive/2011/03/31/hosting-simple-nuget-package-feed.aspx">basic NuGet.Server installation like the one Phil shows you how to create</a>. </li>     </ul>   </li> </ul>  <h3>Step 1 - Make sure your project builds and you can make a NuGet package (nupkg)</h3>  <p>I'm doing all this on one laptop, but you might have things spread out at your company. Do what makes you happy. </p>  <p>I made a trivial little class library called TechEdLibrary and confirmed it builds with MSBuild like this:</p>  <pre class="toolbar: false; auto-links: false;">C:\dev\techedlibrary\TechEdLibrary&gt;msbuild TechEdLibrary.csproj<br />Microsoft (R) Build Engine Version 4.0.30319.1<br />[Microsoft .NET Framework, Version 4.0.30319.225]<br />Copyright (C) Microsoft Corporation 2007. All rights reserved.<br /><br />Build started 5/24/2011 4:52:54 PM.<br />..snip...<br />Done Building Project &quot;C:\dev\techedlibrary\TechEdLibrary\TechEdLibrary.csproj&quot;<br /><br />Build succeeded.<br />    0 Warning(s)<br />    0 Error(s)<br /><br />Time Elapsed 00:00:00.13</pre>

<p>The most important part is to make sure that your AssemblyInfo.cs is actually filed out and not just the defaults. This is because we'll want to update the NuGet's specification file using the values from the DLL and project. Basically we want the metadata of the project to drive the NuGet package (or we have to update it all manually.)</p>

<p>I need a spec file. I can do this a few ways. I can do it manually with just &quot;nuget spec,&quot; I can build it off the resulting DLL with &quot;nuget spec -assemblyPath bin\debug\techedlibrary.dll&quot; or off the csproject with &quot;nuget spec techedlibrary.csproj.&quot;</p>

<p>If I create it off the csproj, the NuGet spec file will be created with some $tokens$ that will be filled out at packaging time:</p>

<pre class="toolbar: false; auto-links: false;">C:\dev\techedlibrary\TechEdLibrary&gt;nuget spec TechEdLibrary.csproj<br />Created 'TechEdLibrary.nuspec' successfully.</pre>

<p>In the talk at TechEd I mistakenly build it off the DLL and ended up hard-coding the versions. In a continuous integration system you'll want to update the version in your spec as the build versions. You can either do it with tokens like I will in this post, or you can pass in the version (often from an environment variable) into the command line like &quot;NuGet Pack -version 1.0.1.0.&quot;</p>

<p>You can also&#160; use the UpdateVersion.exe that Matt Griffith and I updated SO many years ago to change your AssemblyInfo.cs, then the NuGet package can pick it up. Again, there is no right answer, the point is to have a strategy. <strong>What drives the version and how does NuGet find out about it?</strong></p>

<p>My TechEdLibrary.nuspec I just made looks like this:</p>

<pre class="brush: xml; toolbar: false; auto-links: false;">&lt;?xml version=&quot;1.0&quot;?&gt;<br />&lt;package xmlns=&quot;http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd&quot;&gt;<br />  &lt;metadata&gt;<br />    &lt;id&gt;$id$&lt;/id&gt;<br />    &lt;version&gt;$version$&lt;/version&gt;<br />    &lt;authors&gt;$author$&lt;/authors&gt;<br />    &lt;owners&gt;$author$&lt;/owners&gt;<br />    &lt;iconUrl&gt;http://www.hanselman.com/images/nugeticon.png<br />&lt;/iconUrl&gt;<br />    &lt;requireLicenseAcceptance&gt;false&lt;/requireLicenseAcceptance&gt;<br />    &lt;description&gt;$description$&lt;/description&gt;<br />  &lt;/metadata&gt;<br />&lt;/package&gt;</pre>

<p>And my AssemblyInfo.cs (abridged) is like this. The attributes from the DLL will get copied into the $tokens$ and packaged.</p>

<pre class="brush: csharp; toolbar: false; auto-links: false;">[assembly: AssemblyTitle(&quot;TechEdLibrary&quot;)]<br />[assembly: AssemblyDescription(&quot;This is my cool library&quot;)]<br />[assembly: AssemblyCompany(&quot;Scott Hanselman&quot;)]<br />[assembly: AssemblyProduct(&quot;TechEdLibrary&quot;)]<br />[assembly: AssemblyVersion(&quot;0.9.*&quot;)] //The * means I'll get an automatic version bump<br />//and more...</pre>

<p>Now I can pack it up with NuGet Pack TechEdLibrary.csproj. Note the command line output find the spec and does the token/metadata replacement?</p>

<pre class="toolbar: false; auto-links: false;">C:\dev\techedlibrary\TechEdLibrary&gt;nuget pack TechEdLibrary.csproj<br />Attempting to build package from 'TechEdLibrary.csproj'.<br />Building project for target framework '.NETFramework,Version=v4.0'.<br />Packing files from 'C:\dev\techedlibrary\TechEdLibrary\bin\Release'.<br />Using 'TechEdLibrary.nuspec' for metadata.<br />Successfully created package 'C:\dev\techedlibrary\TechEdLibrary\TechEdLibrary.0.9.4161.28882.nupkg'.</pre>

<p>Now I can just open the .nupkg into the NuGet Package Explorer and see the version, author, ID (from Title) description and version are all there, brought in from the attributes and combined with my NuSpec. I can edit the NuSpec to taste as long as I maintain the $tokens$ I want.</p>

<p><a href="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/NuGet-for-the-Enterprise-NuGet-in-a-Cont_DED9/NuGet%20Package%20Explorer%20-%20TechEdLibrary.0.9.4161.28882%20(75)_2.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="My package in the NuGet Package Explorer" border="0" alt="My package in the NuGet Package Explorer" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/NuGet-for-the-Enterprise-NuGet-in-a-Cont_DED9/NuGet%20Package%20Explorer%20-%20TechEdLibrary.0.9.4161.28882%20(75)_thumb.png" width="550" height="310" /></a></p>

<p>Now if I build the library again I'll get a new version from the .NET build system and that will cause a new NuPkg to be built with a new version. I make a change to my application's source, build again, then pack again. Note the results in my directory after I make a small change, build and pack.</p>

<pre class="toolbar: false; auto-links: false;">C:\dev\techedlibrary\TechEdLibrary&gt;msbuild TechEdLibrary.csproj <br />Microsoft (R) Build Engine Version 4.0.30319.1<br />Build started 5/24/2011 5:07:58 PM.<br />blah build blah <br />Done Building Project &quot;C:\dev\techedlibrary\TechEdLibrary\TechEdLibrary.csproj&quot; (rebuild target(s))<br /><br />Build succeeded.<br />    0 Warning(s)<br />    0 Error(s)<br /><br />Time Elapsed 00:00:00.32<br /><br />C:\dev\techedlibrary\TechEdLibrary&gt;nuget pack TechEdLibrary.csproj<br />Attempting to build package from 'TechEdLibrary.csproj'.<br />Building project for target framework '.NETFramework,Version=v4.0'.<br />Packing files from 'C:\dev\techedlibrary\TechEdLibrary\bin\Release'.<br />Using 'TechEdLibrary.nuspec' for metadata.<br />Successfully created package 'C:\dev\techedlibrary\TechEdLibrary\TechEdLibrary.0.9.4161.29041.nupkg'<br />.<br /><br />C:\dev\techedlibrary\TechEdLibrary&gt;dir *.nupkg<br /><br />05/24/2011  05:07 PM             4,770 TechEdLibrary.0.9.4161.28882.nupkg<br />05/24/2011  05:08 PM             4,763 TechEdLibrary.0.9.4161.29041.nupkg<br />               2 File(s)          9,533 bytes</pre>

<p>Without settings really anything up but the versioning plan, spec file and checking if packing works, I've got a little system here and hopefully you can see how it'll work.</p>

<p><strong>WEIRDNESS NOTE: </strong>We do have a double-build going on. NuGet.exe, for some weird reason, is running MSBuild again for us. That's lame, and a known bug. Surprisingly in a large number of CI systems in both the .NET and Java worlds &quot;double builds&quot; are common. Weaksauce, but common. Still, no excuse. That'll be fixed in NuGet.exe soon.</p>

<h3>Step 2 - Initial Source Check-in</h3>

<p>I like using <a href="http://www.bitbucket.org">BitBucket</a> for small private projects and <a href="http://www.codeplex.com">CodePlex</a> for public Open Source projects. Both support Hg (the elemental symbol for &quot;Mercury&quot; as in Mercurial) and CodePlex supports TFS for both Source and Work Items. Since my demo is private and BitBucket supports unlimited private projects it was a good fit.</p>

<p>I cloned my project URL from BitBucket into a folder, then added, commited and pushed my bits to the BitBucket Site:</p>

<pre class="toolbar: false; auto-links: false;">C:\dev\something&gt;hg clone https://shanselman@bitbucket.org/shanselman/techedlibrary<br />...move my files in...<br />C:\dev\something&gt;hg add<br />...yada yada yada...<br />C:\dev\something&gt;hg commit<br />...yada yada yada...<br />C:\dev\something&gt;hg push<br />...yada yada yada...</pre>

<p>It's useful then to make sure I can get my source code into another folder and still build it. It's common to miss a file or two. Since the CI Server will be getting the code into a temporary folder you really need to make sure the source will build as it is, retrieved fresh from your SCM.</p>

<h3>Step 3 - Setup your Build Server</h3>

<p>I'm running TeamCity locally on <a title="http://localhost:8111/" href="http://localhost:8111/">http://localhost:8111/</a> with a &quot;build agent&quot; (there can be many) on the same machine. Visit Administration and make a new project, then a new Build Configuration (like Debug or Release).</p>

<p>You'll need to make a VCS root (Version Control System - there are like 60 different acronyms for version control systems. If you see a TLA (Three Letter Acronym) out there that you don't recognize, it's probably something that means &quot;Source Control.&quot;) in TeamCity. Note that I selected Mercurial and set the HG Command Path with the full path to HG.EXE as the CI will call that to check out the code from BitBucket. Note also that I put the path without my name and password for the &quot;pull changes from&quot; as I put the name and password lower down.</p>

<p><a href="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/NuGet-for-the-Enterprise-NuGet-in-a-Cont_DED9/teamCity1_2.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="Editing a VCS Root in TeamCity" border="0" alt="Editing a VCS Root in TeamCity" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/NuGet-for-the-Enterprise-NuGet-in-a-Cont_DED9/teamCity1_thumb.png" width="500" height="501" /></a></p>

<p>Back in Administration, select Edit under your project. Note the nice lists of steps on the right.</p>

<p><a href="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/NuGet-for-the-Enterprise-NuGet-in-a-Cont_DED9/image_7.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="The 7 steps in TeamCity" border="0" alt="The 7 steps in TeamCity" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/NuGet-for-the-Enterprise-NuGet-in-a-Cont_DED9/image_thumb_2.png" width="550" height="241" /></a></p>

<p>We want two steps, one for the MSBuild and one &quot;custom command line&quot; for the NuGet package step. The first step is easy, we call MSBuild on our TechEdLibrary.csproj. </p>

<p>The second step is a temporary hack. It's temporary because JetBrains TeamCity is building NuGet support in directly (<em>screenshots of their internal build below!</em>)</p>

<p><a href="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/NuGet-for-the-Enterprise-NuGet-in-a-Cont_DED9/image_9.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="TeamCity Custom Scripts" border="0" alt="TeamCity Custom Scripts" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/NuGet-for-the-Enterprise-NuGet-in-a-Cont_DED9/image_thumb_3.png" width="550" height="350" /></a></p>

<p>The custom script is basically a BATCH file that looks like this:</p>

<pre class="toolbar: false; auto-links: false;">del *.nupkg 
<br />NuGet pack techedlibrary.csproj
<br />forfiles /m *.nupkg /c &quot;cmd /c NuGet.exe push @FILE yourapikey -source http://localhost:81/</pre>

<p>There's a few interesting things going on here. </p>

<p>First, I delete all the nupkg files in the CI folder as it's all temporary and we don't want to accidentally push old stuff.</p>

<p>Second, I pack up the NuGet package like we saw before.</p>

<p>Finally, I don't know the name of the newly created *.nupkg file, so I cheat by making a DOS BATCH &quot;for loop&quot; that has only one item in it, the newly created .nupkg file! Then I call cmd.exe execute NuGet.exe pack with that new file as a parameter. Make sure you have the trailing backslash. </p>

<p><strong>NOTE: </strong>You can also save the API Key in local storage with NuGet SetApiKey yourapikey -source http://localhost:81 and it'll be saved on a per-source basis.</p>

<p>Because I have an Orchard NuGet Gallery running locally, I have an API key for that server. I'm running my gallery server (it holds the packages and serves the OData Feed) locally on port 81 and the Orchard Site itself is on port 80.</p>

<p><a href="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/NuGet-for-the-Enterprise-NuGet-in-a-Cont_DED9/HanselNuGetGallery%20-%20Windows%20Internet%20Explorer%20(77)_2.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="My personal NuGet Gallery" border="0" alt="My personal NuGet Gallery" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/NuGet-for-the-Enterprise-NuGet-in-a-Cont_DED9/HanselNuGetGallery%20-%20Windows%20Internet%20Explorer%20(77)_thumb.png" width="550" height="415" /></a></p>

<p>I set the build to check Source Control every 60 seconds, if a change is detected, the source is retrieved, build, then NuGet packed, and published to my local server (or the public one). </p>

<p>TeamCity is something I like to have running on extra hardware I've got lying around. You can have up to 20 projects with their free version, so when combined with BitBucket and CodePlex where I keep my projects I can setup my own Continuous Integration System in just a few hours and have better confidence in my code. You can even use Amazon EC2 images to run your builds or just be a build agent.</p>

<h3>Sneak Peak - TeamCity with NuGet Integration</h3>

<p>I'm continuing to talk to companies and software vendors who are jazzed about NuGet. If you are one, watch my talk for ideas on what you can do as a commercial software entity and get into the discussion on CodePlex. </p>

<p>Here's some mockups of what JetBrains is <em>planning </em>for TeamCity. These are just ideas, and they aren't available, so don't stress or pressure them. ;)</p>

<p>This is a mockup of NuGet as a possible Build Step within TeamCity.</p>

<p><a href="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/NuGet-for-the-Enterprise-NuGet-in-a-Cont_DED9/nuget-packages-pack-builder-v2_2.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="This is a mockup of NuGet as a possible Build Step within TeamCity." border="0" alt="This is a mockup of NuGet as a possible Build Step within TeamCity." src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/NuGet-for-the-Enterprise-NuGet-in-a-Cont_DED9/nuget-packages-pack-builder-v2_thumb.png" width="550" height="243" /></a></p>

<p>Here's a mockup of a Build Feature where TeamCity downloads specific packages that will be needed by the build.</p>

<p><a href="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/NuGet-for-the-Enterprise-NuGet-in-a-Cont_DED9/nuget-packages-update-download-feature_2.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="Here&#39;s a mockup of a Build Feature where TeamCity downloads specific packages that will be needed by the build." border="0" alt="Here&#39;s a mockup of a Build Feature where TeamCity downloads specific packages that will be needed by the build." src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/NuGet-for-the-Enterprise-NuGet-in-a-Cont_DED9/nuget-packages-update-download-feature_thumb.png" width="464" height="389" /></a></p>

<p>Here's a screenshot of some early work that <a href="http://www.woodwardweb.com/">Martin Woodward</a> from the TFS team is doing to make sure NuGet and Team Foundation Server work well together in a Continuous Integration environment. Feel free to contact Martin via his blog and continue the discussion on <a href="http://nuget.codeplex.com">http://nuget.codeplex.com</a>. </p>

<p><a href="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/NuGet-for-the-Enterprise-NuGet-in-a-Cont_DED9/image_11.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="TFS and NuGet" border="0" alt="TFS and NuGet" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/NuGet-for-the-Enterprise-NuGet-in-a-Cont_DED9/image_thumb_4.png" width="550" height="283" /></a></p>

<p>Hope this helps you integrate NuGet into your company, however you like it.</p>

<p><strong>Related Links</strong></p>

<ul>
  <li><strong>Session Video: </strong><a href="http://channel9.msdn.com/Events/DevDays/DevDays-2011-Netherlands/Devdays027">NuGet In Depth: Empowering Open Source on the .NET Platform</a> </li>

  <li><strong>Session Video: </strong><a href="http://channel9.msdn.com/Events/DevDays/DevDays-2011-Netherlands/Devdays054">Coding for Fun with Scott Hanselman</a> - Silliness! </li>

  <li><strong>Session Video: </strong><a href="http://channel9.msdn.com/Events/DevDays/DevDays-2011-Netherlands/Devdays002">MVC 3 – 101</a> - Good beginner video! </li>
</ul><br/><hr/>© 2011 Scott Hanselman. All rights reserved. <br/></div>
<p><a href="http://feedads.g.doubleclick.net/~a/zrnwR4X4YnC4JpNyCP4j_CVkdso/0/da"><img src="http://feedads.g.doubleclick.net/~a/zrnwR4X4YnC4JpNyCP4j_CVkdso/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/zrnwR4X4YnC4JpNyCP4j_CVkdso/1/da"><img src="http://feedads.g.doubleclick.net/~a/zrnwR4X4YnC4JpNyCP4j_CVkdso/1/di" border="0" ismap="true"></img></a></p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=wNE2PX0UkCc:lrN-WLMJpXQ:D7DqB2pKExk"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=wNE2PX0UkCc:lrN-WLMJpXQ:D7DqB2pKExk" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=wNE2PX0UkCc:lrN-WLMJpXQ:MjquXQBfoPI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=MjquXQBfoPI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=wNE2PX0UkCc:lrN-WLMJpXQ:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=wNE2PX0UkCc:lrN-WLMJpXQ:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=wNE2PX0UkCc:lrN-WLMJpXQ:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=wNE2PX0UkCc:lrN-WLMJpXQ:F7zBnMyn0Lo" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=wNE2PX0UkCc:lrN-WLMJpXQ:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=wNE2PX0UkCc:lrN-WLMJpXQ:5M_9TJJRyfI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=5M_9TJJRyfI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=wNE2PX0UkCc:lrN-WLMJpXQ:YKYwmLGm_co"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=YKYwmLGm_co" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/ScottHanselman/~4/wNE2PX0UkCc" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=e1cdb2d6-c55e-4412-9220-0e7df6eb98b9";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:2:{i:0;a:5:{s:4:"data";s:5:"NuGet";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:11:"Open Source";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:105:"http://www.hanselman.com/blog/NuGetForTheEnterpriseNuGetInAContinuousIntegrationAutomatedBuildSystem.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:4;a:6:{s:4:"data";s:124:"
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:7:{s:53:"http://madskills.com/public/xml/rss/module/trackback/";a:1:{s:4:"ping";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/Trackback.aspx?guid=20a86783-6071-48ac-8308-9c0312331c3e";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:52:"http://madskills.com/public/xml/rss/module/pingback/";a:2:{s:6:"server";a:1:{i:0;a:5:{s:4:"data";s:43:"http://www.hanselman.com/blog/pingback.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"target";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=20a86783-6071-48ac-8308-9c0312331c3e";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:15:"Scott Hanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:2:{s:7:"comment";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=20a86783-6071-48ac-8308-9c0312331c3e";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:115:"http://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=20a86783-6071-48ac-8308-9c0312331c3e";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:2:"11";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:97:"NuGet Package of the Week #7 - ELMAH (Error Logging Modules and Handlers) with SQL Server Compact";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=20a86783-6071-48ac-8308-9c0312331c3e";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:143:"http://feedproxy.google.com/~r/ScottHanselman/~3/gGhobFzbK6o/NuGetPackageOfTheWeek7ELMAHErrorLoggingModulesAndHandlersWithSQLServerCompact.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Mon, 23 May 2011 21:03:33 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:11783:"<div><p><em>Hey, have you implemented the </em><a href="http://www.hanselman.com/blog/NuGetActionPlanUpgradeTo11SetupAutomaticUpdatesGetNuGetPackageExplorer.aspx"><em><b>NuGet Action Plan</b></em></a><em>? Get on it, it'll take only 5 minutes: </em><a href="http://www.hanselman.com/blog/NuGetActionPlanUpgradeTo11SetupAutomaticUpdatesGetNuGetPackageExplorer.aspx"><em><b>NuGet Action Plan - Upgrade to 1.3, Setup Automatic Updates, Get NuGet Package Explorer</b></em></a><em>. <strong>NuGet 1.3 </strong>is out, so make sure you're set to automatically update!</em></p>  <p><strong>The Backstory: </strong>I was thinking since the <a href="http://www.nuget.org/">NuGet .NET package management site</a> is <a href="http://stats.nuget.org/">starting to fill up</a> that I should start looking for gems (no pun intended) in there. You know, really useful stuff that folks might otherwise not find. I'll look for mostly open source projects, ones I think are really useful. I'll look at how they built their NuGet packages, if there's anything interesting about the way the designed the out of the box experience (and anything they could do to make it better) as well as what the package itself does.</p>  <p>This week's Package of the Week is &quot;<strong>ELMAH 1.2 with SQL Compact</strong>.&quot;</p>  <p><a href="http://nuget.org/List/Packages/elmah.sqlservercompact"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/NuGet-Package-of-the-Week-7---ELMAH-Erro_B9F2/image_3.png" width="614" height="93" /></a></p>  <p>You may already use ELMAH. Don't stop reading now, because you're going to need this information! </p>  <p>Now, I've been blogging and promoting <a href="http://www.hanselman.com/blog/ELMAHErrorLoggingModulesAndHandlersForASPNETAndMVCToo.aspx">ELMAH</a> (Error Logging Modules and Handlers) for years. It's the <strong>first</strong> thing I add to any ASP.NET project of any importance. It's one of the great little gems of ASP.NET open source.</p>  <p>I've shown &quot;install-package elmah&quot; in a number of talks and videos as my go-to demo for how NuGet and a well structured OSS package get you started quickly. Recently the ELMAH team has started to do some restructuring of their packages, and I wanted to showcase their work so you can not only learn from it, but also implement similar structures in your own packages.</p>  <p>First, spend a few minutes <a href="http://www.hanselman.com/blog/ELMAHErrorLoggingModulesAndHandlersForASPNETAndMVCToo.aspx">checking out how ELMAH works and how it can add to your ASP.NET project</a>. Now, let's look at the (currently three, soon to be more) ELMAH packages that are up on <a href="http://www.nuget.org">NuGet.org</a>.</p>  <p>There's currently:</p>  <ul>   <li><strong>ELMAH Core Library (no config)</strong> - &quot;Core library for ELMAH (Error Logging Modules and Handlers) without any configuration&quot;       <ul>       <li>This one includes just the library. If you already have a custom ELMAH configuration or you want to create a new one, you can use and depend on this &quot;core&quot; package. <!--EndFragment--></li>     </ul>   </li>    <li><strong>ELMAH</strong> - &quot;ELMAH with initial configuration for getting started quickly. ELMAH (Error Logging Modules and Handlers) is an application-wide error logging facility that is completely pluggable. It can be dynamically added to a running ASP.NET web application, or even all ASP.NET web applications on a machine, without any need for re-compilation or re-deployment.&quot;       <ul>       <li>This one includes the basics you'll need to for a drop-in/just-works configuration. This isn't the &quot;core&quot; library, but rather one that depends on the core. It's the &quot;getting started&quot; one. </li>     </ul>   </li>    <li><strong>ELMAH on MS SQL Server Compact </strong>- &quot;ELMAH with configuration for getting started quickly on a Microsoft SQL Server Compact database as the error log.&quot;       <ul>       <li>This package depends on the Elmah library and Elmah.CoreLibrary package as well as SqlServerCompact and adds configuration for using them together. </li>        <li><em>Dependency chain: elmah.sqlservercompact -&gt; elmah -&gt; elmah.corelibrary</em> </li>     </ul>   </li> </ul>  <p>Here's the web.config.transform that elmah.sqlservercompact adds to your base ELMAH web.config:</p>  <pre class="brush: xml; toolbar: false; auto-links: false;">&lt;configuration&gt;<br />  &lt;elmah&gt;  <br />    &lt;errorLogtype=&quot;Elmah.SqlServerCompactErrorLog, Elmah&quot;connectionStringName=&quot;elmah-sqlservercompact&quot;/&gt;<br />  &lt;/elmah&gt;<br />  &lt;connectionStrings&gt;    <br />    &lt;addname=&quot;elmah-sqlservercompact&quot;connectionString=&quot;Data Source=|DataDirectory|\Elmah.sdf&quot;/&gt;<br />  &lt;/connectionStrings&gt;<br />&lt;/configuration&gt;</pre>

<p><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: right; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="ELMAH Database Column Structure" border="0" alt="ELMAH Database Column Structure" align="right" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/NuGet-Package-of-the-Week-7---ELMAH-Erro_B9F2/image_6.png" width="254" height="344" />Give it a try, it's easy, just install-package elmah.sqlservercompact. This basic package dependency structure will enable the Elmah guys to create &quot;quick starts&quot; with different configurations that each depend on elmah, which depends on the elmah.corelibrary.&#160; </p>

<p>ELMAH supports many formats for storing errors, but I think that SQL Server Compact is a great choice for small to medium size applications. </p>

<ul>
  <li>Everything in one place and queryable. </li>

  <li>No mess of text files or XML files </li>

  <li>Database survives application restarts/recycles </li>
</ul>

<p>If you're using a WebFarm, you might want to use a central SQL Server instance, but I know a number of folks who run WebFarms and still prefer their errors on a per WebServer basis.</p>

<p>When your application starts up, ELMAH will put the Elmah.sdf in your ~\App_Data folder. The database is structured like this image at right. With the SQL Server Compact tooling that's added with <a href="http://www.microsoft.com/web/gallery/install.aspx?appid=VWDorVS2010SP1Pack"><strong>Visual Studio 2010 SP1</strong></a> you can open the SDF file right in VS and query it if you like.</p>

<p>If you prefer a different backend for your logs, we should soon see NuGet &quot;quick start&quot; packages for many of the supported ELMAH storage solutions. You can even get your errors as RSS or JSON!</p>

<ul>
  <li><a href="http://www.microsoft.com/sql/">Microsoft SQL Server</a> </li>

  <li><a href="http://www.oracle.com/">Oracle</a> (<a href="http://elmah.googlecode.com/svn/tags/REL-1.2/src/Elmah/OracleErrorLog.cs">OracleErrorLog</a>) </li>

  <li><a href="http://www.sqlite.org/">SQLite</a> (version 3) database file </li>

  <li><a href="http://code.google.com/p/elmah/wiki/Access">Microsoft Access</a> (<a href="http://elmah.googlecode.com/svn/tags/REL-1.2/src/Elmah/AccessErrorLog.cs">AccessErrorLog</a>) </li>

  <li>Loose XML files </li>

  <li>RAM (in-memory) </li>

  <li><a href="http://www.microsoft.com/sql/">SQL Server Compact Edition</a> </li>

  <li><a href="http://www.mysql.com/">MySQL</a> </li>

  <li><a href="http://www.postgresql.org/">PostgreSQL</a> </li>
</ul>

<p>Also, be aware that <a href="http://code.google.com/p/elmah/"><strong>Elmah has just be updated to version 1.2</strong></a> with a number of new features and fixes. ELMAH works in .NET 1.1 and .NET 2, so there's no excuse for not checking it out!</p>

<h3><strong><a href="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/NuGet-Package-of-the-Week-7---ELMAH-Erro_B9F2/Error_%20System.Web.HttpException%20%5B30158b95-0112-4081-91ab-c5ec7848a12c%5D%20-%20Windows%20Internet%20Explorer%20(74)_2.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="Screenshot of an ELMAH log" border="0" alt="Screenshot of an ELMAH log" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/NuGet-Package-of-the-Week-7---ELMAH-Erro_B9F2/Error_%20System.Web.HttpException%20%5B30158b95-0112-4081-91ab-c5ec7848a12c%5D%20-%20Windows%20Internet%20Explorer%20(74)_thumb.png" width="464" height="389" /></a></strong></h3>

<p>Enjoy, and thanks to the ELMAH team for putting up with my nagging, bug reports and reviews over the last few months! It's only because I love the project so much!</p>

<h3><strong>Related Links</strong></h3>

<ul>
  <li><a href="http://www.hanselman.com/blog/ELMAHErrorLoggingModulesAndHandlersForASPNETAndMVCToo.aspx">ELMAH: Error Logging Modules and Handlers for ASP.NET (and MVC too!)</a> </li>

  <li><a href="http://www.hanselman.com/blog/ELMAHAndExceptionDrivenDevelopmentFTW.aspx">ELMAH and Exception Driven Development FTW</a> </li>

  <li><a href="http://www.hanselman.com/blog/GoodExceptionManagementRulesOfThumbBackToBasicsEdition.aspx">Good Exception Management Rules of Thumb - Back to Basics Edition</a> </li>

  <li>Other blog posts in the <a href="http://www.hanselman.com/blog/CategoryView.aspx?category=NuGetPOW"><strong>NuGet Package of the Week</strong></a> category </li>
</ul><br/><hr/>© 2011 Scott Hanselman. All rights reserved. <br/></div>
<p><a href="http://feedads.g.doubleclick.net/~a/6iLBmFugEx_SZK2K0ZNymxizs4Y/0/da"><img src="http://feedads.g.doubleclick.net/~a/6iLBmFugEx_SZK2K0ZNymxizs4Y/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/6iLBmFugEx_SZK2K0ZNymxizs4Y/1/da"><img src="http://feedads.g.doubleclick.net/~a/6iLBmFugEx_SZK2K0ZNymxizs4Y/1/di" border="0" ismap="true"></img></a></p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=gGhobFzbK6o:xS1Aj2QBCfE:D7DqB2pKExk"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=gGhobFzbK6o:xS1Aj2QBCfE:D7DqB2pKExk" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=gGhobFzbK6o:xS1Aj2QBCfE:MjquXQBfoPI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=MjquXQBfoPI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=gGhobFzbK6o:xS1Aj2QBCfE:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=gGhobFzbK6o:xS1Aj2QBCfE:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=gGhobFzbK6o:xS1Aj2QBCfE:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=gGhobFzbK6o:xS1Aj2QBCfE:F7zBnMyn0Lo" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=gGhobFzbK6o:xS1Aj2QBCfE:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=gGhobFzbK6o:xS1Aj2QBCfE:5M_9TJJRyfI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=5M_9TJJRyfI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=gGhobFzbK6o:xS1Aj2QBCfE:YKYwmLGm_co"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=YKYwmLGm_co" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/ScottHanselman/~4/gGhobFzbK6o" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=20a86783-6071-48ac-8308-9c0312331c3e";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:4:{i:0;a:5:{s:4:"data";s:7:"ASP.NET";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:11:"ASP.NET MVC";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:5:"NuGet";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:3;a:5:{s:4:"data";s:8:"NuGetPOW";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:112:"http://www.hanselman.com/blog/NuGetPackageOfTheWeek7ELMAHErrorLoggingModulesAndHandlersWithSQLServerCompact.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:5;a:6:{s:4:"data";s:103:"
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:7:{s:53:"http://madskills.com/public/xml/rss/module/trackback/";a:1:{s:4:"ping";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/Trackback.aspx?guid=4031bbdf-98ba-4d9d-9d97-68cecad6ca91";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:52:"http://madskills.com/public/xml/rss/module/pingback/";a:2:{s:6:"server";a:1:{i:0;a:5:{s:4:"data";s:43:"http://www.hanselman.com/blog/pingback.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"target";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=4031bbdf-98ba-4d9d-9d97-68cecad6ca91";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:15:"Scott Hanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:2:{s:7:"comment";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=4031bbdf-98ba-4d9d-9d97-68cecad6ca91";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:115:"http://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=4031bbdf-98ba-4d9d-9d97-68cecad6ca91";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:1:"8";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:38:"This Developer's Life 2.0.2 - Pressure";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=4031bbdf-98ba-4d9d-9d97-68cecad6ca91";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:95:"http://feedproxy.google.com/~r/ScottHanselman/~3/U5vC5GLdTFw/ThisDevelopersLife202Pressure.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Tue, 17 May 2011 14:21:43 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:6938:"<div><p><a href="http://www.thisdeveloperslife.com/post/2-0-2-pressure"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px 0px 0px 4px; padding-left: 0px; padding-right: 0px; display: inline; float: right; border-top: 0px; border-right: 0px; padding-top: 0px" title="clamp" border="0" alt="clamp" align="right" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/4e534904e6e4_66CE/clamp_3.jpg" width="350" height="309" /></a>In this second episode of the second season of <a href="http://www.thisdeveloperslife.com/"><strong>This Developer's Life</strong></a> we talk to a group of Top Gun developers: the <a href="http://www.stackoverflow.com">StackOverflow</a> team, about the day their database melted - and how the team responded. </p>  <ul>   <li><a href="http://twitter.com/superdalgas">Geoff Dalgas</a> - developer on StackOverflow </li>    <li><a href="http://twitter.com/samsaffron">Sam Saffron</a> - developer and data geek at StackOverflow </li>    <li><a href="http://codinghorror.com">Jeff Atwood</a> ,Mr. CodingHorror and co-founder of StackOverflow </li> </ul>  <ul></ul>  <ul></ul>  <p>Also, please visit the new site at <a href="http://thisdeveloperslife.com">http://thisdeveloperslife.com</a>. We've got sixteen episodes so far, and we are pretty proud of them. Don't listen to podcasts? Don't commute? Surely you have a long plane flight coming up? Maybe a cross country drive? Load up. It's all free.</p>  <p><strong>You can </strong><a href="http://traffic.libsyn.com/devlife/202a-Pressure.mp3"><strong>download the MP3 here (53 minutes)</strong></a><strong> and visit our site at </strong><a href="http://thisdeveloperslife.com/"><strong>http://thisdeveloperslife.com</strong></a><strong>.</strong></p>  <p><strong>Please consider </strong><a href="http://thisdeveloperslife.com/rss"><strong>subscribing</strong></a><strong> with </strong><a href="http://itunes.apple.com/us/podcast/this-developers-life/id389727545"><strong>iTunes</strong></a><strong>, or </strong><a href="http://social.zune.net/podcast/This-Developer's-Life/24deae20-36c8-499c-8023-a6d7153c7178"><strong>Zune</strong></a><strong>. If you enjoy it, take a moment </strong><strong>and please </strong><a href="http://itunes.apple.com/us/podcast/this-developers-life/id389727545"><strong>do REVIEW our show on iTunes</strong></a><strong>.</strong></p>  <p>Or if you have a BitTorrent client and would like to help save us bandwidth money, as well as the bragging rights of <a href="http://www.clearbits.net/creators/178-this-developers-life">downloading legal torrents via RSS, <strong>get our Torrent Feed </strong>at ClearBits</a>.</p>  <p>The bandwidth and other costs for this week's show were picked up <a href="http://www.devexpress.com/go/TDL.aspx"><strong>DevExpress and CodeRush</strong></a>! Visit them and <a href="http://twitter.com/devexpress">thank them on Twitter</a>.</p>  <p><a href="http://www.devexpress.com/go/TDL.aspx"><img title="This Developer&#39;s Life is brought to you by CodeRush for Visual Studio." border="0" alt="This Developer&#39;s Life is brought to you by CodeRush for Visual Studio." src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/17d2c426a60b_CE08/DX_Slogan_350_9cc61513-3486-4eed-9ab6-a8ca54119edc.png" width="350" height="124" /></a></p>  <p><em><a href="http://www.devexpress.com/go/TDL.aspx">This Developer's Life is brought to you by CodeRush for Visual Studio.</a></em></p>  <p>Announcing our listener contest...<strong>This Developer's Life - Crowdsourced</strong></p>  <p>Oh yes. We want to hear your stories. Record your best developer stories and send them to us and if we think they rock, we'll include them in the <strong>next </strong>episode of This Developer's Life.</p>  <p>What we need from you:</p>  <ul>   <li>Your story. We don't want interviews, we want stories. Tell us about your passion, or something crazy that happened at work while solving some technical problem. </li>    <li>Keep your audio clean. Use a decent microphone or at least make sure you don't &quot;overdrive&quot; your microphone by talking to close or two loudly. Don't record while mowing the lawn and don't record in a giant echo chamber. </li>    <li>Be passionate. Talk to us like you're talking to a friend. </li>    <li>Don't worry about editing or music. Just share. We'll handle the Lady Gaga mashups. </li>    <li>Note we <em>may</em> move your audio around or change the order of stuff to make it more listenable or interesting or both. </li>    <li>Change the names of companies and people to protect the innocent (or guilty) </li>    <li>Know that by giving us your audio you're releasing it the Creative Commons and that we may or may not use it for a future show. </li> </ul>  <p>Send us <a href="http://www.hanselman.com/blog/contact.html">a link to your audio file</a> and what you're talking about and we'll do the rest. See you next time!</p><br/><hr/>© 2011 Scott Hanselman. All rights reserved. <br/></div>
<p><a href="http://feedads.g.doubleclick.net/~a/pvw_U_6ebGMWFYFDZqzXszXGbWU/0/da"><img src="http://feedads.g.doubleclick.net/~a/pvw_U_6ebGMWFYFDZqzXszXGbWU/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/pvw_U_6ebGMWFYFDZqzXszXGbWU/1/da"><img src="http://feedads.g.doubleclick.net/~a/pvw_U_6ebGMWFYFDZqzXszXGbWU/1/di" border="0" ismap="true"></img></a></p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=U5vC5GLdTFw:hoWirdp-4ks:D7DqB2pKExk"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=U5vC5GLdTFw:hoWirdp-4ks:D7DqB2pKExk" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=U5vC5GLdTFw:hoWirdp-4ks:MjquXQBfoPI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=MjquXQBfoPI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=U5vC5GLdTFw:hoWirdp-4ks:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=U5vC5GLdTFw:hoWirdp-4ks:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=U5vC5GLdTFw:hoWirdp-4ks:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=U5vC5GLdTFw:hoWirdp-4ks:F7zBnMyn0Lo" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=U5vC5GLdTFw:hoWirdp-4ks:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=U5vC5GLdTFw:hoWirdp-4ks:5M_9TJJRyfI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=5M_9TJJRyfI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=U5vC5GLdTFw:hoWirdp-4ks:YKYwmLGm_co"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=YKYwmLGm_co" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/ScottHanselman/~4/U5vC5GLdTFw" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=4031bbdf-98ba-4d9d-9d97-68cecad6ca91";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:1:{i:0;a:5:{s:4:"data";s:7:"Podcast";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:64:"http://www.hanselman.com/blog/ThisDevelopersLife202Pressure.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:6;a:6:{s:4:"data";s:110:"
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:7:{s:53:"http://madskills.com/public/xml/rss/module/trackback/";a:1:{s:4:"ping";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/Trackback.aspx?guid=a09d7b2a-250d-413e-a477-c1db80ab360f";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:52:"http://madskills.com/public/xml/rss/module/pingback/";a:2:{s:6:"server";a:1:{i:0;a:5:{s:4:"data";s:43:"http://www.hanselman.com/blog/pingback.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"target";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=a09d7b2a-250d-413e-a477-c1db80ab360f";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:15:"Scott Hanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:2:{s:7:"comment";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=a09d7b2a-250d-413e-a477-c1db80ab360f";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:115:"http://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=a09d7b2a-250d-413e-a477-c1db80ab360f";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:1:"2";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:112:"Hanselminutes Podcast 266 - Open Source vs. Making Money vs. Freaking Lasers - Are we all Evil? With Chris Sells";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=a09d7b2a-250d-413e-a477-c1db80ab360f";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:154:"http://feedproxy.google.com/~r/ScottHanselman/~3/sgaGjbDbxTI/HanselminutesPodcast266OpenSourceVsMakingMoneyVsFreakingLasersAreWeAllEvilWithChrisSells.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Tue, 17 May 2011 14:16:55 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:6962:"<div><p><a href="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/2c0536180c29_65B1/sharkswithlasers_2.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px 0px 0px 6px; padding-left: 0px; padding-right: 0px; display: inline; float: right; border-top: 0px; border-right: 0px; padding-top: 0px" title="sharkswithlasers" border="0" alt="sharkswithlasers" align="right" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/2c0536180c29_65B1/sharkswithlasers_thumb.jpg" width="400" height="237" /></a>Scott chats with <a href="http://www.sellsbrothers.com">Chris Sells</a> about the pressure to release software as Open Source versus pressure to make money as a business. How are Google, Microsoft and Apple evolving over the years and what should we as developers do about it?</p>    <h3><strong>Download: </strong><a href="http://s3.amazonaws.com/hanselminutes/hanselminutes_0266.mp3">MP3 Full Show</a></h3>  <h3><strong>NOTE: If you want to download our complete archives as a feed - that's all 266 shows, </strong><a href="http://feeds.feedburner.com/HanselminutesCompleteMP3"><strong>subscribe to the Complete MP3 Feed here</strong></a><strong>.</strong></h3>  <p><strong>Also, please do take a moment and </strong><a href="http://phobos.apple.com/WebObjects/MZStore.woa/wa/viewPodcast?id=117488860"><strong>review the show on iTunes</strong></a><strong>.</strong></p>  <h3><strong>Subscribe: </strong><a href="http://feeds.feedburner.com/Hanselminutes"><img border="0" alt="Subscribe to Hanselminutes" src="http://www.hanselman.com/blog/content/binary/feed_2Dicon_2D16x16.png" /></a> or <a href="http://phobos.apple.com/WebObjects/MZStore.woa/wa/viewPodcast?id=117488860"><img border="0" alt="Subscribe to my Podcast in iTunes" src="http://www.hanselman.com/blog/themes/zenGarden2/itunes_subscribe.gif" /></a> or <a href="zune://subscribe/?Hanselminutes=http://feeds.feedburner.com/hanselminutes"><strong>Zune</strong></a></h3>  <p>Do also <a href="http://www.hanselminutes.com/archives.aspx">remember the complete archives</a> are always up and they have <strong><em>PDF Transcripts</em></strong>, a little known feature that show up a few weeks after each show.</p>  <p><a href="http://www.telerik.com/products/aspnet/overview.aspx?gad=CPLKy9kDEghsdEbLXRZ0NBiF1bL_AyCCkdsU"><strong>Telerik</strong></a> is our sponsor for this show.</p>  <p><a href="http://www.telerik.com/products/aspnet/overview.aspx?gad=CPLKy9kDEghsdEbLXRZ0NBiF1bL_AyCCkdsU"><strong><img border="0" align="left" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/HanselminutesPodcast51StaticCodeAnalysis_140AB/telerikLogo%5B1%5D%5B8%5D.gif" width="216" height="74" /></strong></a><strong>Building quality software is never easy. It requires skills and imagination. We cannot promise to improve your skills, but when it comes to User Interface and developer tools, we can provide the building blocks to take your application a step closer to your imagination. Explore the leading UI suites for </strong><a href="http://asp.net/"><strong>ASP.NET</strong></a>&#160;<strong>AJAX, </strong><a href="http://www.telerik.com/products/aspnet-mvc.aspx"><strong>MVC</strong></a><strong>, </strong><a href="http://www.telerik.com/products/silverlight.aspx"><strong>Silverlight</strong></a><strong>, </strong><a href="http://www.telerik.com/products/winforms.aspx"><strong>Windows Forms</strong></a><strong> and </strong><a href="http://www.telerik.com/products/wpf.aspx"><strong>WPF</strong></a><strong>. Enjoy developer tools like </strong><a href="http://www.telerik.com/products/reporting.aspx"><strong>.NET Reporting</strong></a><strong>, </strong><a href="http://www.telerik.com/products/orm.aspx"><strong>ORM</strong></a><strong>, </strong><a href="http://www.telerik.com/automated-testing-tools.aspx"><strong>Automated Testing Tools</strong></a><strong>, </strong><a href="http://www.telerik.com/team-productivity-tools/teampulse.aspx"><strong>Agile Project Management Tools</strong></a><strong>, and </strong><a href="http://www.sitefinity.com/"><strong>Content Management Solution</strong></a><strong>. And now you can increase your productivity with </strong><a href="http://www.telerik.com/products/justcode.aspx"><strong>JustCode</strong></a><strong>, Telerik’s new productivity tool for code analysis and refactoring. Visit </strong><a href="http://www.telerik.com/"><strong>www.telerik.com</strong></a><strong>.</strong></p>  <p><strong><em></em></strong>As I've said before this show comes to you with the audio expertise and stewardship of <a href="http://weblogs.asp.net/cfranklin/archive/2006/01/11/435036.aspx">Carl Franklin</a>. The name comes from <a href="http://www.paraesthesia.com/blog/comments.php?id=776_0_1_0_C">Travis Illig</a>, but the goal of the show is simple. Avoid wasting the listener's time. (and make the commute less boring)</p>  <p>Enjoy. Who knows what'll happen in the next show?</p><br/><hr/>© 2011 Scott Hanselman. All rights reserved. <br/></div>
<p><a href="http://feedads.g.doubleclick.net/~a/bPp7J_p_B132juIdx4l-ldYGeT0/0/da"><img src="http://feedads.g.doubleclick.net/~a/bPp7J_p_B132juIdx4l-ldYGeT0/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/bPp7J_p_B132juIdx4l-ldYGeT0/1/da"><img src="http://feedads.g.doubleclick.net/~a/bPp7J_p_B132juIdx4l-ldYGeT0/1/di" border="0" ismap="true"></img></a></p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=sgaGjbDbxTI:uiWwEJ7CE0Y:D7DqB2pKExk"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=sgaGjbDbxTI:uiWwEJ7CE0Y:D7DqB2pKExk" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=sgaGjbDbxTI:uiWwEJ7CE0Y:MjquXQBfoPI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=MjquXQBfoPI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=sgaGjbDbxTI:uiWwEJ7CE0Y:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=sgaGjbDbxTI:uiWwEJ7CE0Y:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=sgaGjbDbxTI:uiWwEJ7CE0Y:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=sgaGjbDbxTI:uiWwEJ7CE0Y:F7zBnMyn0Lo" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=sgaGjbDbxTI:uiWwEJ7CE0Y:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=sgaGjbDbxTI:uiWwEJ7CE0Y:5M_9TJJRyfI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=5M_9TJJRyfI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=sgaGjbDbxTI:uiWwEJ7CE0Y:YKYwmLGm_co"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=YKYwmLGm_co" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/ScottHanselman/~4/sgaGjbDbxTI" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=a09d7b2a-250d-413e-a477-c1db80ab360f";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:2:{i:0;a:5:{s:4:"data";s:11:"Open Source";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:7:"Podcast";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:123:"http://www.hanselman.com/blog/HanselminutesPodcast266OpenSourceVsMakingMoneyVsFreakingLasersAreWeAllEvilWithChrisSells.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:7;a:6:{s:4:"data";s:103:"
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:7:{s:53:"http://madskills.com/public/xml/rss/module/trackback/";a:1:{s:4:"ping";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/Trackback.aspx?guid=c10847d5-decf-4c3a-890e-585c10525228";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:52:"http://madskills.com/public/xml/rss/module/pingback/";a:2:{s:6:"server";a:1:{i:0;a:5:{s:4:"data";s:43:"http://www.hanselman.com/blog/pingback.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"target";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=c10847d5-decf-4c3a-890e-585c10525228";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:15:"Scott Hanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:2:{s:7:"comment";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=c10847d5-decf-4c3a-890e-585c10525228";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:115:"http://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=c10847d5-decf-4c3a-890e-585c10525228";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:2:"12";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:128:"How to add Tweets to your blog and debugging basic JavaScript: Why did Twitter.com/JavaScript/Blogger JSONP Widget stop working?";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=c10847d5-decf-4c3a-890e-585c10525228";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:172:"http://feedproxy.google.com/~r/ScottHanselman/~3/20ltBGHdCi4/HowToAddTweetsToYourBlogAndDebuggingBasicJavaScriptWhyDidTwittercomJavaScriptBloggerJSONPWidgetStopWorking.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Fri, 13 May 2011 00:21:40 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:13619:"<div><p>I have a little yellow bar at the top of my blog that is supposed to show my latest Tweet. It's a nice unobtrusive way to show that I'm out there and I'm active, and maybe if the tweet is interesting to you, you'll <a href="http://www.twitter.com/shanselman">stop by Twitter and follow me</a>.</p>  <p>However, I noticed it stopped working recently. It was blank:</p>  <p><img style="border-right-width: 0px; margin: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/abcb0d7af2d2_E70E/image_3.png" width="419" height="39" /> </p>  <p><a href="http://www.twitter.com/badgets"><img style="border-right-width: 0px; margin: 0px 0px 0px 10px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="Static picture of a list of tweets" border="0" alt="Static picture of a list of tweets" align="right" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/abcb0d7af2d2_E70E/image_12.png" width="258" height="296" /></a>Weird. It'd worked great for years, plural. I searched around and found a <a href="http://getsatisfaction.com/twitter/topics/why_has_http_twitter_com_javascripts_blogger_js_stopped_working">few posts on GetSatisfaction</a> asking about it, some recent, some not recent at all. Some people are having the code work on some accounts and not others.</p>  <p>Unfortunately, Twitter seems to have quietly deprecated the code I was using. It's still there but there are no pages on Twitter on how to add tweets to your blog in a low-level controlled way.</p>  <p>Twitter wants you to visit <a href="http://twitter.com/badges">http://twitter.com/badges</a> and use their <a href="http://twitter.com/about/resources/widgets">existing Twitter Widgets</a>. These are very typical of other sites, in that they are boxes with your tweets in them. </p>  <p>For example, here's a box of Tweets to the right, however, that's a little garish for my tastes. </p>  <p>Here's the code I was using to show just the very first tweet on the top of page. First at the top of the page I have a div that will hold my most recent tweet.</p>  <pre class="brush: xml; toolbar: false; auto-links: false;">&lt;div id=&quot;twitter_div&quot;&gt;<br /> &lt;a href=&quot;http://twitter.com/shanselman&quot; id=&quot;twitter-link&quot; &gt;Latest Tweet:  &lt;/a&gt;<br /> &lt;span id=&quot;twitter_update_list&quot;&gt;&lt;/span&gt;<br />&lt;/div&gt;</pre>

<p>Then later at the bottom I have these two scripts. These are what appear to be either not supported or not advertised by Twitter anymore.</p>

<pre class="brush: xml; toolbar: false; auto-links: false;">&lt;script type=&quot;text/javascript&quot; src=&quot;http://twitter.com/javascripts/blogger.js&quot;&gt;&lt;/script&gt;<br />&lt;script type=&quot;text/javascript&quot; src=&quot;http://twitter.com/statuses/user_timeline/shanselman.json?callback=twitterCallback2&amp;count=1&quot;&gt;&lt;/script&gt;</pre>

<p>Now, don't use it just like that if you want to get only 1 original tweet as I do. <strong>Because it's this very code that stopped working recently. <em>Except it stopped working sometimes. But did it?</em></strong></p>

<p>To figure it out quickly, first I visited this URL in my browser. It returns JSON of all my tweets.</p>

<p><a title="http://twitter.com/statuses/user_timeline/shanselman.json" href="http://twitter.com/statuses/user_timeline/shanselman.json?count=1">http://twitter.com/statuses/user_timeline/shanselman.json?count=1</a></p>

<p>However sometimes I get this:</p>

<pre>[]</pre>

<p>Yes, really. An empty JSON array. But why? Well at this moment in time my &quot;most recent tweet&quot; is actually a native retweet. It's not a tweet from me, it's a retweet of a YouTube video. See below?</p>

<p><img style="border-right-width: 0px; margin: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="A native REtweet next to a real tweet" border="0" alt="A native REtweet next to a real tweet" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/abcb0d7af2d2_E70E/image_8.png" width="523" height="170" /></p>

<p>Perhaps this JSON Twitter API was created before the Native Retweet was invented. But, if I tweet something fresh, at hit <a title="http://twitter.com/statuses/user_timeline/shanselman.json" href="http://twitter.com/statuses/user_timeline/shanselman.json?count=1">http://twitter.com/statuses/user_timeline/shanselman.json?count=1</a> again, I'll see this minimized JSON:</p>

<pre class="brush: js; toolbar: false; auto-links: false;">[{&quot;in_reply_to_status_id&quot;:null,&quot;text&quot;:&quot;Testing for a blog post. Move along. This tweet never happened.&quot;,&quot;created_at&quot;:&quot;Thu May 12 23:44:13 +0000 2011&quot;,&quot;favorited&quot;:false,&quot;retweet_count&quot;:0,&quot;source&quot;:&quot;web&quot;,&quot;in_reply_to_screen_name&quot;:null,&quot;in_reply_to_status_id_str&quot;:null,&quot;id_str&quot;:&quot;68823826439487488&quot;,&quot;contributors&quot;:null,&quot;retweeted&quot;:false,&quot;in_reply_to_user_id_str&quot;:null,&quot;place&quot;:null,&quot;coordinates&quot;:null,&quot;geo&quot;:null,&quot;in_reply_to_user_id&quot;:null,&quot;truncated&quot;:false,&quot;user&quot;:{&quot;is_translator&quot;:false,&quot;notifications&quot;:false,&quot;created_at&quot;:&quot;Tue May 01 05:55:26 +0000 2007&quot;,&quot;profile_sidebar_border_color&quot;:&quot;b8aa9c&quot;,&quot;listed_count&quot;:3909,&quot;following&quot;:true,&quot;description&quot;:&quot;Tech, Diabetes, Parenting, Race, Linguistics, Fashion, Podcasting, Media, Culture, Code, Ratchet.&quot;,&quot;show_all_inline_media&quot;:true,&quot;geo_enabled&quot;:true,&quot;profile_use_background_image&quot;:true,&quot;profile_image_url&quot;:&quot;http:\/\/a1.twimg.com\/profile_images\/1344567304\/image_normal.jpg&quot;,&quot;contributors_enabled&quot;:false,&quot;verified&quot;:false,&quot;profile_background_color&quot;:&quot;d1cdc1&quot;,&quot;profile_background_image_url&quot;:&quot;http:\/\/a0.twimg.com\/profile_background_images\/157325454\/twilk_background_4ca8e4832a970.jpg&quot;,&quot;screen_name&quot;:&quot;shanselman&quot;,&quot;default_profile_image&quot;:false,&quot;statuses_count&quot;:40900,&quot;id_str&quot;:&quot;5676102&quot;,&quot;default_profile&quot;:false,&quot;friends_count&quot;:2616,&quot;profile_text_color&quot;:&quot;696969&quot;,&quot;lang&quot;:&quot;en&quot;,&quot;profile_sidebar_fill_color&quot;:&quot;b8aa9c&quot;,&quot;followers_count&quot;:36994,&quot;protected&quot;:false,&quot;location&quot;:&quot;Portland, Oregon&quot;,&quot;follow_request_sent&quot;:false,&quot;profile_background_tile&quot;:true,&quot;favourites_count&quot;:2089,&quot;name&quot;:&quot;Scott Hanselman&quot;,&quot;url&quot;:&quot;http:\/\/hanselman.com&quot;,&quot;id&quot;:5676102,&quot;time_zone&quot;:&quot;Pacific Time (US &amp; Canada)&quot;,&quot;utc_offset&quot;:-28800,&quot;profile_link_color&quot;:&quot;72412c&quot;},&quot;id&quot;:68823826439487488}]</pre>

<p>I can run it by the <a href="http://jsbeautifier.org/">http://jsbeautifier.org</a> and it looks lovely...</p>

<pre class="brush: js; toolbar: false; auto-links: false;">[{<br />    &quot;in_reply_to_status_id&quot;: null,<br />    &quot;text&quot;: &quot;Testing for a blog post. Move along. This tweet never happened.&quot;,<br />    &quot;created_at&quot;: &quot;Thu May 12 23:44:13 +0000 2011&quot;,<br />    &quot;favorited&quot;: false,<br />    &quot;retweet_count&quot;: 0,<br />    &quot;source&quot;: &quot;web&quot;,<br />    &quot;in_reply_to_screen_name&quot;: null,<br />    &quot;in_reply_to_status_id_str&quot;: null,<br />    &quot;id_str&quot;: &quot;68823826439487488&quot;,<br />    &quot;contributors&quot;: null,<br />    &quot;retweeted&quot;: false,<br />    &quot;in_reply_to_user_id_str&quot;: null,<br />    &quot;place&quot;: null,<br />    &quot;coordinates&quot;: null,<br />    &quot;geo&quot;: null,<br />    &quot;in_reply_to_user_id&quot;: null,<br />    &quot;truncated&quot;: false,<br />    &quot;user&quot;: { ..... SNIP! .....<br />}<br />}]</pre>

<p>So, Twitter has a nice JSON API that is old and doesn't support Native Retweets but I want the most recent tweet, my way. </p>

<p>Bam. <a title="http://twitter.com/statuses/user_timeline/shanselman.json" href="http://twitter.com/statuses/user_timeline/shanselman.json?count=5">http://twitter.com/statuses/user_timeline/shanselman.json?count<strong>=5</strong></a><strong> </strong></p>

<p>Of course, if my last five tweets are all Native Retweets then it all falls part, but you get the idea.</p>

<p><img style="border-right-width: 0px; margin: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/abcb0d7af2d2_E70E/image_11.png" width="501" height="38" /> </p>

<p>If I was really serious, I could even remove @replies, only showing original tweets, remembering that this JSON API doesn't include Native Retweets in its results. </p>

<p>I found some code on <a href="http://www.barneyb.com/barneyblog/2010/01/15/improving-the-jsonp-twitter-widget/">BarneyB's blog that is a modification of Twitter's original code</a>. He mentions in the comments that he's removing replies in his code. I just took his code and stop the code as soon as a valid original non-replied tweet is found. In this case, I search the 5 tweets I requested that were returned from Twitter. If it turns out I reply a lot and get an empty payload, maybe I'll increase that number.</p>

<p>The conclusion here is that this code still &quot;works,&quot; it just doesn't see Native Retweets:</p>

<pre class="brush: xml; toolbar: false; auto-links: false;">&lt;div id=&quot;twitter_div&quot;&gt;<br /> &lt;a href=&quot;http://twitter.com/shanselman&quot; id=&quot;twitter-link&quot; &gt;Latest Tweet:  &lt;/a&gt;<br /> &lt;span id=&quot;twitter_update_list&quot;&gt;&lt;/span&gt;<br />&lt;/div&gt;</pre>

<p>Then later...</p>

<pre class="brush: xml; toolbar: false; auto-links: false;">&lt;script type=&quot;text/javascript&quot; src=&quot;http://twitter.com/javascripts/blogger.js&quot;&gt;&lt;/script&gt;<br />&lt;script type=&quot;text/javascript&quot; src=&quot;http://twitter.com/statuses/user_timeline/shanselman.json?callback=twitterCallback2&amp;count=1&quot;&gt;&lt;/script&gt;</pre>

<p>My issue was that I want a single tweet, specifically the first original, non-native-retweet, non-reply tweet. I solved it by taking BarneyB's @reply-filtering code and adding a check that breaks out of the loop. I ask Twitter for 5 tweets, but as soon as I find one from that lists of candidates, that's the one. Feel free to View Source if you like, or just be aware of the limitation of Twitter's (possibly deprecated) JSONP API.</p>

<p>It was a trivial but fun lunch hour, indeed.</p>

<p><strong><font color="#ff0000">UPDATE: </font></strong>Great comment below from <a href="http://www.encosia.com">Dave Ward</a>. He points out that I could have my cake and eat it too by using the new API and a &quot;include_rts&quot; flag like this:</p>

<p><a href="https://api.twitter.com/1/statuses/user_timeline.json?screen_name=shanselman&amp;include_rts=true&amp;count=10&amp;callback=twitterCallback2">https://api.twitter.com/1/statuses/user_timeline.json?screen_name=shanselman&amp;include_rts=true&amp;count=10&amp;callback=twitterCallback2</a> </p>

<p>Thanks Dave!</p><br/><hr/>© 2011 Scott Hanselman. All rights reserved. <br/></div>
<p><a href="http://feedads.g.doubleclick.net/~a/zkhCG2utXywGDZ-zxLT1i2Rf_rs/0/da"><img src="http://feedads.g.doubleclick.net/~a/zkhCG2utXywGDZ-zxLT1i2Rf_rs/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/zkhCG2utXywGDZ-zxLT1i2Rf_rs/1/da"><img src="http://feedads.g.doubleclick.net/~a/zkhCG2utXywGDZ-zxLT1i2Rf_rs/1/di" border="0" ismap="true"></img></a></p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=20ltBGHdCi4:cvTkO1ZCmDI:D7DqB2pKExk"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=20ltBGHdCi4:cvTkO1ZCmDI:D7DqB2pKExk" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=20ltBGHdCi4:cvTkO1ZCmDI:MjquXQBfoPI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=MjquXQBfoPI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=20ltBGHdCi4:cvTkO1ZCmDI:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=20ltBGHdCi4:cvTkO1ZCmDI:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=20ltBGHdCi4:cvTkO1ZCmDI:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=20ltBGHdCi4:cvTkO1ZCmDI:F7zBnMyn0Lo" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=20ltBGHdCi4:cvTkO1ZCmDI:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=20ltBGHdCi4:cvTkO1ZCmDI:5M_9TJJRyfI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=5M_9TJJRyfI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=20ltBGHdCi4:cvTkO1ZCmDI:YKYwmLGm_co"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=YKYwmLGm_co" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/ScottHanselman/~4/20ltBGHdCi4" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=c10847d5-decf-4c3a-890e-585c10525228";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:1:{i:0;a:5:{s:4:"data";s:10:"Javascript";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:141:"http://www.hanselman.com/blog/HowToAddTweetsToYourBlogAndDebuggingBasicJavaScriptWhyDidTwittercomJavaScriptBloggerJSONPWidgetStopWorking.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:8;a:6:{s:4:"data";s:117:"
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:7:{s:53:"http://madskills.com/public/xml/rss/module/trackback/";a:1:{s:4:"ping";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/Trackback.aspx?guid=f8cde9d3-8966-4a3c-bbc0-ee5d5dd66a9e";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:52:"http://madskills.com/public/xml/rss/module/pingback/";a:2:{s:6:"server";a:1:{i:0;a:5:{s:4:"data";s:43:"http://www.hanselman.com/blog/pingback.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"target";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=f8cde9d3-8966-4a3c-bbc0-ee5d5dd66a9e";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:15:"Scott Hanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:2:{s:7:"comment";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=f8cde9d3-8966-4a3c-bbc0-ee5d5dd66a9e";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:115:"http://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=f8cde9d3-8966-4a3c-bbc0-ee5d5dd66a9e";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:2:"20";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:86:"NuGet Package of the Week #6 - Dynamic, Malleable, Enjoyable Expando Objects with Clay";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=f8cde9d3-8966-4a3c-bbc0-ee5d5dd66a9e";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:135:"http://feedproxy.google.com/~r/ScottHanselman/~3/P78YaqfPuQI/NuGetPackageOfTheWeek6DynamicMalleableEnjoyableExpandoObjectsWithClay.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Fri, 06 May 2011 23:41:35 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:12288:"<div><p><em>Hey, have you implemented the </em><a href="http://www.hanselman.com/blog/NuGetActionPlanUpgradeTo11SetupAutomaticUpdatesGetNuGetPackageExplorer.aspx"><em><b>NuGet Action Plan</b></em></a><em>? Get on it, it'll take only 5 minutes: </em><a href="http://www.hanselman.com/blog/NuGetActionPlanUpgradeTo11SetupAutomaticUpdatesGetNuGetPackageExplorer.aspx"><em><b>NuGet Action Plan - Upgrade to 1.2, Setup Automatic Updates, Get NuGet Package Explorer</b></em></a><em>. <strong>NuGet 1.3 </strong>is out, so make sure you're set to automatically update!</em></p>  <p><strong>The Backstory: </strong>I was thinking since the <a href="http://www.nuget.org/">NuGet .NET package management site</a> is <a href="http://stats.nuget.org/">starting to fill up</a> that I should start looking for gems (no pun intended) in there. You know, really useful stuff that folks might otherwise not find. I'll look for mostly open source projects, ones I think are really useful. I'll look at how they built their NuGet packages, if there's anything interesting about the way the designed the out of the box experience (and anything they could do to make it better) as well as what the package itself does.</p>  <p>This weeks Package of the Week is &quot;Clay.&quot; It makes working with dynamic objects even more fun. It was written for the open source Orchard Project by Louis DeJardin with an assist from Bertrand LeRoy.</p>  <p><a href="http://nuget.org/List/Packages/Clay"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/NuGet-Package-of-the-Week-6---Dynamic-Ma_DC5B/image_3.png" width="376" height="91" /></a></p>  <h3>Enjoyable Dynamics in a Static Language</h3>  <p>Here's a little copy/paste from a post two years ago I did on the dynamic keyword in C#. I thought it was good, so I'll include it again here.</p>  <p>So I asked this guy, what's up with the <strong>dynamic</strong> keyword, and what type was it exactly? I mean, C# isn't dynamic, right? He says:</p>  <blockquote>   <p><em>&quot;Oh, well it's statically-typed as a dynamic type.&quot;</em></p> </blockquote>  <p>Then my brain exploded and began to leak out my ears. Honestly, though, it took a second. Here's a good example from some of Anders' slides:</p>  <pre class="c#" name="code">Calculator calc = GetCalculator();<br />int sum = calc.Add(10, 20);</pre>

<p>That's the creation of an object, invokation of a method, and the collection of a return value. This is the exact same code, as the &quot;var&quot; type is figured out at compile time.</p>

<pre class="c#" name="code">var calc = GetCalculator();<br />int sum = calc.Add(10, 20);</pre>

<p>If you wanted to do the exact same thing, except with Reflection (like if it were some other class, maybe old-COM interop, or something where the compiler didn't know a priori that Add() was available, etc) you'd do this:</p>

<pre class="c#" name="code">object calc = GetCalculator();<br />Type calcType = calc.GetType();<br />object res = calcType.InvokeMember(&quot;Add&quot;,<br />    BindingFlags.InvokeMethod, null,<br />    new object[] { 10, 20 });<br />int sum = Convert.ToInt32(res);</pre>

<p>It's pretty horrible to look at, of course. If the object is some dynamic thing (from any number of sources), we can do this:</p>

<pre class="c#" name="code">dynamic calc = GetCalculator();<br />int sum = calc.Add(10, 20);</pre>

<p>And get the dynamic method invocation and conversion of the return type. Basically it looks just like we're calling any other object.</p>

<p>My buddy Rob Conery and I love dynamic languages, but we also love the .NET CLR. If we had our way, there'd be a lot more support for the Dynamic Language Runtime and the Iron.NET languages. We wrote the <a href="http://thisdeveloperslife.com">http://thisdeveloperslife.com</a> website using ASP.NET Web Pages largely because it uses the Razor template engine - which feels very dynamic - and we used dynamics throughout the code. </p>

<p>Some folks think that static languages have no business dipping their toes into the dynamic pool, but I disagree. Successful compilation is just the first unit test, as they say, and I like the ability to pick and choose between static and dyanamic.</p>

<h3>Expandos and Dynamic</h3>

<p>In .NET, the Expando object is a dynamic type that lets you add and remove members to it, ahem, dynamically. It's great for dealing with dynamic data. You might do this:</p>

<pre class="c#" name="code">dynamic myObject = new ExpandoObject();<br />myObject.WhateverMakesMeHappy = &quot;Scott&quot;;</pre>

<p>And boom, I've got a new property. You can even &quot;cast&quot; Expandos as other types and start using them like that type. It's crazy. Play with it.</p>

<p>Anonymous objects via object initalizers are nice, but once you've made one, it's stuck that way. For example, from Bertrand Le Roy's blog</p>

<pre class="brush: csharp; toolbar: false; auto-links: false;">Html.TextBoxFor(m =&gt; m.CurrentUser, new {<br />  title = &quot;User Name&quot;,<br />  style = &quot;float:left;&quot;<br />})</pre>

<p>See the object intializer? It makes an anonymous object, but it'll have that shape with title and style, forever.</p>

<h3>Why is Clay needed?</h3>

<p>In Bertrand's words:</p>

<blockquote>
  <p><em>In terms of API usability [ExpandoObject is] not very daring and in particular it does not do much to help you build deep dynamic object graphs. Its behavior is also fixed and can’t be extended.</em></p>

  <p><em><strong>Clay on the other hand is highly extensible and focuses on creation and consumption of deep graphs.</strong></em></p>
</blockquote>

<p>Clay has a clever naming convention (although you may hate it. Relax, it's a convention) where you name the ClayFactory instance &quot;New.&quot; Yes, capital-N &quot;New.&quot; *brain explodes again*</p>

<p>You can do the usual stuff with Clay that you can also do with Expando, of course. But, you can use several different techniques depending on the situation you're in, and that's where it gets interesting. Here's some examples from Bertrand and Lou, starting with the ClayFactory creation:</p>

<pre class="c#" name="code">dynamic New = new ClayFactory();</pre>

<p>Now this “New” object will help us create new Clay objects, as the name implies (although this name is just a convention). Then:</p>

<pre class="c#" name="code">var person = New.Person();
person.FirstName = &quot;Louis&quot;;<br />person.LastName = &quot;Dejardin&quot;;</pre>

<p><em><strong>For instance in Clay, indexer syntax and property accessors are equivalent, just as they are in JavaScript.</strong> This is very useful when you are writing code that accesses a property by name without knowing that name at compile-time:</em></p>

<pre class="c#" name="code">var person = New.Person();<br />person[&quot;FirstName&quot;] = &quot;Louis&quot;;<br />person[&quot;LastName&quot;] = &quot;Dejardin&quot;;</pre>

<p>You can also use properties as chainable setters, jQuery-style:</p>

<pre class="c#" name="code">var person = New.Person()
    .FirstName(&quot;Louis&quot;)
    .LastName(&quot;Dejardin&quot;);</pre>

<p>Or you can pass an anonymous object and it will become a Clay object:</p>

<pre class="c#" name="code">var person = New.Person(new {
    FirstName = &quot;Louis&quot;,
    LastName = &quot;Dejardin&quot;
});</pre>

<p>Even better, Clay also understands named arguments, which enables us to write this:</p>

<pre class="c#" name="code">var person = New.Person(
    FirstName: &quot;Louis&quot;,
    LastName: &quot;Dejardin&quot;
);</pre>

<p>Or even this as an array:</p>

<pre class="brush: csharp; toolbar: false; auto-links: false;">var people = New.Array(<br />    New.Person().FirstName(&quot;Louis&quot;).LastName(&quot;Dejardin&quot;),<br />    New.Person().FirstName(&quot;Bertrand&quot;).LastName(&quot;Le Roy&quot;)<br />);</pre>

<p>All of this also means that these are all equivalent:</p>

<pre class="brush: csharp; toolbar: false; auto-links: false;">person.FirstName<br />person[&quot;FirstName&quot;]<br />person.FirstName()</pre>

<p>To get started, rather than using NuGet to &quot;install-package Clay,&quot; I'd recommend you install Clay.Sample. This is a common convention for open source projects to include sample packages that have a dependency on the project itself. Install the sample and you'll get both packages.</p>

<p>Here's some other cool samples that really give you an idea of how you can move like clay between the dynamic and static worlds:</p>

<pre class="brush: csharp; toolbar: false; auto-links: false;">public interface IPerson {<br />    string FirstName { get; set; }<br />    string LastName { get; set; }<br />}<br /><br />public static void CastToCLRInterface() {<br />    dynamic New = new ClayFactory();<br /><br />    var person = New.Person();<br />    person.FirstName = &quot;Louis&quot;;<br />    person.LastName = &quot;Dejardin&quot;;<br /><br />    // Concrete interface implementation gets magically created!<br />    IPerson lou = person;<br /><br />    // You get intellisense and compile time check here<br />    Console.WriteLine(&quot;{0} {1}&quot;, lou.FirstName, lou.LastName);<br />}</pre>

<p>I'd like the see folks in power *cough* Anders *cough* check out things like Clay and make them built in. Yum.</p>

<h3>Related Links</h3>

<ul>
  <li><a href="http://www.hanselman.com/blog/C4AndTheDynamicKeywordWhirlwindTourAroundNET4AndVisualStudio2010Beta1.aspx">C# 4 and the dynamic keyword - Whirlwind Tour around .NET 4 (and Visual Studio 2010) Beta 1</a> </li>

  <li><a href="http://www.hanselman.com/blog/CLRAndDLRAndBCLOhMyWhirlwindTourAroundNET4AndVisualStudio2010Beta1.aspx">Improvements in C# around dynamism and PIAs as well as the COM Binder</a> </li>

  <li><a href="http://www.hanselman.com/blog/BackToBasicsC4MethodOverloadingAndDynamicTypes.aspx">Back to Basics: C# 4 method overloading and dynamic types</a> </li>

  <li><a href="http://weblogs.asp.net/bleroy/archive/tags/Clay/default.aspx">Bertrand Le Roy on &quot;Clay&quot;</a> </li>
</ul><br/><hr/>© 2011 Scott Hanselman. All rights reserved. <br/></div>
<p><a href="http://feedads.g.doubleclick.net/~a/JFRynzt8iEsm16vVztWemKdZQU4/0/da"><img src="http://feedads.g.doubleclick.net/~a/JFRynzt8iEsm16vVztWemKdZQU4/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/JFRynzt8iEsm16vVztWemKdZQU4/1/da"><img src="http://feedads.g.doubleclick.net/~a/JFRynzt8iEsm16vVztWemKdZQU4/1/di" border="0" ismap="true"></img></a></p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=P78YaqfPuQI:opuwXPtICm0:D7DqB2pKExk"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=P78YaqfPuQI:opuwXPtICm0:D7DqB2pKExk" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=P78YaqfPuQI:opuwXPtICm0:MjquXQBfoPI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=MjquXQBfoPI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=P78YaqfPuQI:opuwXPtICm0:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=P78YaqfPuQI:opuwXPtICm0:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=P78YaqfPuQI:opuwXPtICm0:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=P78YaqfPuQI:opuwXPtICm0:F7zBnMyn0Lo" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=P78YaqfPuQI:opuwXPtICm0:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=P78YaqfPuQI:opuwXPtICm0:5M_9TJJRyfI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=5M_9TJJRyfI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=P78YaqfPuQI:opuwXPtICm0:YKYwmLGm_co"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=YKYwmLGm_co" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/ScottHanselman/~4/P78YaqfPuQI" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=f8cde9d3-8966-4a3c-bbc0-ee5d5dd66a9e";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:3:{i:0;a:5:{s:4:"data";s:13:"Learning .NET";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:5:"NuGet";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:8:"NuGetPOW";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:104:"http://www.hanselman.com/blog/NuGetPackageOfTheWeek6DynamicMalleableEnjoyableExpandoObjectsWithClay.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:9;a:6:{s:4:"data";s:110:"
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:7:{s:53:"http://madskills.com/public/xml/rss/module/trackback/";a:1:{s:4:"ping";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/Trackback.aspx?guid=7db553b6-37d0-4255-9950-1f1b6e3918ab";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:52:"http://madskills.com/public/xml/rss/module/pingback/";a:2:{s:6:"server";a:1:{i:0;a:5:{s:4:"data";s:43:"http://www.hanselman.com/blog/pingback.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"target";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=7db553b6-37d0-4255-9950-1f1b6e3918ab";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:15:"Scott Hanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:2:{s:7:"comment";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=7db553b6-37d0-4255-9950-1f1b6e3918ab";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:115:"http://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=7db553b6-37d0-4255-9950-1f1b6e3918ab";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:2:"12";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:103:"Hanselminutes Podcast 265 - Synology Network Attached Storage and Windows Home Server with Travis Illig";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=7db553b6-37d0-4255-9950-1f1b6e3918ab";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:154:"http://feedproxy.google.com/~r/ScottHanselman/~3/kGjwpSiHXAM/HanselminutesPodcast265SynologyNetworkAttachedStorageAndWindowsHomeServerWithTravisIllig.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Fri, 06 May 2011 22:30:37 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:8046:"<div><p><a href="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Hanselminutes-Podcast-264---This-is-not-_D95B/Synology%20DiskStation%20-%20SERVER%20-%20Windows%20Internet%20Explorer%20(31)_2.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px 0px 4px 5px; padding-left: 0px; padding-right: 0px; display: inline; float: right; border-top: 0px; border-right: 0px; padding-top: 0px" title="Synology DiskStation - SERVER - Windows Internet Explorer (31)" border="0" alt="Synology DiskStation - SERVER - Windows Internet Explorer (31)" align="right" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Hanselminutes-Podcast-264---This-is-not-_D95B/Synology%20DiskStation%20-%20SERVER%20-%20Windows%20Internet%20Explorer%20(31)_thumb.png" width="410" height="389" /></a>I chat with fellow home storage enthusiast Travis Illig about NAS options (Network Attached Storage) available today. Both Travis and I purchased (and told our friends about) Windows Home Servers. Where are our Home Servers now, and what are they using going forward?</p>  <p>We talk about my recent purchase of a <a href="http://amzn.to/izz6H2">Synology DS1511 Home Storage System</a> and what we're doing with our Home Servers now. We also talk about the recent removal of the Drive Extender technology from WHS and our feelings on the issue.</p>  <h3><strong>Download: </strong><a href="http://s3.amazonaws.com/hanselminutes/hanselminutes_0265.mp3">MP3 Full Show</a></h3>  <h4><strong>Links from the Show</strong></h4>  <ul>   <li><a href="http://amzn.to/izz6H2">Synology Products on Amazon</a></li>    <li><a href="http://www.hanselman.com/blog/CategoryView.aspx?category=Home+Server">The Home Server Category on Scott's Blog</a></li>    <li><a href="http://www.paraesthesia.com/archive/2010/05/20/moving-to-a-synology-ds1010.aspx">Travis's Experience on a Synology DS1010</a></li>    <li><a href="http://www.hanselman.com/blog/ReviewHPMediaSmartWindowsHomeServer.aspx">Scott's 2007 Review of a Windows Home Server</a></li> </ul>  <p><strong>NOTE: If you want to download our complete archives as a feed - that's all 265 shows, </strong><a href="http://feeds.feedburner.com/HanselminutesCompleteMP3"><strong>subscribe to the Complete MP3 Feed here</strong></a><strong>.</strong></p>  <p><strong>Also, please do take a moment and </strong><a href="http://phobos.apple.com/WebObjects/MZStore.woa/wa/viewPodcast?id=117488860"><strong>review the show on iTunes</strong></a><strong>.</strong></p>  <h5><strong>Subscribe: </strong><a href="http://feeds.feedburner.com/Hanselminutes"><img border="0" alt="Subscribe to Hanselminutes" src="http://www.hanselman.com/blog/content/binary/feed_2Dicon_2D16x16.png" /></a> or <a href="http://phobos.apple.com/WebObjects/MZStore.woa/wa/viewPodcast?id=117488860"><img border="0" alt="Subscribe to my Podcast in iTunes" src="http://www.hanselman.com/blog/themes/zenGarden2/itunes_subscribe.gif" /></a> or <a href="zune://subscribe/?Hanselminutes=http://feeds.feedburner.com/hanselminutes"><strong>Zune</strong></a></h5>  <p>Do also <a href="http://www.hanselminutes.com/archives.aspx">remember the complete archives</a> are always up and they have <strong><em>PDF Transcripts</em></strong>, a little known feature that show up a few weeks after each show.</p>  <p><a href="http://www.telerik.com/products/aspnet/overview.aspx?gad=CPLKy9kDEghsdEbLXRZ0NBiF1bL_AyCCkdsU"><strong>Telerik</strong></a> is our sponsor for this show.</p>  <p><a href="http://www.telerik.com/products/aspnet/overview.aspx?gad=CPLKy9kDEghsdEbLXRZ0NBiF1bL_AyCCkdsU"><strong><img border="0" align="left" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/HanselminutesPodcast51StaticCodeAnalysis_140AB/telerikLogo%5B1%5D%5B8%5D.gif" width="216" height="74" /></strong></a><strong>Building quality software is never easy. It requires skills and imagination. We cannot promise to improve your skills, but when it comes to User Interface and developer tools, we can provide the building blocks to take your application a step closer to your imagination. Explore the leading UI suites for </strong><a href="http://asp.net/"><strong>ASP.NET</strong></a><strong>AJAX,</strong><a href="http://www.telerik.com/products/aspnet-mvc.aspx"><strong>MVC</strong></a><strong>,</strong><a href="http://www.telerik.com/products/silverlight.aspx"><strong>Silverlight</strong></a><strong>, </strong><a href="http://www.telerik.com/products/winforms.aspx"><strong>Windows Forms</strong></a><strong> and </strong><a href="http://www.telerik.com/products/wpf.aspx"><strong>WPF</strong></a><strong>. Enjoy developer tools like </strong><a href="http://www.telerik.com/products/reporting.aspx"><strong>.NET Reporting</strong></a><strong>,</strong><a href="http://www.telerik.com/products/orm.aspx"><strong>ORM</strong></a><strong>,</strong><a href="http://www.telerik.com/automated-testing-tools.aspx"><strong>Automated Testing Tools</strong></a><strong>, </strong><a href="http://www.telerik.com/team-productivity-tools/teampulse.aspx"><strong>Agile Project Management Tools</strong></a><strong>, and </strong><a href="http://www.sitefinity.com/"><strong>Content Management Solution</strong></a><strong>. And now you can increase your productivity with </strong><a href="http://www.telerik.com/products/justcode.aspx"><strong>JustCode</strong></a><strong>, Telerik’s new productivity tool for code analysis and refactoring. Visit</strong><a href="http://www.telerik.com/"><strong>www.telerik.com</strong></a><strong>.</strong></p>  <p><strong><em></em></strong>As I've said before this show comes to you with the audio expertise and stewardship of <a href="http://weblogs.asp.net/cfranklin/archive/2006/01/11/435036.aspx">Carl Franklin</a>. The name comes from <a href="http://www.paraesthesia.com/blog/comments.php?id=776_0_1_0_C">Travis Illig</a>, but the goal of the show is simple. Avoid wasting the listener's time. (and make the commute less boring)</p>  <p>Enjoy. Who knows what'll happen in the next show?</p><br/><hr/>© 2011 Scott Hanselman. All rights reserved. <br/></div>
<p><a href="http://feedads.g.doubleclick.net/~a/K3JlzGLMHPRPeRcwyDHqIideS0M/0/da"><img src="http://feedads.g.doubleclick.net/~a/K3JlzGLMHPRPeRcwyDHqIideS0M/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/K3JlzGLMHPRPeRcwyDHqIideS0M/1/da"><img src="http://feedads.g.doubleclick.net/~a/K3JlzGLMHPRPeRcwyDHqIideS0M/1/di" border="0" ismap="true"></img></a></p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=kGjwpSiHXAM:46rR2MSSjtA:D7DqB2pKExk"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=kGjwpSiHXAM:46rR2MSSjtA:D7DqB2pKExk" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=kGjwpSiHXAM:46rR2MSSjtA:MjquXQBfoPI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=MjquXQBfoPI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=kGjwpSiHXAM:46rR2MSSjtA:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=kGjwpSiHXAM:46rR2MSSjtA:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=kGjwpSiHXAM:46rR2MSSjtA:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=kGjwpSiHXAM:46rR2MSSjtA:F7zBnMyn0Lo" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=kGjwpSiHXAM:46rR2MSSjtA:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=kGjwpSiHXAM:46rR2MSSjtA:5M_9TJJRyfI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=5M_9TJJRyfI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=kGjwpSiHXAM:46rR2MSSjtA:YKYwmLGm_co"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=YKYwmLGm_co" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/ScottHanselman/~4/kGjwpSiHXAM" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=7db553b6-37d0-4255-9950-1f1b6e3918ab";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:2:{i:0;a:5:{s:4:"data";s:11:"Home Server";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:7:"Podcast";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:123:"http://www.hanselman.com/blog/HanselminutesPodcast265SynologyNetworkAttachedStorageAndWindowsHomeServerWithTravisIllig.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:10;a:6:{s:4:"data";s:124:"
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:7:{s:53:"http://madskills.com/public/xml/rss/module/trackback/";a:1:{s:4:"ping";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/Trackback.aspx?guid=7c2e341c-169d-4ec6-8ebb-32f5af16d8c9";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:52:"http://madskills.com/public/xml/rss/module/pingback/";a:2:{s:6:"server";a:1:{i:0;a:5:{s:4:"data";s:43:"http://www.hanselman.com/blog/pingback.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"target";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=7c2e341c-169d-4ec6-8ebb-32f5af16d8c9";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:15:"Scott Hanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:2:{s:7:"comment";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=7c2e341c-169d-4ec6-8ebb-32f5af16d8c9";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:115:"http://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=7c2e341c-169d-4ec6-8ebb-32f5af16d8c9";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:2:"22";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:40:"Developer Stand up Comedy - Coding 4 Fun";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=7c2e341c-169d-4ec6-8ebb-32f5af16d8c9";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:98:"http://feedproxy.google.com/~r/ScottHanselman/~3/_uL6SFnEmzc/DeveloperStandUpComedyCoding4Fun.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Thu, 05 May 2011 20:15:18 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:5228:"<div><p><a href="http://channel9.msdn.com/Events/DevDays/DevDays-2011-Netherlands/Devdays054"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px 0px 5px 5px; padding-left: 0px; padding-right: 0px; display: inline; float: right; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" align="right" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Developer-S_B7ED/image_3.png" width="505" height="273" /></a>There aren't enough funny developer talks in my opinion. Lots of you folks are so funny in person and when I got to conferences or just have lunch we laugh and laugh. As with all niches or cliques, we're all part of a little club of inside jokes and shared stories. </p>  <p>It's always weird to get lots of comments on my technical talks. Many are positive, but sometimes I'll get one like "your not funy!" or "stop joking and start coding." Well, I realize my brand of edutainment isn't for everyone. </p>  <p>That said, this talk is happily content-free. If you hate my jokes, you may ignore it. ;)</p>  <p>Many years ago I did some local open mics and stand up, although I've never really put together a tight hour of material. I'm less of a stand up and more of a storyteller. Anyway, I got signed up for a talk in Holland last week called "Coding 4 Fun" but didn't prepare anything. I was already signed up for 6 other talks and had already presented 3 times by the time I showed up on stage at the 7pm "geek night" session.</p>  <p>There were a bunch of people there almost an hour early so I just sat on the end of the stage and we chatted. It was great fun. Next thing we knew, the guy was recording the video and the room was filling up.</p>  <p>So, I talked and told stories and chatted my co-workers and friends on IM for a while, the showed some community built NuGet packages. The only think I wish is that you could see the audience in this video. They were fun and engaged and silly. </p>  <p>Big thanks to Glenn Block and Clemens Vasters for sitting in the front row and playing along, and to Damian Edwards, Tim Heuer and Phil Haack for being silly over IM.</p>  <p>A lot of the jokes are in the IM or the code, so if you can't see them (even though I zoom in) with smooth streaming, download a higher res version so you can see them.</p>  <h3><a href="http://channel9.msdn.com/Events/DevDays/DevDays-2011-Netherlands/Devdays054"><strong>Coding for Fun with Scott Hanselman recorded in Holland in April of 2011</strong></a></h3>  <ul>   <li><a href="http://media.ch9.ms/ch9/1ea0/ef05d6a9-86a1-43bd-af65-9ed200a41ea0/devdays054_2MB_ch9.wmv">High Quality WMV</a> (PC, XBox, MCE)</li>    <li><a href="http://media.ch9.ms/ch9/1ea0/ef05d6a9-86a1-43bd-af65-9ed200a41ea0/devdays054_ch9.wmv">Medium Quality WMV</a> (Lo-band, Mobile)</li>    <li><a href="http://media.ch9.ms/ch9/1ea0/ef05d6a9-86a1-43bd-af65-9ed200a41ea0/devdays054_high_ch9.mp4">High Quality MP4</a> (iPad, WP7)</li>    <li><a href="http://media.ch9.ms/ch9/1ea0/ef05d6a9-86a1-43bd-af65-9ed200a41ea0/devdays054_low_ch9.mp4">MP4</a> (iPod, Zune HD)</li> </ul>  <p>I hope you enjoy. Maybe one day I <em>will </em>put together a real act of "stand up for developers."</p><br/><hr/>© 2011 Scott Hanselman. All rights reserved. <br/></div>
<p><a href="http://feedads.g.doubleclick.net/~a/RtuB_cWk3Rcw7lQxvj76yp_usJk/0/da"><img src="http://feedads.g.doubleclick.net/~a/RtuB_cWk3Rcw7lQxvj76yp_usJk/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/RtuB_cWk3Rcw7lQxvj76yp_usJk/1/da"><img src="http://feedads.g.doubleclick.net/~a/RtuB_cWk3Rcw7lQxvj76yp_usJk/1/di" border="0" ismap="true"></img></a></p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=_uL6SFnEmzc:qFPiw05G5B4:D7DqB2pKExk"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=_uL6SFnEmzc:qFPiw05G5B4:D7DqB2pKExk" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=_uL6SFnEmzc:qFPiw05G5B4:MjquXQBfoPI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=MjquXQBfoPI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=_uL6SFnEmzc:qFPiw05G5B4:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=_uL6SFnEmzc:qFPiw05G5B4:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=_uL6SFnEmzc:qFPiw05G5B4:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=_uL6SFnEmzc:qFPiw05G5B4:F7zBnMyn0Lo" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=_uL6SFnEmzc:qFPiw05G5B4:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=_uL6SFnEmzc:qFPiw05G5B4:5M_9TJJRyfI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=5M_9TJJRyfI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=_uL6SFnEmzc:qFPiw05G5B4:YKYwmLGm_co"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=YKYwmLGm_co" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/ScottHanselman/~4/_uL6SFnEmzc" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=7c2e341c-169d-4ec6-8ebb-32f5af16d8c9";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:4:{i:0;a:5:{s:4:"data";s:7:"ASP.NET";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:10:"Coding4Fun";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:7:"Musings";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:3;a:5:{s:4:"data";s:8:"Speaking";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:67:"http://www.hanselman.com/blog/DeveloperStandUpComedyCoding4Fun.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:27:"http://www.w3.org/2005/Atom";a:1:{s:4:"link";a:2:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:19:"application/rss+xml";s:4:"href";s:42:"http://feeds.feedburner.com/ScottHanselman";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:3:"rel";s:3:"hub";s:4:"href";s:32:"http://pubsubhubbub.appspot.com/";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:4:{s:4:"info";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:1:{s:3:"uri";s:14:"scotthanselman";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:14:"emailServiceId";a:1:{i:0;a:5:{s:4:"data";s:14:"ScottHanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:18:"feedburnerHostname";a:1:{i:0;a:5:{s:4:"data";s:28:"http://feedburner.google.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:15:"browserFriendly";a:1:{i:0;a:5:{s:4:"data";s:138:"This is an XML content feed. It is intended to be viewed in a newsreader or syndicated to another site, subject to copyright and fair use.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:52:"http://backend.userland.com/creativeCommonsRssModule";a:1:{s:7:"license";a:1:{i:0;a:5:{s:4:"data";s:49:"http://creativecommons.org/licenses/by-nc-sa/2.0/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}}}}}}s:4:"type";i:128;s:7:"headers";a:10:{s:12:"content-type";s:23:"text/xml; charset=UTF-8";s:4:"etag";s:27:"58BNQI/YJGY0f34Bw/ftKrvqfko";s:13:"last-modified";s:29:"Thu, 02 Jun 2011 18:30:11 GMT";s:4:"date";s:29:"Thu, 02 Jun 2011 19:12:15 GMT";s:7:"expires";s:29:"Thu, 02 Jun 2011 19:12:15 GMT";s:13:"cache-control";s:18:"private, max-age=0";s:22:"x-content-type-options";s:7:"nosniff";s:16:"x-xss-protection";s:13:"1; mode=block";s:6:"server";s:3:"GSE";s:17:"transfer-encoding";s:7:"chunked";}s:5:"build";s:14:"20090627192103";}