a:4:{s:5:"child";a:1:{s:0:"";a:1:{s:3:"rss";a:1:{i:0;a:6:{s:4:"data";s:4:"
  
";s:7:"attribs";a:1:{s:0:"";a:1:{s:7:"version";s:3:"2.0";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:1:{s:7:"channel";a:1:{i:0;a:6:{s:4:"data";s:98:"
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:4:{s:0:"";a:10:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:15:"Scott Hanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:30:"http://www.hanselman.com/blog/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:75:"Scott Hanselman's Thoughts on Programming, Technology, Fatherhood, and Life";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"image";a:1:{i:0;a:6:{s:4:"data";s:26:"
      
      
      
    ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:3:{s:3:"url";a:1:{i:0;a:5:{s:4:"data";s:48:"http://www.hanselman.com/blog/images/zenicon.jpg";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:15:"Scott Hanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:30:"http://www.hanselman.com/blog/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}s:9:"copyright";a:1:{i:0;a:5:{s:4:"data";s:5:"admin";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:13:"lastBuildDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Mon, 21 Jun 2010 23:31:03 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"generator";a:1:{i:0;a:5:{s:4:"data";s:34:"newtelligence dasBlog 2.1.7238.742";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:14:"managingEditor";a:1:{i:0;a:5:{s:4:"data";s:19:"scott@hanselman.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"webMaster";a:1:{i:0;a:5:{s:4:"data";s:19:"scott@hanselman.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"item";a:10:{i:0;a:6:{s:4:"data";s:110:"
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:7:{s:53:"http://madskills.com/public/xml/rss/module/trackback/";a:1:{s:4:"ping";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/Trackback.aspx?guid=84dc3649-b4b8-4273-95f3-62f42f145b0b";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:52:"http://madskills.com/public/xml/rss/module/pingback/";a:2:{s:6:"server";a:1:{i:0;a:5:{s:4:"data";s:43:"http://www.hanselman.com/blog/pingback.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"target";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=84dc3649-b4b8-4273-95f3-62f42f145b0b";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:15:"Scott Hanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:2:{s:7:"comment";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=84dc3649-b4b8-4273-95f3-62f42f145b0b";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:115:"http://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=84dc3649-b4b8-4273-95f3-62f42f145b0b";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:2:"11";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:76:"Found Video: Social Networking for Developers and Making Your Blog Suck Less";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=84dc3649-b4b8-4273-95f3-62f42f145b0b";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:130:"http://feedproxy.google.com/~r/ScottHanselman/~3/r8ane7H94Jc/FoundVideoSocialNetworkingForDevelopersAndMakingYourBlogSuckLess.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Mon, 21 Jun 2010 23:31:03 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:6156:"<div><p>I was putting together a list of resources for a friend on how to start in programming, and the importance of Social Networking and having an online presence for Developers. I did a talk a while back and there <a href="http://www.hanselman.com/blog/SocialNetworkingForDevelopersConferenceTalkVideo.aspx">was really bad guerilla video taken</a>. However, in my searching I discovered video of <strong>me </strong>(scandalous!)<strong> </strong>at a Microsoft website called <a href="http://www.msdnevents.com/thrivedev/">Thrive</a>. I had completely forgotten that this talk was recorded. Of course, as it's older, it may be dated in some ways. </p>  <p>The video player on that site is too small, so I've embedded it here and made it big. Also, I've viewed-source and here's links to downloadable video files of both. This video was taken at <a href="http://www.devscovery.com">Devscovery</a> last year, as I recall and the audience was hardcore developers.</p>  <h3>Part 1: How to be a better developer through social media</h3>  <p>Download &quot;<a href="http://www.msdnevents.com/thrivedev/videos/AMR0179_V2_part1_Academy_Mobile_4_3.wmv">How to be a better developer through social media</a>&quot; media directly here (right click | save as)</p> <object data="data:application/x-silverlight-2," type="application/x-silverlight-2" width="480" height="400">                    <param name="source" value="http://www.msdnevents.com/ClientBin/SSMP.xap" />                    <param name="onError" value="onSilverlightError" />                    <param name="background" value="white" />                    <param name="minRuntimeVersion" value="3.0.40624.0" />                    <param name="autoUpgrade" value="true" />                    <param name="windowless" value="true" />                    <param name="enableGPUAcceleration" value="true" /> 		  <param name="enableHtmlAccess" value="true" />                    <param name="initParams" value="mediaSource=http://www.msdnevents.com/thrivedev/videos/AMR0179_V2_part1_Academy_Mobile_4_3.wmv,title=Thrive - Connect with Your Community,thumbSource=http://msdnevents.com.staging0.smoothfusion.com/thrivedev/images/sh_video_part1.jpg,autoPlay=false,autoLoad=false" />                    <a href="http://go.microsoft.com/fwlink/?LinkID=149156&amp;v=3.0.40624.0" style="text-decoration:none">  	                  <img src="http://go.microsoft.com/fwlink/?LinkId=108181" alt="Get Microsoft Silverlight" style="border-style:none" />                    </a>                    </object>  <h3>Part 2: How to <a href="http://www.hanselman.com/blog/BlogInteresting32WaysToKeepYourBlogFromSucking.aspx">make your blog suck less</a></h3>  <p>Download &quot;<a href="http://www.msdnevents.com/thrivedev/videos/AMR0179_V2_part2_Academy_Mobile_4_3.wmv">How to make your blog suck less</a>&quot; media directly here (right click | save as)</p> <object data="data:application/x-silverlight-2," type="application/x-silverlight-2" width="480" height="400">  	              <param name="source" value="http://www.msdnevents.com/ClientBin/SSMP.xap" />  	              <param name="onError" value="onSilverlightError" />  	              <param name="background" value="white" />  	              <param name="minRuntimeVersion" value="3.0.40624.0" />  	              <param name="autoUpgrade" value="true" />  	              <param name="windowless" value="true" />  			 <param name="enableHtmlAccess" value="true" /> 	              <param name="enableGPUAcceleration" value="true" />  	              <param name="initParams" value="mediaSource=http://www.msdnevents.com/thrivedev/videos/AMR0179_V2_part2_Academy_Mobile_4_3.wmv,title=Thrive - Connect with Your Community,thumbSource=http://msdnevents.com.staging0.smoothfusion.com/thrivedev/images/sh_video_part2.jpg,autoPlay=false,autoLoad=false" />  	              <a href="http://go.microsoft.com/fwlink/?LinkID=149156&amp;v=3.0.40624.0" style="text-decoration:none">  		              <img src="http://go.microsoft.com/fwlink/?LinkId=108181" alt="Get Microsoft Silverlight" style="border-style:none" />  	              </a>                  </object>  <p>There's newer slides at <a href="http://hnsl.mn/bwbslides">http://hnsl.mn/bwbslides</a> and I'm considering updating the whole deck and writing an e-book, so watch for that.</p>  <p>Hope these are useful!</p><br/><hr/>Â© 2010 Scott Hanselman. All rights reserved. <br/></div>
<p><a href="http://feedads.g.doubleclick.net/~a/Zo1cfLwIu1-5yDtenyiT1eBHwJE/0/da"><img src="http://feedads.g.doubleclick.net/~a/Zo1cfLwIu1-5yDtenyiT1eBHwJE/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/Zo1cfLwIu1-5yDtenyiT1eBHwJE/1/da"><img src="http://feedads.g.doubleclick.net/~a/Zo1cfLwIu1-5yDtenyiT1eBHwJE/1/di" border="0" ismap="true"></img></a></p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=r8ane7H94Jc:KnBJluqdIMY:D7DqB2pKExk"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=r8ane7H94Jc:KnBJluqdIMY:D7DqB2pKExk" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=r8ane7H94Jc:KnBJluqdIMY:MjquXQBfoPI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=MjquXQBfoPI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=r8ane7H94Jc:KnBJluqdIMY:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=r8ane7H94Jc:KnBJluqdIMY:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=r8ane7H94Jc:KnBJluqdIMY:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=r8ane7H94Jc:KnBJluqdIMY:F7zBnMyn0Lo" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=r8ane7H94Jc:KnBJluqdIMY:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=r8ane7H94Jc:KnBJluqdIMY:5M_9TJJRyfI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=5M_9TJJRyfI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/ScottHanselman/~4/r8ane7H94Jc" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=84dc3649-b4b8-4273-95f3-62f42f145b0b";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:2:{i:0;a:5:{s:4:"data";s:8:"Blogging";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:8:"Speaking";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:99:"http://www.hanselman.com/blog/FoundVideoSocialNetworkingForDevelopersAndMakingYourBlogSuckLess.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:1;a:6:{s:4:"data";s:131:"
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:7:{s:53:"http://madskills.com/public/xml/rss/module/trackback/";a:1:{s:4:"ping";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/Trackback.aspx?guid=887adfb1-0b00-4586-934f-50ccc2f15545";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:52:"http://madskills.com/public/xml/rss/module/pingback/";a:2:{s:6:"server";a:1:{i:0;a:5:{s:4:"data";s:43:"http://www.hanselman.com/blog/pingback.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"target";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=887adfb1-0b00-4586-934f-50ccc2f15545";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:15:"Scott Hanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:2:{s:7:"comment";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=887adfb1-0b00-4586-934f-50ccc2f15545";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:115:"http://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=887adfb1-0b00-4586-934f-50ccc2f15545";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:2:"24";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:101:"The Weekly Source Code 52 - You keep using that LINQ, I dunna think it means what you think it means.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=887adfb1-0b00-4586-934f-50ccc2f15545";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:144:"http://feedproxy.google.com/~r/ScottHanselman/~3/4hOOfPRtsTU/TheWeeklySourceCode52YouKeepUsingThatLINQIDunnaThinkItMeansWhatYouThinkItMeans.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Fri, 18 Jun 2010 04:11:11 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:10350:"<div><p>Remember good developers don't just write source code, they also READ it. You don't just become a great poet by writing lots of poems. Read and absorb as well. <strong>Do check out the </strong><a href="http://www.hanselman.com/blog/CategoryView.aspx?category=Source+Code"><strong>Source Code</strong></a><strong> category of my blog here</strong>, there is (as of today) 15 pages of posts on Source Code you can check out.</p>  <p>Recently my friend <a href="http://www.lostintangent.com/">Jonathan Carter (OData Dude, my name for him)</a> was working with a partner on some really weird stuff that was happening with a LINQ to SQL query. Remember that every abstraction sometimes leaks and that the whole port of an abstraction is &quot;raise the level&quot; so you don't have to worry about something. </p>  <p>Plumbing is great because it abstracts away water delivery. For all I know, there's a dude with a bucket who runs to my house when I turn on the tap. Doesn't matter to me, as long as I get water. However, sometimes something goes wrong with that dude, and I don't understand what's up with my water. This happened to JC and this partner.</p>  <p>In this example, we're using the <a href="http://msftdbprodsamples.codeplex.com/">AdventureWorks Sample Database to make this point</a>. Here's some sample code the partner sent us to reproduce the weirdness.</p>  <pre class="brush: csharp; auto-links: false;">protected virtual Customer GetByPrimaryKey(Func&lt;customer, bool&gt; keySelection)<br />{<br />    AdventureWorksDataContext context = new AdventureWorksDataContext();<br /> <br />    return (from r in context.Customers select r).SingleOrDefault(keySelection);<br />}<br /> <br />[TestMethod]<br />public void CustomerQuery_Test_01()<br />{<br />    Customer customer = GetByPrimaryKey(c =&gt; c.CustomerID == 2);<br />}<br /> <br />[TestMethod]<br />public void CustomerQuery_Test_02()<br />{<br />    AdventureWorksDataContext context = new AdventureWorksDataContext();<br />    Customer customer = (from r in context.Customers select r).SingleOrDefault(c =&gt; c.CustomerID == 2);<br />}</pre>

<p>CustomerQuery_Test_01 calls the GetByPrimaryKey method. That method takes a Func<customer bool ,> as a parameter. He's actually passing in a lamdba expression into the GetByPrimaryKey function. That makes the method reusable and is the beginning of some nice helper functions for his DAL (Data Access Layer). He's split up the query into two places. Seems reasonable, right?</p>

<p>Well, if you run this in Visual Studio - and in this example, I'll use the Intellitrace feature to see the actual SQL that was executed, although you can also use SQL Profiler - we see:</p>

<p><img style="border-right-width: 0px; margin: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="Wrong SQL in the Watch Window" border="0" alt="Wrong SQL in the Watch Window" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/TheWeeklySourceCode52YougetusingthatLIN_12079/image_5.png" width="610" height="458" /> </p>

<p>Here's the query in text:</p>

<pre>SELECT [t0].[CustomerID], [t0].[NameStyle], [t0].[Title], <br />   [t0].[FirstName], [t0].[MiddleName], [t0].[LastName], <br />   [t0].[Suffix], [t0].[CompanyName], [t0].[SalesPerson], <br />   [t0].[EmailAddress], [t0].[Phone], [t0].[PasswordHash], <br />   [t0].[PasswordSalt], [t0].[rowguid], [t0].[ModifiedDate]<br />FROM [SalesLT].[Customer] AS [t0]</pre>

<p>Um, where's the WHERE clause? Will LINQ to SQL kill my pets and cause me to lose my job? Does Microsoft suck? Let's take a look at the second query, called in CustomerQuery_Test_02():</p>

<pre>SELECT [t0].[CustomerID], [t0].[NameStyle], [t0].[Title], <br />   [t0].[FirstName], [t0].[MiddleName], [t0].[LastName], <br />   [t0].[Suffix], [t0].[CompanyName], [t0].[SalesPerson], <br />   [t0].[EmailAddress], [t0].[Phone], [t0].[PasswordHash], <br />   [t0].[PasswordSalt], [t0].[rowguid], [t0].[ModifiedDate]<br />FROM [SalesLT].[Customer] AS [t0]<br />WHERE [t0].[CustomerID] = @p0</pre>

<p>OK, there it is, but why does the second LINQ query cause a WHERE clause to be emitted but the first doesn't? They look like basically the same code path, just one is broken up.</p>

<p>The first query is clearly returning ALL rows to the caller, which then has to apply the LINQ operators to do the WHERE in memory, on the caller. The second query is using the SQL Server (as it should) to do the filter, then returns WAY less data.</p>

<p>Here's the deal. Remember that LINQ cares about two things, IEnumerable stuff and IQueryable. The first lets you foreach over a collection, and the other includes all sorts of fun stuff that lets you query that stuff. Folks build on top of those with LINQ to SQL, LINQ to XML, LINQ to YoMomma, etc. </p>

<p>When you are working with something that is IQueryable; that is, the source is IQueryable, you need to make sure you are actually usually the operators for an IQueruable, otherwise you might fall back onto an undesirable result, as in this database case with IEnumerable. <strong>You don't want to return more data from the database to a caller than is absolutely necessary.</strong></p>

<p>From JC, with <strong>emphasis mine</strong>:</p>

<blockquote>
  <p>The IQueryable version of SingleOrDefault, that takes a lambda, actually takes an <strong>Expression<func><t bool ,>&gt;</strong>, whereas the IEnumerable version, takes a <strong>Func<t bool ,></strong>. Hence, in the below code, the call to SingleOrDefault, is treating the query as if it was LINQ To Objects, which executes the query via L2S, then performs the SingleOrDefault on the in memory collection. If they changed the signature of GetByPrimaryKey to take an <strong>Expression<func><customer bool ,>&gt;,</strong> it would work as expected.</p>
</blockquote>

<p>What's a Func and what's an Expression? A Func&lt;&gt; (pronounced &quot;Funk&quot;) <a href="http://blogs.msdn.com/b/mirceat/archive/2008/03/13/linq-framework-design-guidelines.aspx">represents a generic delegate</a>. Like:</p>

<pre class="brush: csharp; auto-links: false;">Func&lt;int,int,double&gt; divide=(x,y)=&gt;(double)x/(double)y;<br />Console.WriteLine(divide(2,3));</pre>

<p>And an Expression&lt;&gt; is a function definition that can be compiled and invoked at runtime. Example&quot;</p>

<pre class="brush: csharp; auto-links: false;">Expression&lt;Func&lt;int,int,double&gt;&gt; divideBody=(x,y)=&gt;(double)x/(double)y;<br />Func&lt;int,int,double&gt; divide2=divideBody.Compile();<br />write(divide2(2,3));</pre>

<p>So, the partner doesn't want a Func<customer bool ,> (a Func that takes a customer and returns a bool, they want a compliable Expression with a Func that takes a Customer and returns a bool. I'll have to add &quot;using System.Linq.Expressions;&quot; as well.</p>

<pre class="brush: csharp; auto-links: false; highlight: [1];">protected virtual Customer GetByPrimaryKey(Expression&lt;Func&lt;customer,bool&gt;&gt; keySelection)<br />{<br />    AdventureWorksDataContext context = new AdventureWorksDataContext();<br /> <br />    return (from r in context.Customers select r).SingleOrDefault(keySelection);<br /> <br />}<br /> <br />[TestMethod]<br />public void CustomerQuery_Test_01()<br />{<br />    Customer customer = GetByPrimaryKey(c =&gt; c.CustomerID == 2);<br />}<br /> <br />[TestMethod]<br />public void CustomerQuery_Test_02()<br />{<br />    AdventureWorksDataContext context = new AdventureWorksDataContext();<br />    Customer customer = (from r in context.Customers select r).SingleOrDefault(c =&gt; c.CustomerID == 2);<br />}</pre>

<p>Just changed that one line, so that GetByPrimaryKey takes a Expression<func><customer bool ,>&gt; and I get the SQL I expected:</p>

<p><img style="border-right-width: 0px; margin: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="Corrected SQL in the Watch Window" border="0" alt="Corrected SQL in the Watch Window" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/TheWeeklySourceCode52YougetusingthatLIN_12079/image_6.png" width="612" height="433" /> </p>

<p>Someone famous once said, &quot;My code has no bugs, it runs exactly as I wrote it.&quot; </p>

<p>Layers of Abstraction are tricky, and you should always assert your assumptions and always look at the SQL that gets generated/created/executed by your DAL before you put something into production. <strong>Trust no one, except the profiler. </strong></p><br/><hr/>Â© 2010 Scott Hanselman. All rights reserved. <br/></div>
<p><a href="http://feedads.g.doubleclick.net/~a/ToV5ekGzsN5H46gK3SXSvaJ-T7E/0/da"><img src="http://feedads.g.doubleclick.net/~a/ToV5ekGzsN5H46gK3SXSvaJ-T7E/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/ToV5ekGzsN5H46gK3SXSvaJ-T7E/1/da"><img src="http://feedads.g.doubleclick.net/~a/ToV5ekGzsN5H46gK3SXSvaJ-T7E/1/di" border="0" ismap="true"></img></a></p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=4hOOfPRtsTU:ONyoYS6oUwM:D7DqB2pKExk"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=4hOOfPRtsTU:ONyoYS6oUwM:D7DqB2pKExk" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=4hOOfPRtsTU:ONyoYS6oUwM:MjquXQBfoPI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=MjquXQBfoPI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=4hOOfPRtsTU:ONyoYS6oUwM:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=4hOOfPRtsTU:ONyoYS6oUwM:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=4hOOfPRtsTU:ONyoYS6oUwM:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=4hOOfPRtsTU:ONyoYS6oUwM:F7zBnMyn0Lo" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=4hOOfPRtsTU:ONyoYS6oUwM:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=4hOOfPRtsTU:ONyoYS6oUwM:5M_9TJJRyfI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=5M_9TJJRyfI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/ScottHanselman/~4/4hOOfPRtsTU" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=887adfb1-0b00-4586-934f-50ccc2f15545";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:5:{i:0;a:5:{s:4:"data";s:7:"ASP.NET";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:4:"Data";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:13:"Learning .NET";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:3;a:5:{s:4:"data";s:4:"LINQ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:4;a:5:{s:4:"data";s:11:"Source Code";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:113:"http://www.hanselman.com/blog/TheWeeklySourceCode52YouKeepUsingThatLINQIDunnaThinkItMeansWhatYouThinkItMeans.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:2;a:6:{s:4:"data";s:124:"
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:7:{s:53:"http://madskills.com/public/xml/rss/module/trackback/";a:1:{s:4:"ping";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/Trackback.aspx?guid=af210621-ac83-4cfb-9e48-6dafa35a8b92";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:52:"http://madskills.com/public/xml/rss/module/pingback/";a:2:{s:6:"server";a:1:{i:0;a:5:{s:4:"data";s:43:"http://www.hanselman.com/blog/pingback.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"target";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=af210621-ac83-4cfb-9e48-6dafa35a8b92";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:15:"Scott Hanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:2:{s:7:"comment";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=af210621-ac83-4cfb-9e48-6dafa35a8b92";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:115:"http://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=af210621-ac83-4cfb-9e48-6dafa35a8b92";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:1:"3";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:76:"Hanselminutes Podcast 217 - MVC Turbine and IoC made easy with Javier Lozano";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=af210621-ac83-4cfb-9e48-6dafa35a8b92";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:129:"http://feedproxy.google.com/~r/ScottHanselman/~3/BR7C7-Ojivg/HanselminutesPodcast217MVCTurbineAndIoCMadeEasyWithJavierLozano.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Fri, 11 Jun 2010 10:44:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:6612:"<div><p><img style="border-bottom: 0px; border-left: 0px; margin: 0px 0px 5px 5px; display: inline; border-top: 0px; border-right: 0px" title="headshot" border="0" alt="headshot" align="right" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/HanselminutesPodcast217MVCTurbineandIoCm_14DC4/headshot_1143e723-63fa-415d-aee4-02f1d3ca7f36.jpg" width="121" height="190" /> My <a href="http://www.hanselminutes.com/default.aspx?showID=235">two-hundred-and-seventeenth podcast is up</a>. Scott talks to Javier Lozano about his open source MVC Turbine project and how it makes Dependency Injection and inversion of control extremely easy. These concepts can be tricky to jump into and usually require custom code in your app. MVC Turbine makes it easy to get up and running in minutes with ASP.NET MVC and IoC.</p>  <p>(Ya, I know, I'm late to post this.)</p>  <p><strong>Subscribe: </strong><a href="http://feeds.feedburner.com/Hanselminutes"><img border="0" alt="Subscribe to Hanselminutes" src="http://www.hanselman.com/blog/content/binary/feed_2Dicon_2D16x16.png" /></a> <a href="http://phobos.apple.com/WebObjects/MZStore.woa/wa/viewPodcast?id=117488860"><img border="0" alt="Subscribe to my Podcast in iTunes" src="http://www.hanselman.com/blog/themes/zenGarden2/itunes_subscribe.gif" /></a></p>  <p><strong>Download: </strong><a href="http://perseus.franklins.net/hanselminutes_0217.mp3">MP3 Full Show</a></p>  <p><strong>Links from the Show</strong></p>  <ul>   <li><a href="http://channel9.msdn.com/posts/jongalloway/Jon-Takes-Five-with-Javier-Lozano-on-MVC-Turbine">Javier talking about MVC Turbine on Channel 9</a></li> </ul>  <p>Do also <a href="http://www.hanselminutes.com/archives.aspx">remember the complete archives</a> are always up and they have <strong><em>PDF Transcripts</em></strong>, a little known feature that show up a few weeks after each show.</p>  <p><strong>I want to add a big thanks to Telerik. Without their support, there wouldn't be a Hanselminutes. I hope they, and you, know that. Someone's gotta pay the bandwidth. Thanks also to Carl Franklin for all his support over these last 4 years!</strong></p>  <p><a href="http://www.telerik.com/products/aspnet/overview.aspx?gad=CPLKy9kDEghsdEbLXRZ0NBiF1bL_AyCCkdsU"><strong>Telerik</strong></a> is our sponsor for this show.</p>  <p><a href="http://www.telerik.com/products/aspnet/overview.aspx?gad=CPLKy9kDEghsdEbLXRZ0NBiF1bL_AyCCkdsU"><strong><img border="0" align="left" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/HanselminutesPodcast51StaticCodeAnalysis_140AB/telerikLogo%5B1%5D%5B8%5D.gif" width="216" height="74" /></strong></a><strong>Building quality software is never easy. It requires skills and imagination. We cannot promise to improve your skills, but when it comes to User Interface and developer tools, we can provide the building blocks to take your application a step closer to your imagination. Explore the leading UI suites for </strong><a href="http://www.telerik.com/products/aspnet-ajax.aspx"><strong>ASP.NET AJAX</strong></a><strong>,</strong><a href="http://www.telerik.com/products/aspnet-mvc.aspx"><strong>MVC</strong></a><strong>,</strong><a href="http://www.telerik.com/products/silverlight.aspx"><strong>Silverlight</strong></a><strong>,</strong><a href="http://www.telerik.com/products/winforms.aspx"><strong>Windows Forms</strong></a><strong>and </strong><a href="http://www.telerik.com/products/wpf.aspx"><strong>WPF</strong></a><strong>. Enjoy developer tools like </strong><a href="http://www.telerik.com/products/reporting.aspx"><strong>.NET reporting</strong></a><strong>, </strong><a href="http://www.telerik.com/products/orm.aspx"><strong>ORM</strong></a><strong>,</strong><a href="http://www.telerik.com/products/web-testing-tools.aspx"><strong>Automated Testing Tools</strong></a><strong>, </strong><a href="http://www.telerik.com/products/tfsmanager-and-tfsdashboard.aspx"><strong>TFS</strong></a><strong>, and </strong><a href="http://www.telerik.com/products/sitefinity.aspx"><strong>Content Management Solution</strong></a><strong>. And now you can increase your productivity with JustCode, Telerikâs new productivity tool for code analysis and refactoring. Visit </strong><a href="http://www.telerik.com"><strong>www.telerik.com</strong></a><strong>.</strong></p>  <p><strong><em></em></strong>As I've said before this show comes to you with the audio expertise and stewardship of <a href="http://weblogs.asp.net/cfranklin/archive/2006/01/11/435036.aspx">Carl Franklin</a>. The name comes from<a href="http://www.paraesthesia.com/blog/comments.php?id=776_0_1_0_C">Travis Illig</a>, but the goal of the show is simple. Avoid wasting the listener's time. (and make the commute less boring)</p>  <p>Enjoy. Who knows what'll happen in the next show?</p><br/><hr/>Â© 2010 Scott Hanselman. All rights reserved. <br/></div>
<p><a href="http://feedads.g.doubleclick.net/~a/9jjyDGIjHZy94HeVtw29b3b2gjY/0/da"><img src="http://feedads.g.doubleclick.net/~a/9jjyDGIjHZy94HeVtw29b3b2gjY/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/9jjyDGIjHZy94HeVtw29b3b2gjY/1/da"><img src="http://feedads.g.doubleclick.net/~a/9jjyDGIjHZy94HeVtw29b3b2gjY/1/di" border="0" ismap="true"></img></a></p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=BR7C7-Ojivg:dlo1cOWzwCg:D7DqB2pKExk"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=BR7C7-Ojivg:dlo1cOWzwCg:D7DqB2pKExk" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=BR7C7-Ojivg:dlo1cOWzwCg:MjquXQBfoPI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=MjquXQBfoPI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=BR7C7-Ojivg:dlo1cOWzwCg:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=BR7C7-Ojivg:dlo1cOWzwCg:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=BR7C7-Ojivg:dlo1cOWzwCg:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=BR7C7-Ojivg:dlo1cOWzwCg:F7zBnMyn0Lo" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=BR7C7-Ojivg:dlo1cOWzwCg:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=BR7C7-Ojivg:dlo1cOWzwCg:5M_9TJJRyfI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=5M_9TJJRyfI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/ScottHanselman/~4/BR7C7-Ojivg" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=af210621-ac83-4cfb-9e48-6dafa35a8b92";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:4:{i:0;a:5:{s:4:"data";s:7:"ASP.NET";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:11:"ASP.NET MVC";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:3:"IOC";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:3;a:5:{s:4:"data";s:7:"Podcast";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:98:"http://www.hanselman.com/blog/HanselminutesPodcast217MVCTurbineAndIoCMadeEasyWithJavierLozano.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:3;a:6:{s:4:"data";s:117:"
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:7:{s:53:"http://madskills.com/public/xml/rss/module/trackback/";a:1:{s:4:"ping";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/Trackback.aspx?guid=baf8d266-5ba4-4596-80e6-58eb2726a4f9";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:52:"http://madskills.com/public/xml/rss/module/pingback/";a:2:{s:6:"server";a:1:{i:0;a:5:{s:4:"data";s:43:"http://www.hanselman.com/blog/pingback.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"target";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=baf8d266-5ba4-4596-80e6-58eb2726a4f9";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:15:"Scott Hanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:2:{s:7:"comment";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=baf8d266-5ba4-4596-80e6-58eb2726a4f9";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:115:"http://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=baf8d266-5ba4-4596-80e6-58eb2726a4f9";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:2:"10";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:116:"Experiments in Wackiness: Allowing percents, angle-brackets, and other naughty things in the ASP.NET/IIS Request URL";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=baf8d266-5ba4-4596-80e6-58eb2726a4f9";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:162:"http://feedproxy.google.com/~r/ScottHanselman/~3/vg0eIaqVaeQ/ExperimentsInWackinessAllowingPercentsAnglebracketsAndOtherNaughtyThingsInTheASPNETIISRequestURL.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Wed, 09 Jun 2010 21:49:01 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:15751:"<div><p>Just because you CAN do something doesn't mean you SHOULD. However, it's always nice to do something crazy so that you can better understand a system. </p>  <blockquote>   <p><font color="#ff0000"><strong>Warning: There is no warranty implied here. I'm loading the gun and showing you where to point it. If you point it at your foot, that's your business. Safety mechanisms exist for a reason and if you're going to to use this tip to just &quot;get an app to work&quot; but you're not sure why it's broken and you're just flipping switches to &quot;get'er done&quot; then step backwards out of the minefield and hug your family. Don't trust user input and don't let users submit unencoded script or markup.</strong></font></p> </blockquote>  <p>I got a question from a fellow at Webcamps China about why he couldn't put &lt;b&gt; in a URL. He wanted to do something like : <a href="http://localhost:39090/Default/%3Cb%3E">http://localhost:39090/Default/%3Cb%3E</a> That's a &lt;b&gt; as in &quot;%3C b %3E&quot; were the %3C is &lt; and %3E is &gt;.</p>  <p>Notice he's asking to put this in the Request Path, the URL, not in the Query String. If I create a quick ASP.NET MVC 2 app (this could be done in WebForms also) and issue <a href="http://localhost:39090/Default/%3Cb%3E">http://localhost:39090/Default<strong>/%3Cb%3E</strong></a> I get this HTTP Error 400. Notice it's not a standard <acronym title="Yellow Screen of Death">YSOD</acronym>, it's a simple error message. </p>  <p><img style="border-right-width: 0px; margin: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="Bad Request - Windows Internet Explorer (2)" border="0" alt="Bad Request - Windows Internet Explorer (2)" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/ExperimentsinWackinessA.NETIISRequestURL_9A9B/Bad%20Request%20-%20Windows%20Internet%20Explorer%20(2)_3.png" width="556" height="380" /> </p>  <p>This error was caught and issued early in the pipeline, before ASP.NET proper got involved. In this case, I'm using the development web server, but I'd get a similar error from IIS proper.</p>  <p>Now, if I change the URL to use the QueryString instead of the Request Path: <a title="http://localhost:11965/Home/Index?id=%3Cb%3E" href="http://localhost:11965/Home/Index?id=%3Cb%3E">http://localhost:11965/Home/Index<strong>?id=%3Cb%3E</strong></a></p>  <p></p>  <p><img style="border-right-width: 0px; margin: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="A potentially dangerous Request.QueryString value was detected from the client (id=b). - Windows Internet Explorer" border="0" alt="A potentially dangerous Request.QueryString value was detected from the client (id=b). - Windows Internet Explorer" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/ExperimentsinWackinessA.NETIISRequestURL_9A9B/A%20potentially%20dangerous%20Request.QueryString%20value%20was%20detected%20from%20the%20client%20(id=b).%20-%20Windows%20Internet%20Explorer_3.png" width="556" height="380" /> </p>  <p>This was caught in a different place, in ASP.NET managed code, specifically in input validation. I remember <a href="http://www.hanselman.com/blog/MyDayBackportingInputValidationFromASPNET11ToASPNET10.aspx">when I first used input validation 7 years ago</a>. ;) </p>  <p>If you really know what you're doing and you know WHY you're doing it, you can turn Request Validation off in a number of ways. </p>  <p>However, this is a really bad idea so they've made it harder in ASP.NET 4 and you have to explicitly tell it you want the 2.0 style of request validation this first in the system.web section via <font color="#ff0000">requestValidationMode</font>:</p>  <pre class="brush: xml; auto-links: false;">&lt;httpRuntime requestValidationMode=&quot;2.0&quot; /&gt;</pre>

<p>Then, if you are using WebForms, you can turn it off totally at the application level in your web.config. </p>

<pre class="brush: xml; auto-links: false;">&lt;pages validateRequest=&quot;false&quot; /&gt;</pre>

<p>Or, again, if you're using WebForms, you can turn it off for one page:</p>

<pre class="brush: xml; auto-links: false;">&lt;%@ Page validateRequest=&quot;false&quot; %&gt; </pre>

<p>If you're using MVC, you turn it off Input Validation using the <font size="2" face="Courier New">[ValidateInput(false)]</font> attribute on a class or a method. </p>

<p>In this case if I turn it off on my method, it works and I can pass the &lt;b&gt; encoded as %3Cb%3E directly in the Query String, but STILL not in the Request Path as that's a different path through the server.</p>

<p>So, with request validation in 2.0 mode and also explicitly turned off on my method:</p>

<ul>
  <li>Still, doesn't work - <a href="http://localhost:39090/Default/%3Cb%3E">http://localhost:39090/Default<strong>/%3Cb%3E</strong></a><strong> </strong></li>

  <li>Works&#160; - <a title="http://localhost:11965/Home/Index?id=%3Cb%3E" href="http://localhost:11965/Home/Index?id=%3Cb%3E">http://localhost:11965/Home/Index<strong>?id=%3Cb%3E</strong></a> </li>
</ul>

<p>Now here I'm really telling you about the minefield. Best way to not get killed in a minefield is to avoid it all together, but, since you insist...</p>

<p>Stefan from the ASP.NET team says: </p>

<ul>
  <li><em>By default the &quot;<font color="#ff0000">requestPathInvalidChars</font>&quot; attribute contains seven characters considered invalid (the less than and greater than signs as well as the ampersand are encoded since configuration is an Xml file). Those are on the httpRuntime element, and the attribute is requestPathInvalidCharacters=&quot;&amp;lt;,&amp;gt;,*,%,:,&amp;amp&quot;</em> </li>
</ul>

<p>So, then I might be able to change</p>

<pre class="brush: xml; auto-links: false;">&lt;httpRuntime requestValidationMode=&quot;2.0&quot;<br />             requestPathInvalidCharacters=&quot;&amp;lt;,&amp;gt;,*,%,:,&amp;amp;,\&quot;<br />             /&gt;</pre>

<p>to this, removing the &lt;, &gt;, and %.</p>

<pre class="brush: xml; auto-links: false;">&lt;httpRuntime requestValidationMode=&quot;2.0&quot;<br />             requestPathInvalidCharacters=&quot;*,:,&amp;amp;,\&quot;<br />             /&gt;</pre>

<p>But, remember that a % is a special thing used in <a href="http://en.wikipedia.org/wiki/Percent-encoding">URL Encoding (percent encoding)</a> and you can say things that are encoded correctly like %3B or things that aren't like %ZZ. So it depends on the semantics you want. What do you intend for a % to mean? From Stefan:</p>

<blockquote>
  <p><em>Note though that the â%â character has special meaning as the beginning of a Url-encoded character sequence.&#160; You may run into a problem with IIS rejecting the Url depending on what comes after the % sign.&#160; For example if the inbound Url is:</em></p>

  <p><a href="http://whatever/blah%2512"><em>http://whatever/blah%2512</em></a></p>

  <p><em>IIS7 will complain because after it does a Url-decode the Url will look like:</em></p>

  <p><a href="http://whatever/blah%12"><em>http://whatever/blah%12</em></a></p>

  <p><em>Which will trigger the double-decode detection alert since the Url will mutate again if it is Url-decoded a second time.</em></p>
</blockquote>

<p>To suppress that error you need to&#160; add the following to configuration as well. <font color="#ff0000">requestFiltering allowDoubleEscaping=&quot;true&quot;</font></p>

<pre class="brush: xml; auto-links: false;">&lt;system.webServer&gt;<br />    &lt;security&gt;<br />        &lt;requestFiltering allowDoubleEscaping=&quot;true&quot;/&gt;<br />    &lt;/security&gt;<br />&lt;/system.webServer&gt;</pre>

<p>However, at this point, you're turning off <em>all sorts of things, </em>and are in danger of making URLs that just shouldn't be. ;) You may also have a latent canonicalization bug floating around in your code if you head down this road.</p>

<p>But does it work? It doesn't work under Visual Studio Development Web Server as the system.webServer section only applies to IIS7. If I deploy my ASP.NET MVC application to IIS, it <em>starts </em>to work as I get into my controller action, but then as I return the ViewResult via &quot;return View()&quot; it fails deep inside of ASP.NET proper as the WebFormsViewEngine's ViewPage implementation of RenderView() ends up calling Server.Execute which calls HttpRequest.MapPath. MapPath assumes there's an underlying file and calls InternalSecurityPermissions.PathDiscovery().Demand(). This contains a FileIOPermisson which checks for illegal characters. Since you can't have a file that contains a &lt; or &gt;, it fails. Bummer.</p>

<pre>System.IO.Path.CheckInvalidPathChars(String path) +142<br />   System.Security.Permissions.FileIOPermission.HasIllegalCharacters(String[] str) +97<br />   System.Security.Permissions.FileIOPermission.AddPathList(FileIOPermissionAccess access, AccessControlActions control, String[] pathListOrig, Boolean checkForDuplicates, Boolean needFullPath, Boolean copyPathList) +96<br />   System.Security.Permissions.FileIOPermission.AddPathList(FileIOPermissionAccess access, String[] pathListOrig, Boolean checkForDuplicates, Boolean needFullPath, Boolean copyPathList) +38<br />   System.Security.Permissions.FileIOPermission..ctor(FileIOPermissionAccess access, String path) +92<br />   System.Web.HttpRequest.MapPath(VirtualPath virtualPath, VirtualPath baseVirtualDir, Boolean allowCrossAppMapping) +639<br />   System.Web.HttpServerUtility.Execute(IHttpHandler handler, TextWriter writer, Boolean preserveForm, Boolean setPreviousPage) +195<br />   System.Web.HttpServerUtilityWrapper.Execute(IHttpHandler handler, TextWriter writer, Boolean preserveForm) +94<br />   System.Web.Mvc.ViewPage.RenderView(ViewContext viewContext) +403<br />   ...blah blah...<br />   System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean&amp; completedSynchronously) +371</pre>

<p>Is there a way to tell the system to &quot;relax?&quot; I mean, seriously, not every URL maps to a file system. If only there were an attribute called <font color="#ff0000">relaxedUrlToFileSystemMapping</font>=&quot;true&quot;. ;)</p>

<p>Oy, if you're not afraid now, be afraid. If you're made it that far, again, you're on your own, turning safeties off, yada yada, mercy on your soul, etc.</p>

<pre class="brush: xml; auto-links: false;">&lt;httpRuntime requestValidationMode=&quot;2.0&quot;<br />             requestPathInvalidCharacters=&quot;*,:,&amp;amp;,\&quot;<br />             relaxedUrlToFileSystemMapping=&quot;true&quot;<br />             /&gt;</pre>

<p>While we're in here, note that in ASP.NET 4 you can also change allowed path and queryString lengths:</p>

<pre class="brush: xml; auto-links: false;">&lt;httpRuntime maxRequestPathLength=&quot;260&quot; maxQueryStringLength=&quot;2048&quot; /&gt;</pre>

<p>At this point the only thing that is saving us is the list of characters in requestPathInvalidCharacters. For example, if I try to sneak a %3A by, it won't work as that's a colon (:) and it's in the list. Issuing <a title="http://localhost:11965/Home/Index?id=%3Cb%3E" href="http://localhost:11965/Home/Index?id=%3A">http://localhost:11965/Home/Index<strong>?id=%3A</strong></a> gives me this error &quot;<em>A potentially dangerous Request.Path value was detected from the client (:).&quot;</em> I find it slightly funny that they output the offending evil character. Don't look directly at it! :)</p>

<p><a href="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/ExperimentsinWackinessA.NETIISRequestURL_9A9B/A%20potentially%20dangerous%20Request.Path%20value%20was%20detected%20from%20the%20client%20().%20-%20Windows%20Internet%20Explorer_2.png"><img style="border-right-width: 0px; margin: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="A potentially dangerous Request.Path value was detected from the client (). - Windows Internet Explorer" border="0" alt="A potentially dangerous Request.Path value was detected from the client (). - Windows Internet Explorer" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/ExperimentsinWackinessA.NETIISRequestURL_9A9B/A%20potentially%20dangerous%20Request.Path%20value%20was%20detected%20from%20the%20client%20().%20-%20Windows%20Internet%20Explorer_thumb.png" width="494" height="400" /></a> </p>

<p>But still, at this point, now I CAN do this URL: <a title="http://localhost:11965/Home/Index?id=%3Cb%3E" href="http://localhost:11965/Home/Index?id=%3Cb%3E">http://localhost:11965/Home/Index<strong>?id=%3Cb%3E</strong></a></p>

<p><a href="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/ExperimentsinWackinessA.NETIISRequestURL_9A9B/Home%20Page%20-%20Windows%20Internet%20Explorer_2.png"><img style="border-right-width: 0px; margin: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="Home Page - Windows Internet Explorer" border="0" alt="Home Page - Windows Internet Explorer" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/ExperimentsinWackinessA.NETIISRequestURL_9A9B/Home%20Page%20-%20Windows%20Internet%20Explorer_thumb.png" width="494" height="400" /></a> </p>

<p>And I'm saved, finally, by the new HtmlEncoding syntax &lt;%: rather than &lt;%=. </p>

<p>The &lt;%: mystring %&gt; syntax in ASP.NET 4 is equivalent to &lt;%= Server.HtmlEncode (mystring) %&gt; and since it's the default, my UrlEncoded &lt;b&gt; was HtmlEncoded on the way back out. </p>

<p><font color="#ff0000">After ALL this effort to get crazy stuff in the Request Path, it's worth mentioning that simply keeping the values as a part of the Query String (remember WAY back at the beginning of this post?) is easier, cleaner, more flexible, and more secure.</font></p>

<p>Enjoy, take care, and please don't point that at me.</p><br/><hr/>Â© 2010 Scott Hanselman. All rights reserved. <br/></div>
<p><a href="http://feedads.g.doubleclick.net/~a/vm1BZmZjxibUdQNC-oD44uNNLIM/0/da"><img src="http://feedads.g.doubleclick.net/~a/vm1BZmZjxibUdQNC-oD44uNNLIM/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/vm1BZmZjxibUdQNC-oD44uNNLIM/1/da"><img src="http://feedads.g.doubleclick.net/~a/vm1BZmZjxibUdQNC-oD44uNNLIM/1/di" border="0" ismap="true"></img></a></p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=vg0eIaqVaeQ:7KKqFrt1_Dg:D7DqB2pKExk"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=vg0eIaqVaeQ:7KKqFrt1_Dg:D7DqB2pKExk" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=vg0eIaqVaeQ:7KKqFrt1_Dg:MjquXQBfoPI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=MjquXQBfoPI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=vg0eIaqVaeQ:7KKqFrt1_Dg:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=vg0eIaqVaeQ:7KKqFrt1_Dg:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=vg0eIaqVaeQ:7KKqFrt1_Dg:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=vg0eIaqVaeQ:7KKqFrt1_Dg:F7zBnMyn0Lo" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=vg0eIaqVaeQ:7KKqFrt1_Dg:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=vg0eIaqVaeQ:7KKqFrt1_Dg:5M_9TJJRyfI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=5M_9TJJRyfI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/ScottHanselman/~4/vg0eIaqVaeQ" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=baf8d266-5ba4-4596-80e6-58eb2726a4f9";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:3:{i:0;a:5:{s:4:"data";s:7:"ASP.NET";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:11:"ASP.NET MVC";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:3:"IIS";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:131:"http://www.hanselman.com/blog/ExperimentsInWackinessAllowingPercentsAnglebracketsAndOtherNaughtyThingsInTheASPNETIISRequestURL.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:4;a:6:{s:4:"data";s:103:"
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:7:{s:53:"http://madskills.com/public/xml/rss/module/trackback/";a:1:{s:4:"ping";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/Trackback.aspx?guid=ba9b85a5-2298-4d74-9a69-d595cfad0c26";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:52:"http://madskills.com/public/xml/rss/module/pingback/";a:2:{s:6:"server";a:1:{i:0;a:5:{s:4:"data";s:43:"http://www.hanselman.com/blog/pingback.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"target";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=ba9b85a5-2298-4d74-9a69-d595cfad0c26";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:15:"Scott Hanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:2:{s:7:"comment";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=ba9b85a5-2298-4d74-9a69-d595cfad0c26";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:115:"http://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=ba9b85a5-2298-4d74-9a69-d595cfad0c26";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:2:"31";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:83:"The Best Visual Studio 2010 Productivity Power Tools, Power Commands and Extensions";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=ba9b85a5-2298-4d74-9a69-d595cfad0c26";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:137:"http://feedproxy.google.com/~r/ScottHanselman/~3/-J-VE0KHN_E/TheBestVisualStudio2010ProductivityPowerToolsPowerCommandsAndExtensions.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Wed, 09 Jun 2010 07:37:54 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:8208:"<div><p>One of the things I'm digging about VS2010 is its extensibility model. I'm collecting add-ins in VS like I collect Add-Ins in FireFox. Here's my current of the <strong>best Visual Studio 2010 Extensions </strong>I'm using.</p>  <hr />  <h3><a href="http://www.hanselman.com/blog/MakeTheVisualStudio2010IDEColorsLookLikeVisualStudio2008.aspx">Visual Studio Color Theme Editor</a></h3>  <p>I've blogged before about the <a href="http://www.hanselman.com/blog/MakeTheVisualStudio2010IDEColorsLookLikeVisualStudio2008.aspx">Visual Studio Color Theme Editor</a>. It's great and lets you make VS look like whatever OS you want. Some crazy people try to make Visual Studio 2010 look like Visual Studio 2008! ;)</p> <img src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/MakingtheVisualStudio2010IDEcolorslookli_9AB4/image_597c3a34-357f-4168-9066-7d9b6a6d69f8.png" />   <hr />  <h3><a href="http://visualstudiogallery.msdn.microsoft.com/en-us/e5f41ad9-4edc-4912-bca3-91147db95b99">PowerCommands for Visual Studio 2010</a></h3>  <p>This crazy add-in adds 25 additional commands to Visual Studio! It's a collection of really convenient little improvements like Open Containing Folder and Open Command Prompt. But it's also subtle things like Undo Close that will reopen the most recent tab with the cursor just where it was. There's a lot of Copy/Paste improvements, letting you copy and paste a whole class, or copy and paste references between projects. It even adds &quot;Format Document on Save&quot; that will tidy up your whitespace every time you save your document. Lovely.</p>  <p><a href="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/VisualStudio2010ProductivityPowerTools_E8CC/PowerCommandsPreview_2.png"><img style="border-right-width: 0px; margin: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="PowerCommandsPreview" border="0" alt="PowerCommandsPreview" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/VisualStudio2010ProductivityPowerTools_E8CC/PowerCommandsPreview_thumb.png" width="275" height="275" /></a> </p>  <hr />  <h3><a href="http://visualstudiogallery.msdn.microsoft.com/en-us/d0d33361-18e2-46c0-8ff2-4adea1e34fef">Visual Studio 2010 Pro Power Tools</a></h3>  <p>Where PowerCommands adds lots of little commands in subtle ways, Pro Power Tools changes UI things in much bigger ways. </p>  <p><a href="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/VisualStudio2010ProductivityPowerTools_E8CC/image_2.png"><img style="border-right-width: 0px; margin: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/VisualStudio2010ProductivityPowerTools_E8CC/image_thumb.png" width="576" height="202" /></a> </p>  <p>Two of the big changes are the &quot;Document Well&quot; that changes how tabs behave. It'll color tabs based on what project they came from, which is nice for large solutions. It also introduces optional tab recycling that will close old tabs as you open new ones. If you prefer a pile of tabs, you can get multiple rows or columns of tabs.</p>  <p>You can also Highlight Current Line, nice for large monitors. It adds HTML Copy that puts code in the clipboard as in the HTML format if if you like, but most of all, it adds a new Searchable Add Reference Dialog. Magic.</p>  <p><a href="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/VisualStudio2010ProductivityPowerTools_E8CC/image_4.png"><img style="border-right-width: 0px; margin: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="New Add Reference Dialog" border="0" alt="New Add Reference Dialog" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/VisualStudio2010ProductivityPowerTools_E8CC/image_thumb_1.png" width="550" height="317" /></a> </p>  <hr />  <h3><a href="http://visualstudiogallery.msdn.microsoft.com/en-us/dace3633-0b51-4629-85d4-c59cdce5bb3b">CodeCompare</a></h3>  <p>I'm a fan of <a href="http://www.scootersoftware.com/">BeyondCompare</a> from Scooter Software, but I like integrated stuff as well. CodeCompare is a free Diff tool that runs inside VS itself. It's nice because it's using the VS editor so it has the features you're used to like Ctrl-Scroll to change the font sizes. I wish the two panes changed sizes in sync though, and I've seen one or two crashes. Still, an excellent free compare tool, and I like that I can drag the second file in.</p>  <p><a href="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/VisualStudio2010ProductivityPowerTools_E8CC/mainlarge_2.jpg"><img style="border-bottom: 0px; border-left: 0px; margin: 0px; display: inline; border-top: 0px; border-right: 0px" title="Diff Tool" border="0" alt="Diff Tool" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/VisualStudio2010ProductivityPowerTools_E8CC/mainlarge_thumb.jpg" width="500" height="375" /></a></p>  <hr />  <h3><a href="http://visualstudiogallery.msdn.microsoft.com/en-us/60297607-5fd4-4da4-97e1-3715e90c1a23?SRC=VSIDE">tangible T4 Editor</a></h3>  <p>T4 (Text Template Transformation Toolkit) <a href="http://www.hanselman.com/blog/T4TextTemplateTransformationToolkitCodeGenerationBestKeptVisualStudioSecret.aspx">Code Generation is Visual Studio's best kept secret</a>. It's built in and it's yummy. However, there's no syntax highlighting and opening .tt files in Visual Studio directly is a smidge scary, as it's hard to tell what's code generating code and what's the code you're generating. With the free tangibile T4 editor you get coloring and Intellisense.</p>  <p><a href="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/VisualStudio2010ProductivityPowerTools_E8CC/T4MVC.tt%20-%20Microsoft%20Visual%20Studio%20(2)_2.png"><img style="border-bottom: 0px; border-left: 0px; margin: 0px; display: inline; border-top: 0px; border-right: 0px" title="T4MVC.tt - Microsoft Visual Studio (2)" border="0" alt="T4MVC.tt - Microsoft Visual Studio (2)" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/VisualStudio2010ProductivityPowerTools_E8CC/T4MVC.tt%20-%20Microsoft%20Visual%20Studio%20(2)_thumb.png" width="500" height="393" /></a> </p>  <p>What are your favorites, Dear Reader?</p><br/><hr/>Â© 2010 Scott Hanselman. All rights reserved. <br/></div>
<p><a href="http://feedads.g.doubleclick.net/~a/kd3Ja7fYfHCKSXyDP8zyREfOThQ/0/da"><img src="http://feedads.g.doubleclick.net/~a/kd3Ja7fYfHCKSXyDP8zyREfOThQ/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/kd3Ja7fYfHCKSXyDP8zyREfOThQ/1/da"><img src="http://feedads.g.doubleclick.net/~a/kd3Ja7fYfHCKSXyDP8zyREfOThQ/1/di" border="0" ismap="true"></img></a></p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=-J-VE0KHN_E:GEvr-Ie4b_4:D7DqB2pKExk"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=-J-VE0KHN_E:GEvr-Ie4b_4:D7DqB2pKExk" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=-J-VE0KHN_E:GEvr-Ie4b_4:MjquXQBfoPI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=MjquXQBfoPI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=-J-VE0KHN_E:GEvr-Ie4b_4:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=-J-VE0KHN_E:GEvr-Ie4b_4:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=-J-VE0KHN_E:GEvr-Ie4b_4:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=-J-VE0KHN_E:GEvr-Ie4b_4:F7zBnMyn0Lo" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=-J-VE0KHN_E:GEvr-Ie4b_4:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=-J-VE0KHN_E:GEvr-Ie4b_4:5M_9TJJRyfI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=5M_9TJJRyfI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/ScottHanselman/~4/-J-VE0KHN_E" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=ba9b85a5-2298-4d74-9a69-d595cfad0c26";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:1:{i:0;a:5:{s:4:"data";s:6:"VS2010";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:106:"http://www.hanselman.com/blog/TheBestVisualStudio2010ProductivityPowerToolsPowerCommandsAndExtensions.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:5;a:6:{s:4:"data";s:110:"
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:7:{s:53:"http://madskills.com/public/xml/rss/module/trackback/";a:1:{s:4:"ping";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/Trackback.aspx?guid=7c718126-4ea9-4ce4-8a4c-4d5ee74dd130";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:52:"http://madskills.com/public/xml/rss/module/pingback/";a:2:{s:6:"server";a:1:{i:0;a:5:{s:4:"data";s:43:"http://www.hanselman.com/blog/pingback.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"target";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=7c718126-4ea9-4ce4-8a4c-4d5ee74dd130";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:15:"Scott Hanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:2:{s:7:"comment";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=7c718126-4ea9-4ce4-8a4c-4d5ee74dd130";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:115:"http://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=7c718126-4ea9-4ce4-8a4c-4d5ee74dd130";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:1:"1";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:68:"Hanselminutes Podcast 216 - Geek Relationship Tips with Scott's Wife";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=7c718126-4ea9-4ce4-8a4c-4d5ee74dd130";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:123:"http://feedproxy.google.com/~r/ScottHanselman/~3/uTmD0mjSW38/HanselminutesPodcast216GeekRelationshipTipsWithScottsWife.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Fri, 04 Jun 2010 10:40:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:6360:"<div><p><img style="border-bottom: 0px; border-left: 0px; margin: 0px 0px 5px 10px; display: inline; border-top: 0px; border-right: 0px" title="463660255_87ff145779" border="0" alt="463660255_87ff145779" align="right" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/HanselminutesPodcast216GeekRelationshipT_14CED/463660255_87ff145779_e4ab5c4a-d065-4d32-8832-3657870de863.jpg" width="180" height="240" />My <a href="http://www.hanselminutes.com/default.aspx?showID=234">two-hundred-and-sixteenth podcast is up</a>. Scott's on vacation this week at the beach and Scott's Wife Mo joins him on the show to share Geek Relationship Tips. Is it hard to be married to a geek? What are some techniques for avoiding conflict and having a drama-free relationship?</p>  <p>(Ya, I know, I'm late to post this.)</p>  <p><strong>Subscribe: </strong><a href="http://feeds.feedburner.com/Hanselminutes"><img border="0" alt="Subscribe to Hanselminutes" src="http://www.hanselman.com/blog/content/binary/feed_2Dicon_2D16x16.png" /></a> <a href="http://phobos.apple.com/WebObjects/MZStore.woa/wa/viewPodcast?id=117488860"><img border="0" alt="Subscribe to my Podcast in iTunes" src="http://www.hanselman.com/blog/themes/zenGarden2/itunes_subscribe.gif" /></a></p>  <p><strong>Download: </strong><a href="http://perseus.franklins.net/hanselminutes_0216.mp3">MP3 Full Show</a><strong></strong></p>  <p>Do also <a href="http://www.hanselminutes.com/archives.aspx">remember the complete archives</a> are always up and they have <strong><em>PDF Transcripts</em></strong>, a little known feature that show up a few weeks after each show.</p>  <p><strong>I want to add a big thanks to Telerik. Without their support, there wouldn't be a Hanselminutes. I hope they, and you, know that. Someone's gotta pay the bandwidth. Thanks also to Carl Franklin for all his support over these last 4 years!</strong></p>  <p><a href="http://www.telerik.com/products/aspnet/overview.aspx?gad=CPLKy9kDEghsdEbLXRZ0NBiF1bL_AyCCkdsU"><strong>Telerik</strong></a> is our sponsor for this show.</p>  <p><a href="http://www.telerik.com/products/aspnet/overview.aspx?gad=CPLKy9kDEghsdEbLXRZ0NBiF1bL_AyCCkdsU"><strong><img border="0" align="left" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/HanselminutesPodcast51StaticCodeAnalysis_140AB/telerikLogo%5B1%5D%5B8%5D.gif" width="216" height="74" /></strong></a><strong>Building quality software is never easy. It requires skills and imagination. We cannot promise to improve your skills, but when it comes to User Interface and developer tools, we can provide the building blocks to take your application a step closer to your imagination. Explore the leading UI suites for </strong><a href="http://www.telerik.com/products/aspnet-ajax.aspx"><strong>ASP.NET AJAX</strong></a><strong>,</strong><a href="http://www.telerik.com/products/aspnet-mvc.aspx"><strong>MVC</strong></a><strong>,</strong><a href="http://www.telerik.com/products/silverlight.aspx"><strong>Silverlight</strong></a><strong>,</strong><a href="http://www.telerik.com/products/winforms.aspx"><strong>Windows Forms</strong></a><strong>and </strong><a href="http://www.telerik.com/products/wpf.aspx"><strong>WPF</strong></a><strong>. Enjoy developer tools like </strong><a href="http://www.telerik.com/products/reporting.aspx"><strong>.NET reporting</strong></a><strong>, </strong><a href="http://www.telerik.com/products/orm.aspx"><strong>ORM</strong></a><strong>,</strong><a href="http://www.telerik.com/products/web-testing-tools.aspx"><strong>Automated Testing Tools</strong></a><strong>, </strong><a href="http://www.telerik.com/products/tfsmanager-and-tfsdashboard.aspx"><strong>TFS</strong></a><strong>, and </strong><a href="http://www.telerik.com/products/sitefinity.aspx"><strong>Content Management Solution</strong></a><strong>. And now you can increase your productivity with JustCode, Telerikâs new productivity tool for code analysis and refactoring. Visit </strong><a href="http://www.telerik.com"><strong>www.telerik.com</strong></a><strong>.</strong></p>  <p><strong><em></em></strong>As I've said before this show comes to you with the audio expertise and stewardship of <a href="http://weblogs.asp.net/cfranklin/archive/2006/01/11/435036.aspx">Carl Franklin</a>. The name comes from<a href="http://www.paraesthesia.com/blog/comments.php?id=776_0_1_0_C">Travis Illig</a>, but the goal of the show is simple. Avoid wasting the listener's time. (and make the commute less boring)</p>  <p>Enjoy. Who knows what'll happen in the next show?</p><br/><hr/>Â© 2010 Scott Hanselman. All rights reserved. <br/></div>
<p><a href="http://feedads.g.doubleclick.net/~a/82eXYN_TXQFA5O_6B-rkEtb2tLw/0/da"><img src="http://feedads.g.doubleclick.net/~a/82eXYN_TXQFA5O_6B-rkEtb2tLw/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/82eXYN_TXQFA5O_6B-rkEtb2tLw/1/da"><img src="http://feedads.g.doubleclick.net/~a/82eXYN_TXQFA5O_6B-rkEtb2tLw/1/di" border="0" ismap="true"></img></a></p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=uTmD0mjSW38:8arKdlqMhyw:D7DqB2pKExk"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=uTmD0mjSW38:8arKdlqMhyw:D7DqB2pKExk" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=uTmD0mjSW38:8arKdlqMhyw:MjquXQBfoPI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=MjquXQBfoPI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=uTmD0mjSW38:8arKdlqMhyw:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=uTmD0mjSW38:8arKdlqMhyw:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=uTmD0mjSW38:8arKdlqMhyw:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=uTmD0mjSW38:8arKdlqMhyw:F7zBnMyn0Lo" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=uTmD0mjSW38:8arKdlqMhyw:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=uTmD0mjSW38:8arKdlqMhyw:5M_9TJJRyfI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=5M_9TJJRyfI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/ScottHanselman/~4/uTmD0mjSW38" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=7c718126-4ea9-4ce4-8a4c-4d5ee74dd130";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:2:{i:0;a:5:{s:4:"data";s:7:"Musings";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:7:"Podcast";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:92:"http://www.hanselman.com/blog/HanselminutesPodcast216GeekRelationshipTipsWithScottsWife.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:6;a:6:{s:4:"data";s:103:"
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:6:{s:53:"http://madskills.com/public/xml/rss/module/trackback/";a:1:{s:4:"ping";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/Trackback.aspx?guid=1433c929-3bb5-4103-bd80-cde50c423f11";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:52:"http://madskills.com/public/xml/rss/module/pingback/";a:2:{s:6:"server";a:1:{i:0;a:5:{s:4:"data";s:43:"http://www.hanselman.com/blog/pingback.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"target";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=1433c929-3bb5-4103-bd80-cde50c423f11";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:15:"Scott Hanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:2:{s:7:"comment";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=1433c929-3bb5-4103-bd80-cde50c423f11";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:115:"http://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=1433c929-3bb5-4103-bd80-cde50c423f11";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:72:"Hanselminutes Podcast 215 - World Airplane Travel Tips with James Senior";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=1433c929-3bb5-4103-bd80-cde50c423f11";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:127:"http://feedproxy.google.com/~r/ScottHanselman/~3/n-iDA9dJzsk/HanselminutesPodcast215WorldAirplaneTravelTipsWithJamesSenior.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Fri, 28 May 2010 10:36:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:6634:"<div><p><img style="border-bottom: 0px; border-left: 0px; margin: 0px 0px 5px 10px; display: inline; border-top: 0px; border-right: 0px" title="Camera_mug__604x640_" border="0" alt="Camera_mug__604x640_" align="right" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/HanselminutesPodcast215WorldAirplaneTrav_14B98/Camera_mug__604x640__3f2e8bc2-c95a-46f8-adbc-4ca72a2384bb.jpg" width="200" height="212" /> My <a href="http://www.hanselminutes.com/default.aspx?showID=233">two-hundred-and-fifteenth podcast is up</a>. Scott and James are on a world tour and racking up the miles. James shares some of his best travel tips and tricks, and Scott shares how he moves through airport security as fast as possible. It's Techie Travel with James and Scott this week on Hanselminutes, recorded from Sydney, Australia.</p>  <p>(Ya, I know, I'm late to post this.)</p>  <p><strong>Subscribe: </strong><a href="http://feeds.feedburner.com/Hanselminutes"><img border="0" alt="Subscribe to Hanselminutes" src="http://www.hanselman.com/blog/content/binary/feed_2Dicon_2D16x16.png" /></a> <a href="http://phobos.apple.com/WebObjects/MZStore.woa/wa/viewPodcast?id=117488860"><img border="0" alt="Subscribe to my Podcast in iTunes" src="http://www.hanselman.com/blog/themes/zenGarden2/itunes_subscribe.gif" /></a></p>  <p><strong>Download: </strong><a href="http://perseus.franklins.net/hanselminutes_0215.mp3">MP3 Full Show</a><strong></strong></p>  <p><strong>Links from the Show</strong></p>  <ul>   <li>&#160;<a href="http://www.jamessenior.com">James Senior's Blog</a></li>    <li>&#160;<a href="http://www.webcamps.ms">WebCamps - 2 day free events</a></li> </ul>  <p>Do also <a href="http://www.hanselminutes.com/archives.aspx">remember the complete archives</a> are always up and they have <strong><em>PDF Transcripts</em></strong>, a little known feature that show up a few weeks after each show.</p>  <p><strong>I want to add a big thanks to Telerik. Without their support, there wouldn't be a Hanselminutes. I hope they, and you, know that. Someone's gotta pay the bandwidth. Thanks also to Carl Franklin for all his support over these last 4 years!</strong></p>  <p><a href="http://www.telerik.com/products/aspnet/overview.aspx?gad=CPLKy9kDEghsdEbLXRZ0NBiF1bL_AyCCkdsU"><strong>Telerik</strong></a> is our sponsor for this show.</p>  <p><a href="http://www.telerik.com/products/aspnet/overview.aspx?gad=CPLKy9kDEghsdEbLXRZ0NBiF1bL_AyCCkdsU"><strong><img border="0" align="left" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/HanselminutesPodcast51StaticCodeAnalysis_140AB/telerikLogo%5B1%5D%5B8%5D.gif" width="216" height="74" /></strong></a><strong>Building quality software is never easy. It requires skills and imagination. We cannot promise to improve your skills, but when it comes to User Interface and developer tools, we can provide the building blocks to take your application a step closer to your imagination. Explore the leading UI suites for </strong><a href="http://www.telerik.com/products/aspnet-ajax.aspx"><strong>ASP.NET AJAX</strong></a><strong>,</strong><a href="http://www.telerik.com/products/aspnet-mvc.aspx"><strong>MVC</strong></a><strong>,</strong><a href="http://www.telerik.com/products/silverlight.aspx"><strong>Silverlight</strong></a><strong>,</strong><a href="http://www.telerik.com/products/winforms.aspx"><strong>Windows Forms</strong></a><strong>and </strong><a href="http://www.telerik.com/products/wpf.aspx"><strong>WPF</strong></a><strong>. Enjoy developer tools like </strong><a href="http://www.telerik.com/products/reporting.aspx"><strong>.NET reporting</strong></a><strong>, </strong><a href="http://www.telerik.com/products/orm.aspx"><strong>ORM</strong></a><strong>,</strong><a href="http://www.telerik.com/products/web-testing-tools.aspx"><strong>Automated Testing Tools</strong></a><strong>, </strong><a href="http://www.telerik.com/products/tfsmanager-and-tfsdashboard.aspx"><strong>TFS</strong></a><strong>, and </strong><a href="http://www.telerik.com/products/sitefinity.aspx"><strong>Content Management Solution</strong></a><strong>. And now you can increase your productivity with JustCode, Telerikâs new productivity tool for code analysis and refactoring. Visit </strong><a href="http://www.telerik.com"><strong>www.telerik.com</strong></a><strong>.</strong></p>  <p><strong><em></em></strong>As I've said before this show comes to you with the audio expertise and stewardship of <a href="http://weblogs.asp.net/cfranklin/archive/2006/01/11/435036.aspx">Carl Franklin</a>. The name comes from<a href="http://www.paraesthesia.com/blog/comments.php?id=776_0_1_0_C">Travis Illig</a>, but the goal of the show is simple. Avoid wasting the listener's time. (and make the commute less boring)</p>  <p>Enjoy. Who knows what'll happen in the next show?</p><br/><hr/>Â© 2010 Scott Hanselman. All rights reserved. <br/></div>
<p><a href="http://feedads.g.doubleclick.net/~a/8EwOkJbQwhmd0_AUVgdBRyHClYI/0/da"><img src="http://feedads.g.doubleclick.net/~a/8EwOkJbQwhmd0_AUVgdBRyHClYI/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/8EwOkJbQwhmd0_AUVgdBRyHClYI/1/da"><img src="http://feedads.g.doubleclick.net/~a/8EwOkJbQwhmd0_AUVgdBRyHClYI/1/di" border="0" ismap="true"></img></a></p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=n-iDA9dJzsk:cpV646PLkNc:D7DqB2pKExk"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=n-iDA9dJzsk:cpV646PLkNc:D7DqB2pKExk" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=n-iDA9dJzsk:cpV646PLkNc:MjquXQBfoPI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=MjquXQBfoPI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=n-iDA9dJzsk:cpV646PLkNc:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=n-iDA9dJzsk:cpV646PLkNc:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=n-iDA9dJzsk:cpV646PLkNc:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=n-iDA9dJzsk:cpV646PLkNc:F7zBnMyn0Lo" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=n-iDA9dJzsk:cpV646PLkNc:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=n-iDA9dJzsk:cpV646PLkNc:5M_9TJJRyfI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=5M_9TJJRyfI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/ScottHanselman/~4/n-iDA9dJzsk" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=1433c929-3bb5-4103-bd80-cde50c423f11";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:2:{i:0;a:5:{s:4:"data";s:7:"Musings";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:7:"Podcast";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:96:"http://www.hanselman.com/blog/HanselminutesPodcast215WorldAirplaneTravelTipsWithJamesSenior.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:7;a:6:{s:4:"data";s:110:"
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:7:{s:53:"http://madskills.com/public/xml/rss/module/trackback/";a:1:{s:4:"ping";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/Trackback.aspx?guid=b12ca136-0c26-4356-a5d8-6131f3e8d6ad";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:52:"http://madskills.com/public/xml/rss/module/pingback/";a:2:{s:6:"server";a:1:{i:0;a:5:{s:4:"data";s:43:"http://www.hanselman.com/blog/pingback.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"target";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=b12ca136-0c26-4356-a5d8-6131f3e8d6ad";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:15:"Scott Hanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:2:{s:7:"comment";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=b12ca136-0c26-4356-a5d8-6131f3e8d6ad";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:115:"http://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=b12ca136-0c26-4356-a5d8-6131f3e8d6ad";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:2:"11";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:57:"OData Basics - At the AZGroups "Day of .NET" with ScottGu";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=b12ca136-0c26-4356-a5d8-6131f3e8d6ad";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:109:"http://feedproxy.google.com/~r/ScottHanselman/~3/604yPrmr5dA/ODataBasicsAtTheAZGroupsDayOfNETWithScottGu.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Tue, 25 May 2010 06:58:30 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:4232:"<div><p>Recently I <a href="http://azgroups.nextslide.com/odata-begins">had the pleasure to speak at the 7th Annual AZGroups.org event in Phoenix</a>, colloquially known as the &quot;Day of ScottGu.&quot; Scott talked for about 4 hours or so, then Jeffrey Palermo, then myself. Tough acts to follow! You can view ScottGu's and Jeffrey's talks at <a href="http://azgroups.nextslide.com">http://azgroups.nextslide.com</a>, and <a href="http://azgroups.nextslide.com/odata-begins">mine is here via direct link</a>, and also embedded below.</p>  <p>I spoke on OData and it was a great crowd. We had a blast. I'd encourage you to check out the talks, as there's lots of good information and demos. Thank you to <a href="http://scottcate.com/tricks/">Scott Cate</a> for putting the whole thing together, and be sure to check out <a href="http://scottcate.com/tricks/">Scott Cate's VS Trips and Tricks</a> videos, as he does tiny screencast versions of Sara Ford's VS tips. Is three Scotts enough for you?</p>  <div class="nextslideContent">   <h2><a style="text-decoration: none" href="http://azgroups.nextslide.com/odata-begins">OData with Scott Hanselman</a></h2>   <object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=10,0,0,0" id="_azgroups_odata-begins" class="nextslideplayer" name="_azgroups_odata-begins" width="940px" height="474px"><param name="movie" value="http://azgroups.nextslide.com/odata-begins/player" /><param name="menu" value="false" /><param name="wmode" value="opaque" /><param name="allowScriptAccess" value="always" /><param name="allowFullScreen" value="true" /><param name="quality" value="high" /><param name="flashvars" value="permalink=/azgroups/odata-begins&amp;layout=FullLeft&amp;corners=3" /><embed type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" src="http://azgroups.nextslide.com/odata-begins/player" id="_azgroups_odata-begins" class="nextslideplayer" name="_azgroups_odata-begins" width="940px" height="474px" menu="false" wmode="opaque" allowScriptAccess="always" allowFullScreen="true" quality="high" flashvars="permalink=/azgroups/odata-begins&layout=FullLeft&corners=3"></embed></object>    <div><a class="openNextSlidePresentationLink" href="http://azgroups.nextslide.com/odata-begins">Open OData with Scott Hanselman on NextSlide</a> </div> </div> Enjoy!  <br/><hr/>Â© 2010 Scott Hanselman. All rights reserved. <br/></div>
<p><a href="http://feedads.g.doubleclick.net/~a/FbobX9SG_dKZdkveq1lnxL68LEI/0/da"><img src="http://feedads.g.doubleclick.net/~a/FbobX9SG_dKZdkveq1lnxL68LEI/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/FbobX9SG_dKZdkveq1lnxL68LEI/1/da"><img src="http://feedads.g.doubleclick.net/~a/FbobX9SG_dKZdkveq1lnxL68LEI/1/di" border="0" ismap="true"></img></a></p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=604yPrmr5dA:MAiPH1hDGmg:D7DqB2pKExk"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=604yPrmr5dA:MAiPH1hDGmg:D7DqB2pKExk" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=604yPrmr5dA:MAiPH1hDGmg:MjquXQBfoPI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=MjquXQBfoPI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=604yPrmr5dA:MAiPH1hDGmg:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=604yPrmr5dA:MAiPH1hDGmg:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=604yPrmr5dA:MAiPH1hDGmg:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=604yPrmr5dA:MAiPH1hDGmg:F7zBnMyn0Lo" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=604yPrmr5dA:MAiPH1hDGmg:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=604yPrmr5dA:MAiPH1hDGmg:5M_9TJJRyfI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=5M_9TJJRyfI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/ScottHanselman/~4/604yPrmr5dA" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=b12ca136-0c26-4356-a5d8-6131f3e8d6ad";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:2:{i:0;a:5:{s:4:"data";s:5:"OData";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:8:"Speaking";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:78:"http://www.hanselman.com/blog/ODataBasicsAtTheAZGroupsDayOfNETWithScottGu.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:8;a:6:{s:4:"data";s:138:"
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:7:{s:53:"http://madskills.com/public/xml/rss/module/trackback/";a:1:{s:4:"ping";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/Trackback.aspx?guid=a3f23ab0-435e-4335-917c-ed1a11e2f077";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:52:"http://madskills.com/public/xml/rss/module/pingback/";a:2:{s:6:"server";a:1:{i:0;a:5:{s:4:"data";s:43:"http://www.hanselman.com/blog/pingback.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"target";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=a3f23ab0-435e-4335-917c-ed1a11e2f077";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:15:"Scott Hanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:2:{s:7:"comment";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=a3f23ab0-435e-4335-917c-ed1a11e2f077";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:115:"http://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=a3f23ab0-435e-4335-917c-ed1a11e2f077";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:2:"35";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:58:"Extending NerdDinner: Exploring Different Database Options";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=a3f23ab0-435e-4335-917c-ed1a11e2f077";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:118:"http://feedproxy.google.com/~r/ScottHanselman/~3/kl1PoQ-_s4c/ExtendingNerdDinnerExploringDifferentDatabaseOptions.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Thu, 20 May 2010 12:57:46 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:24430:"<div><p>The original <a href="http://nerddinner.codeplex.com">NerdDinner Sample</a> was very simple. Two samples, simple, in fact. Perhaps it's the new Northwind, as it's a good way to start working with ASP.NET MVC. However, it's not a perfect sample or an idealized example on how to do many things that users want to do.</p>  <p>Fortunately, there's been lots of cool folks in the community who have &quot;forked&quot; NerdDinner and done interesting stuff with it. Each of these samples is usually focused on a specific scenario, so they won't necessarily be merged with the trunk, but they are educational nonetheless. </p>  <h3><strike>Four</strike> Five NerdDinners - Each Accessing Data Differently</h3>  <p>When NerdDinner was originally done, I did it in Linq To SQL as L2S was fast, easy, had a 1:1 relationship between objects and tables, and frankly, I wasn't really feeling Entity Framework 3.5. Fast forward to .NET 4 and the Entity Framework 4 is pretty nice. The current NerdDinner v2 sample (<a href="http://nerddinner.codeplex.com">available in the Trunk on the NerdDinner Codeplex Site, click Source Control</a>) uses Entity Framework 4.</p>  <p>I heard, however, that <a href="http://www.sellsbrothers.com">Chris Sells</a> was interested in exploring a ASP.NET MVC sample that accessed databases via the various ways you'll find in the wild:</p>  <ul>   <li>ADO.NET Connected (DataReaders) </li>    <li>ADO.NET Disconnected (DataSets) </li>    <li>LINQ to SQL </li>    <li>LINQ to Entities (Entity Framework) </li> </ul>  <p>Chris worked with <a href="http://www.useableconcepts.com/"><strong>Nick Muhonen from Useable Concepts</strong></a> and Nick created four samples. Nick has <a href="http://msdn.microsoft.com/en-us/data/ff707264.aspx"><strong>posted a very in-depth article</strong></a> on <a href="http://msdn.microsoft.com/en-us/data/ff707264.aspx">http://msdn.com/data</a><strong></strong>.</p>  <p>These samples are on VS2010 and ASP.NET MVC 2. Let's compare and contrast. I've also included a sample that Ayende built for to teach me NHibernate last year as the fifth sample. Big thanks to Ayende for all he does for the community, giving of his time, and for keeping Microsoft honest(ish).</p>  <h3>ADO.NET Connected (DataReaders)</h3>  <p>Scandalous! People still use these? Of course they do. The are wicked fast and many generated DALs (data access layers) have a DataReader at their heart. </p>  <p>Here's the slightly modified IDinnerRepository that was used in this first sample. Note it's not using IQueryable. I understand that it would be ideal to have a single IDinnerRepository interface and have all these samples share it, but these database access techniques differed so greatly that I'm told they gave up as it made the rest of the code smell (more) just to meet that one goal.</p>  <pre class="brush: csharp; auto-links: false;">public interface IDinnerRepository {<br /><br />    //Data Access Methods<br /><br />    IEnumerable&lt;Dinner&gt; FindAllDinners();<br />    IEnumerable&lt;Dinner&gt; FindByLocation(float latitude, float longitude);<br />    IEnumerable&lt;Dinner&gt; FindUpcomingDinners();<br />    Dinner GetDinner(int id);<br /><br />    void AddDinner(Dinner dinner);<br />    void UpdateDinner(Dinner dinner);<br />    void DeleteDinner(int id);<br /><br />    void AddDinnerRsvp(int dinnerID, RSVP rsvp);<br />}</pre>

<p>You've likely seen code like this before. At least it's not concatenating the SQL manually! It could also be a sproc. The pattern remains.</p>

<pre class="brush: csharp; auto-links: false;">public IEnumerable&lt;Dinner&gt; FindByLocation(float latitude, float longitude)<br />{<br />    using (var connection = new SqlConnection(this.connectionString))<br />    {<br />        var commandText =<br />        @&quot;<br />            select d.DinnerID, d.Title, d.EventDate, d.[Description], d.HostedBy, <br />                d.ContactPhone, d.[Address], d.Country, d.Latitude, d.Longitude  <br />            from Dinners d<br />            inner join dbo.NearestDinners(@Latitude,@Longitude) nd on<br />                d.DinnerID = nd.DinnerID<br />            where @CurrentDate &lt;= d.EventDate<br />            order by d.DinnerID<br /><br />            select r.RsvpID, r.DinnerID, r.AttendeeName from RSVP r<br />            inner join Dinners d on<br />                d.DinnerID = r.DinnerID<br />            inner join dbo.NearestDinners(@Latitude,@Longitude) nd on<br />                d.DinnerID = nd.DinnerID<br />            where @CurrentDate &lt;= d.EventDate<br />            order by r.DinnerID, r.RsvpID<br />        &quot;;<br />        var command = new SqlCommand(commandText, connection);<br />        var parameters = new[]{<br />                new SqlParameter{ParameterName = &quot;Latitude&quot;, DbType = DbType.Double, Value = latitude},<br />                new SqlParameter{ParameterName = &quot;Longitude&quot;, DbType = DbType.Double, Value = longitude},<br />                new SqlParameter{ParameterName = &quot;CurrentDate&quot;, DbType = DbType.Date, Value = DateTime.Now}};<br /><br />        command.Parameters.AddRange(parameters);    <br /><br />        connection.Open();<br />        return GetDinners(command);<br />    }<br />}</pre>

<p>Here's a snippet of the private method, GetDinners, that does the tearing apart of the DataReader and turning it into object(s):</p>

<pre class="brush: csharp; auto-links: false;">private List&lt;Dinner&gt; GetDinners(SqlCommand command)<br />{<br />    var returnDinners = new List&lt;Dinner&gt;();<br />    using (var reader = command.ExecuteReader())<br />    {<br />        //Project first result set into a collection of Dinner Objects<br /><br />        while (reader.Read())<br />        {<br />            var dinner = new Dinner()<br />            {<br />                DinnerID = (int)reader[&quot;DinnerID&quot;],<br />                Title = (string)reader[&quot;Title&quot;],<br />                Description = (string)reader[&quot;Description&quot;],<br />                Address = (string)reader[&quot;Address&quot;],<br />                ContactPhone = (string)reader[&quot;ContactPhone&quot;],<br />                Country = (string)reader[&quot;Country&quot;],<br />                HostedBy = (string)reader[&quot;HostedBy&quot;],<br />                EventDate = (DateTime)reader[&quot;EventDate&quot;],<br />                Latitude = (double)reader[&quot;Latitude&quot;],<br />                Longitude = (double)reader[&quot;Longitude&quot;]<br />            };<br />            returnDinners.Add(dinner);<br />        }<br />//...</pre>

<p>Pretty classic stuff. I generated TONS of for many years using tools like CodeSmith and T4. Generated code is best not seen. Plus, if you write this by hand, a lot can go around and it's almost always because of copy-paste errors. <strong>The compiler can't save you if half your code is written in another language tunneled inside a string.</strong></p>

<h3>ADO.NET Disconnected (DataSets)</h3>

<p>I once called DataSets the spawn of Satan and destroy of all that is holy. I stand by that. ;) They have a way of leaking all over the place, as exemplified by this IDinnerRepository interface. Look away!</p>

<pre class="brush: csharp; auto-links: false;">public interface IDinnerRepository {<br /><br />    //Data Access Methods<br />    IEnumerable&lt;NerdDinnerDataSet.DinnerRow&gt; FindAllDinners();<br />    IEnumerable&lt;NerdDinnerDataSet.DinnerRow&gt; FindByLocation(float latitude, float longitude);<br />    IEnumerable&lt;NerdDinnerDataSet.DinnerRow&gt; FindUpcomingDinners();<br />    NerdDinnerDataSet.DinnerRow GetDinner(int id);<br />    void AddDinner(NerdDinnerDataSet.DinnerRow dinner);<br />    void DeleteDinner(NerdDinnerDataSet.DinnerRow dinner);<br /><br />    void AddDinnerRsvp(NerdDinnerDataSet.DinnerRow dinner, NerdDinnerDataSet.RSVPRow rsvp);<br />    void DeleteRsvp(NerdDinnerDataSet.RSVPRow rsvp);<br /><br />    // Persistence Method<br />    void Save();<br />    //Object factory methods<br /><br />    NerdDinnerDataSet.DinnerRow CreateDinnerObject();<br />    NerdDinnerDataSet.RSVPRow CreateRsvpObject();<br />}</pre>

<p>With apologies to the original creator of the Regular Expression joke, I will co-opt it for this new one:</p>

<blockquote>
  <p><em>So you've got a problem, and you've decided ADO.NET DataSets to solve it. So, you've got two problems... - Me</em></p>
</blockquote>

<p>What does FindByLocation look like now?</p>

<pre class="brush: csharp; auto-links: false;">public IEnumerable&lt;NerdDinnerDataSet.DinnerRow&gt; FindByLocation(float latitude, float longitude)<br />{<br />    var now = DateTime.Now;<br />    var dinnerTableAdapter = new DinnerTableAdapter();<br />    var rsvpTableAdapter = new RSVPTableAdapter();<br /><br />    dinnerTableAdapter.FillByLocation(nerdDinnerDataSet.Dinner, latitude, longitude, now);<br />    rsvpTableAdapter.FillByLocation(nerdDinnerDataSet.RSVP, latitude, longitude, now);<br />    return this.nerdDinnerDataSet.Dinner;<br />}</pre>

<p>The TableAdapters were created as part of the DataSetDesigner. Here' a screenshot from VS2010:</p>

<p><a href="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/ExtendingNerdDinnerExploringDifferentDa_12444/image_2.png"><img style="border-right-width: 0px; margin: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="DataSet Designer" border="0" alt="DataSet Designer" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/ExtendingNerdDinnerExploringDifferentDa_12444/image_thumb.png" width="500" height="228" /></a> </p>

<p>The Adapters fill the DataTables that consist of Rows. This unfortunately leaks out of our Repository into our Controller as our &quot;Model&quot; is now a DinnerRow. That then leaks (inappropriately) into a ViewPage of type...wait for it...System.Web.Mvc.ViewPage&lt;NerdDinner.Models.NerdDinnerDataSet.DinnerRow&gt;. </p>

<p>If you're going to use DataSets or Rows or DataTables, it's just that much more important that you use a good ViewModel projection. I personally go out of my way to not use DataSets and bump into them only in legacy code. Try to avoid them - I'd prefer the DataReader example over this one.</p>

<h3>LINQ to SQL</h3>

<p>Remember that LINQ to SQL is a one to one mapping between the physical tables and columns of the database and the objects it creates. Many folks prefer to use it as a DAL (Data Access Layer) that just happens to make objects, then pull the data out of the auto-generated objects into smarter business objects, such that the developer downstream never sees the generated L2S objects. Others just use them all through. For simple samples, I used to use LINQ to SQL straight, and I still do for small (&lt; 5 page) projects, but lately I've been using EF4 as it's just as easy. Anyway, here's the now more sensible modified interface: </p>

<pre class="brush: csharp; auto-links: false;">public interface IDinnerRepository {<br />    IQueryable&lt;Dinner&gt; FindAllDinners();<br />    IQueryable&lt;Dinner&gt; FindByLocation(float latitude, float longitude);<br />    IQueryable&lt;Dinner&gt; FindUpcomingDinners();<br />    Dinner GetDinner(int id);<br /><br />    void Add(Dinner dinner);<br />    void Delete(Dinner dinner);<br />    <br />    void Save();<br />}</pre>

<p>And then the FindByLocation implementation:</p>

<pre class="brush: csharp; auto-links: false;">public IQueryable&lt;Dinner&gt; FindByLocation(float latitude, float longitude) {<br />    var dinners = from dinner in FindUpcomingDinners()<br />                  join i in db.NearestDinners(latitude, longitude) <br />                  on dinner.DinnerID equals i.DinnerID<br />                  select dinner;<br /><br />    return dinners;<br />}</pre>

<p><a href="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/ExtendingNerdDinnerExploringDifferentDa_12444/image_6.png"><img style="border-right-width: 0px; margin: 0px 0px 0px 5px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" align="right" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/ExtendingNerdDinnerExploringDifferentDa_12444/image_thumb_2.png" width="169" height="183" /></a> Notice the &quot;NearestDinners&quot; method there. That's a clever thing, I think. The database has a scalar-valued function called DistanceBetween for calculating the distance between two lat-longs (thanks <a href="http://blog.wekeroad.com">Rob Conery</a>!) and a table value function called NearestDinners. They look like functions from LINQ to SQL's point of view and can be included in a LINQ to SQL query as seen above. </p>

<p><a href="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/ExtendingNerdDinnerExploringDifferentDa_12444/image_4.png"><img style="border-right-width: 0px; margin: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/ExtendingNerdDinnerExploringDifferentDa_12444/image_thumb_1.png" width="400" height="148" /></a>&#160; </p>

<p>Nice and clean. </p>

<h3>LINQ to Entities (Entity Framework)</h3>

<p>Entity Framework 4 uses the same interface as above and the same FindByLocation:</p>

<pre class="brush: csharp; auto-links: false;">public IQueryable&lt;Dinner&gt; FindByLocation(float latitude, float longitude) {<br />    var dinners = from dinner in FindUpcomingDinners()<br />                  join i in NearestDinners(latitude, longitude) <br />                  on dinner.DinnerID equals i.DinnerID<br />                  select dinner;<br /><br />    return dinners;<br />}</pre>

<p>The one small difference, you may notice, is that NearestDinners isn't hanging off the &quot;db&quot; object (the DataContext) as it was with LINQ to SQL. Instead, in order to maintain the same clean query structure, those are helper methods. One is an EdmFunction whose signature maps to that scalar function, and NearestDinner is implemented in code directly.</p>

<pre class="brush: csharp; auto-links: false;">[EdmFunction(&quot;NerdDinnerModel.Store&quot;, &quot;DistanceBetween&quot;)]<br />public static double DistanceBetween(double lat1, double long1, double lat2, double long2)<br />{<br />    throw new NotImplementedException(&quot;Only call through LINQ expression&quot;);<br />}<br /><br />public IQueryable&lt;Dinner&gt; NearestDinners(double latitude, double longitude)<br />{<br />    return from d in db.Dinners<br />           where DistanceBetween(latitude, longitude, d.Latitude, d.Longitude) &lt; 100<br />           select d;<br />}</pre>

<p>Don't worry about that NotImplementedException, when the method is used in a LINQ to Entities Expression it's automatically mapped to the DistanceBetween function in the database as in the attribute.</p>

<p>I'd like to see better support for TVFs in EF, and I need to dig in to see if there's a better way that outlined here. Entity Framework also supports multiple databases, so you can get an Oracle Provider or a MySQL provider, etc.</p>

<p>So there you have four different database implementations for NerdDinner. Last, but not least, is a sample that Ayende wrote for me to teach me NHibernate, and I would be remiss to not include it in such a comparison.</p>

<h3>NHibernate </h3>

<p>This sample was written least year with ASP.NET MVC 2 on VS2008 using NHibernate 2.1. I'd love to see an updated version using even newer techniques.</p>

<p>Hibernate has the concept of a &quot;Session&quot; that lives for the life of a request in a Web Application. There's a config file (or a fluent configuration) that has all the properties and connection strings, (similar to EDMX files in EF or DBMLs in L2S) and this all gets setup in the Global.asax. The session is created in the BeginRequest and disposed in the EndRequest. </p>

<pre class="brush: csharp; auto-links: false;">public MvcApplication()<br />{<br />    BeginRequest += (sender, args) =&gt; CurrentSession = SessionFactory.OpenSession();<br />    EndRequest += (sender, args) =&gt; CurrentSession.Dispose();<br />}<br /></pre>

<p>Here's the FindByLocation method. This example isn't 100% fair as this version of NHibernate doesn't support those custom functions I've been talking about. I'm going to see if the latest does and update this post. However, this does give you insight into its flexibility as it allowed inline SQL, set two parameters and returned a list of ints in a very tight single line of code.</p>

<pre class="brush: csharp; auto-links: false;">public IQueryable&lt;Dinner&gt; FindByLocation(float latitude, float longitude)<br />{<br />    // note that this isn't as nice as it can be, since linq for nhibernate <br />    // doesn't support custom SQL functions right now<br />    <br />    var matching = session.CreateSQLQuery(&quot;select DinnerID from dbo.NearestDinners(:latitude, :longitude)&quot;)<br />        .SetParameter(&quot;longitude&quot;, longitude)<br />        .SetParameter(&quot;latitude&quot;, latitude)<br />        .List&lt;int&gt;();<br /><br />    return from dinner in FindUpcomingDinners()<br />           where matching.Any(x =&gt; x == dinner.DinnerID)<br />           select dinner;<br /><br />}</pre>

<p>A better example that lets NHibernate shine would be something more typical like:</p>

<pre class="brush: csharp; auto-links: false;">public IQueryable&lt;Dinner&gt; FindUpcomingDinners()<br />{<br />    return from dinner in FindAllDinners()<br />           where dinner.EventDate &gt;= DateTime.Now<br />           orderby dinner.EventDate<br />           select dinner;<br />}</pre>

<p>You'll note that LINQ to NHibernate is nice and comfortable and looks just like you'd expect it to. </p>

<p>Just like EF and LINQ to SQL, there's a mapping file that explains how tables and columns and dataTypes map to real objects, although there isn't a visual editor as far as know. I believe there are fluent ways to express this in code, so if you're an NHibernate user, let me know alternative ways to express this and I'll update the post.</p>

<pre class="brush: xml; auto-links: false;">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;<br />&lt;hibernate-mapping xmlns=&quot;urn:nhibernate-mapping-2.2&quot; assembly=&quot;NerdDinner&quot; namespace=&quot;NerdDinner.Models&quot;&gt;<br />    &lt;class name=&quot;Dinner&quot; table=&quot;Dinners&quot; lazy=&quot;false&quot;&gt;<br />        &lt;id name=&quot;DinnerID&quot;&gt;<br />            &lt;generator class=&quot;identity&quot;/&gt;<br />        &lt;/id&gt;<br />        &lt;property name=&quot;Title&quot;/&gt;<br />        &lt;property name=&quot;EventDate&quot;/&gt;<br />        &lt;property name=&quot;Description&quot;/&gt;<br />        &lt;property name=&quot;HostedBy&quot;/&gt;<br />        &lt;property name=&quot;ContactPhone&quot;/&gt;<br />        &lt;property name=&quot;Address&quot;/&gt;<br />        &lt;property name=&quot;Country&quot;/&gt;<br />        &lt;property name=&quot;Latitude&quot;/&gt;<br />        &lt;property name=&quot;Longitude&quot;/&gt;<br />        &lt;bag name=&quot;RSVPs&quot; cascade=&quot;all-delete-orphan&quot; inverse=&quot;true&quot;&gt;<br />            &lt;key column=&quot;DinnerID&quot;/&gt;<br />            &lt;one-to-many class=&quot;RSVP&quot;/&gt;<br />        &lt;/bag&gt;<br />        <br />    &lt;/class&gt;<br />    &lt;class name=&quot;RSVP&quot; table=&quot;RSVP&quot;  lazy=&quot;false&quot;&gt;<br />        &lt;id name=&quot;RsvpID&quot;&gt;<br />            &lt;generator class=&quot;identity&quot;/&gt;<br />        &lt;/id&gt;<br />        &lt;property name=&quot;AttendeeName&quot;/&gt;<br />        &lt;many-to-one name=&quot;Dinner&quot;<br />                                 column=&quot;DinnerID&quot;/&gt;<br />    &lt;/class&gt;<br />&lt;/hibernate-mapping&gt;</pre>

<p>This mapping file is actually marked as an Embedded Resource, and is accessed at runtime by the NHibernate runtime. You just need to make it, and the magic happens for you. NHibernate's claim to fame is support for lots of different databases like SQL Server, Oracle, MySQL and more. There's also lots of supporting projects and libraries that orbit NHibernate to give you additional control, or different ways to express your intent.</p>

<h3>Conclusion</h3>

<p>There's lots of choices for Database Access on .NET. You'll run into DataReaders in older or highly tuned code, but there's no reason it can't be hidden in a Repository and still be pleasant to use. LINQ to SQL is nice, lightweight and fast and has dozens of bug fixes in .NET 4, but Entity Framework is the way they are heading going forward. Plus, Entity Framework 4 is *way* better than EF 3.5, so I'm using it for any &quot;larger than small&quot; projects I'm doing and I'm not having much trouble. NHibernate is very mature, actively developed and has a great community around it and it's not going anywhere.</p>

<p>In my opinion, if you're doing database access with .NET you should be using Entity Framework 4 or NHibernate. </p>

<p><strong>Four Database-styles Sample</strong></p>

<p><a href="http://nerddinner.codeplex.com/releases/view/45621"><img style="border-bottom: 0px; border-left: 0px; margin: 0px; display: inline; border-top: 0px; border-right: 0px" title="nddatafoursamples" border="0" alt="nddatafoursamples" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/ExtendingNerdDinnerExploringDifferentDa_12444/nddatafoursamples_3.png" width="108" height="109" /></a> </p>

<p><strong>NHibernate Sample</strong></p>
<iframe style="padding-bottom: 0px; background-color: #fcfcfc; padding-left: 0px; width: 98px; padding-right: 0px; height: 115px; padding-top: 0px" title="Preview" marginheight="0" src="http://cid-cd06a7367371152c.skydrive.live.com/embedicon.aspx/Public/NerdDinner-%20NHibernate%202.2.zip" frameborder="0" marginwidth="0" scrolling="no"></iframe>

<p><strong>Related Links</strong></p>

<ul>
  <li><strong><a href="http://msdn.microsoft.com/en-us/data/videos.aspx">10 How To Videos on Entity Framework from Julie Lerman</a></strong> </li>

  <li><strong><a href="http://www.summerofnhibernate.com">Summer of NHibernate Screencast Series</a></strong> </li>

  <li><strong>Whitepaper: </strong><a href="http://msdn.microsoft.com/en-us/data/ff707264.aspx"><strong>Data Access Practices Using Microsoft .Net: A Nerdly Comparison</strong></a></li>
</ul><br/><hr/>Â© 2010 Scott Hanselman. All rights reserved. <br/></div>
<p><a href="http://feedads.g.doubleclick.net/~a/qj2GHzhwQARkYDQ557TBzpj8SKE/0/da"><img src="http://feedads.g.doubleclick.net/~a/qj2GHzhwQARkYDQ557TBzpj8SKE/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/qj2GHzhwQARkYDQ557TBzpj8SKE/1/da"><img src="http://feedads.g.doubleclick.net/~a/qj2GHzhwQARkYDQ557TBzpj8SKE/1/di" border="0" ismap="true"></img></a></p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=kl1PoQ-_s4c:W8--jbNxKv8:D7DqB2pKExk"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=kl1PoQ-_s4c:W8--jbNxKv8:D7DqB2pKExk" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=kl1PoQ-_s4c:W8--jbNxKv8:MjquXQBfoPI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=MjquXQBfoPI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=kl1PoQ-_s4c:W8--jbNxKv8:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=kl1PoQ-_s4c:W8--jbNxKv8:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=kl1PoQ-_s4c:W8--jbNxKv8:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=kl1PoQ-_s4c:W8--jbNxKv8:F7zBnMyn0Lo" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=kl1PoQ-_s4c:W8--jbNxKv8:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=kl1PoQ-_s4c:W8--jbNxKv8:5M_9TJJRyfI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=5M_9TJJRyfI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/ScottHanselman/~4/kl1PoQ-_s4c" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=a3f23ab0-435e-4335-917c-ed1a11e2f077";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:6:{i:0;a:5:{s:4:"data";s:7:"ASP.NET";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:11:"ASP.NET MVC";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:4:"Data";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:3;a:5:{s:4:"data";s:10:"NerdDinner";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:4;a:5:{s:4:"data";s:11:"Open Source";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:5;a:5:{s:4:"data";s:11:"Source Code";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:87:"http://www.hanselman.com/blog/ExtendingNerdDinnerExploringDifferentDatabaseOptions.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:9;a:6:{s:4:"data";s:131:"
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:7:{s:53:"http://madskills.com/public/xml/rss/module/trackback/";a:1:{s:4:"ping";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/Trackback.aspx?guid=05bab686-7ade-4027-904e-7d245a2d4ca3";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:52:"http://madskills.com/public/xml/rss/module/pingback/";a:2:{s:6:"server";a:1:{i:0;a:5:{s:4:"data";s:43:"http://www.hanselman.com/blog/pingback.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"target";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=05bab686-7ade-4027-904e-7d245a2d4ca3";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:15:"Scott Hanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:2:{s:7:"comment";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=05bab686-7ade-4027-904e-7d245a2d4ca3";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:115:"http://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=05bab686-7ade-4027-904e-7d245a2d4ca3";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:2:"15";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:59:"Extending NerdDinner: Adding MEF and plugins to ASP.NET MVC";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:86:"http://www.hanselman.com/blog/PermaLink.aspx?guid=05bab686-7ade-4027-904e-7d245a2d4ca3";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:115:"http://feedproxy.google.com/~r/ScottHanselman/~3/7GoYgKl8pKY/ExtendingNerdDinnerAddingMEFAndPluginsToASPNETMVC.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Thu, 20 May 2010 08:28:15 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:11733:"<div><p>The original <a href="http://nerddinner.codeplex.com">NerdDinner Sample</a> was very simple. Two samples, simple, in fact. Perhaps it's the new Northwind, as it's a good way to start working with ASP.NET MVC. However, it's not a perfect sample or an idealized example on how to do many things that users want to do.</p>  <p>Fortunately, there's been lots of cool folks in the community who have &quot;forked&quot; NerdDinner and done interesting stuff with it. Each of these samples is usually focused on a specific scenario, so they won't necessarily be merged with the trunk, but they are educational nonetheless. </p>  <blockquote>   <p><em>Jon Galloway and I have also added a few things to NerdDinner, taking it in a more social direction, as Jon's </em><a href="http://www.asp.net/mvc/samples/mvc-music-store">MVC Music Store</a><em></em><em> today is a better &quot;getting started&quot; sample for ASP.NET MVC 2. We'll be doing a series of posts on the interesting things the community has added to NerdDinner as well as some of the ones Jon and I added and presented at Mix a few months back. Soon Jon and I will release an updated NerdDinner v2 on CodePlex (although it's been in the source code tab for weeks) with lots of fixes, new features. We'll also add many of these &quot;one off&quot; samples as well and host them on CodePlex.</em></p> </blockquote>  <p>I spoke to Microsoft Engineer <strong>Hamilton Verissimo de Oliveira</strong>, aka &quot;Hammett&quot; (you likely know him from the Castle Project and Monorail) about making a NerdDinner sample that included MEF (Managed Extensibility Framework) since much of MEF is built into .NET 4 now. He was kind enough to do it, but I'm just blogging it now, so thanks to Hammett for his kindness and patience.</p>  <h3>NerdDinner on MEF</h3>  <p>MEF lives in System.ComponentModel.Composition. Hammett's done a number of interesting things it his sample, adding Microsoft.ComponentModel.Composition.Extensions and Microsoft.ComponentModel.Composition.Extensions.Web namespaces building in some nice extension methods for common techniques as well as and implementation of IControllerFactory and a derivation of HttpApplication.</p>  <h3>MefControllerFactory</h3>  <p>Remember MEF is about making applications easily composable. In this sample Hammett has created his own MefControllerFactory, replacing the default controller factory that comes with ASP.NET MVC. ASP.NET MVC makes it easy to change:</p>  <pre class="brush: csharp; auto-links: false; highlight: [5];">protected override void Application_Start()<br />{<br />    base.Application_Start();<br /><br />    ControllerBuilder.Current.SetControllerFactory(new MefControllerFactory(base.ScopeManager));<br /><br />    RegisterRoutes(RouteTable.Routes);<br /><br />    ViewEngines.Engines.Clear();<br />    ViewEngines.Engines.Add(new MobileCapableWebFormViewEngine());<br />}</pre>

<p>Notice his controller factory has a ScopeManager. This is a web application, and some components might be at Application Scope (create them once and hang on) and some might be at Request scope (make a new one each request).</p>

<p>For controllers, he's effectively recreated the default behavior of the ASP.NET MVC's controller factory, but in doing it, has given us lots of ways we can jump in an change the behavior in exotic ways by overriding CreateRootCatalog in MefhttpApplication. It's default implementation looks in /bin:</p>

<pre class="brush: csharp; auto-links: false;">protected virtual ComposablePartCatalog CreateRootCatalog()<br />{<br />    return new DirectoryCatalog(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;bin&quot;));<br />}</pre>

<p>As you probably know, ASP.NET MVC looks for classes via a convention. It looks for classes with the word &quot;Controller&quot; at the end that are also IController implmentations. Here's the MEF way to declare that convention using Microsoft.ComponentModel.Composition.Extensions. Note the use of scope.</p>

<pre class="brush: csharp; auto-links: false;">[assembly: Discovery(typeof(Conventions))]<br /><br />namespace NerdDinner<br />{<br />    public class Conventions : ConventionDiscovery<br />    {<br />        public Conventions()<br />        {<br />            Add(PartRegistration.<br />                    Types(t =&gt; t.Name.EndsWith(&quot;Controller&quot;) &amp;&amp; !t.IsAbstract).<br />                    Exporting((c, t) =&gt; c.<br />                                        Contract(typeof (IController)).<br />                                        Metadata(&quot;Name&quot;, t.Name.Substring(0, t.Name.Length - &quot;controller&quot;.Length)).<br />                                        Metadata(&quot;Mode&quot;, WebScopeMode.Request))<br />                ); <br />        }<br />    }<br />}</pre>

<p>Pretty cool.</p>

<h3>Controllers and their Needs</h3>

<p>Whenever a more advanced programmer looks as the NerdDinner code they usually say they they really don't like this:</p>

<pre class="brush: csharp; auto-links: false;">public DinnersController() : this(new DinnerRepository()) <br />{<br />}<br /><br />public DinnersController(IDinnerRepository repository) <br />{<br />    dinnerRepository = repository;<br />}<br /></pre>

<p>The second constructor takes an IDinnerRepository, allowing us to make different implementations, but the default constructor says, &quot;well, here's a concrete implementation if you don't give one.&quot; It's a slippery slope and by adding the default implementation I get to sidestep using dependency injection while making the controller testable, but I've tied my controller down with a direct dependency to the DinnerRepository. This is sometimes called &quot;Poor Man's IoC&quot; and many would say that this is a very poor man. That's a religious argument, but Hammett takes a stand by removing the default constructor.</p>

<pre class="brush: csharp; auto-links: false;">public class DinnersController : Controller<br />{<br />    private IDinnerRepository dinnerRepository;<br /><br />    public DinnersController(IDinnerRepository repository)<br />    {<br />        dinnerRepository = repository;<br />    }<br />//...<br />}</pre>

<p>So how does a DinnersController ever get an IDinnerRepository? The idea is that it's not the controllers job to worry about the how, it's only its job to <em>want. </em></p>

<p><strong>MEF is effectively a Dating Service for Components. </strong>Here DinnerRepository is saying it's available and it wants to meet someone who is also into &quot;IDinnerRepository.&quot;</p>

<pre class="brush: csharp; auto-links: false;">[Export(typeof(IDinnerRepository))]<br />public class DinnerRepository : NerdDinner.Models.IDinnerRepository {</pre>

<p>That [Export] attribute is its way to saying, &quot;I'm on the market. Matchmaker, make a match!&quot; When MEF is asked for a Controller and it notices that it has no default constructor, as in our case, it looks at the available constructors and says, &quot;Oh, DinnersController wants to meet someone too! I I think <em>I know just your type</em>.&quot; Then it creates a DinnerRepository and calls the DinnersController constructor passing it in. It <strong>injects the dependency</strong>.</p>

<p>Often you'll see the other components advertising their interest with an [Import] attribute, but that's not necessary in this example because all the Controllers were created via the MefControllerFactory. They don't need attributes, as <em>they've already walked in the door of our dating service!</em></p>

<h3>Other Services MEFified</h3>

<p>Recently in a review of <a href="http://mvcmusicstore.codeplex.com/">MVC Music Store</a> <a href="http://www.ayende.com/">Ayende</a> (and others before him, as well) dissed on these line of code, which actually come with ASP.NET MVC 2 out of the box and weren't written for the sample. (Although they weren't changed)&#160; <a href="http://www.haacked.com">Phil</a> can speak to specific decisions as I wasn't involved, but many folks who are into dependency injection don't like this. This is effectively the same maneuver as shown above, written slightly differently.</p>

<pre class="brush: csharp; auto-links: false;">public class AccountController : Controller <br />{<br />   public AccountController()<br />       : this(null, null) {<br />   }<br /><br />   public AccountController(IFormsAuthentication formsAuth, IMembershipService service) <br />   {<br />       FormsAuth = formsAuth ?? new FormsAuthenticationService();<br />       MembershipService = service ?? new AccountMembershipService();<br />   }<br />   //...<br />}</pre>

<p>Hammett's implementation just uses MEF, so:</p>

<pre class="brush: csharp; auto-links: false;">public AccountController(IFormsAuthentication formsAuth, IMembershipService service)<br />{<br />    FormsAuth = formsAuth;<br />    MembershipService = service;<br />}</pre>

<p>Again, the whole point is that the dependencies get figured out automatically, each one wearing the &quot;I'm available for hooks ups&quot; attributes of [Export(typeof(IFormsAuthentication))] and [Export(typeof(IMembershipService))] respectively.</p>

<p>All in all, MEF is a nice clean addition to an ASP.NET MVC app. Thanks to <strong>Hammett</strong> for his hard work! </p>
<iframe style="padding-bottom: 0px; background-color: #fcfcfc; padding-left: 0px; width: 98px; padding-right: 0px; height: 115px; padding-top: 0px" title="Preview" marginheight="0" src="http://cid-cd06a7367371152c.skydrive.live.com/embedicon.aspx/Public/NerdDinner-MEF.zip" frameborder="0" marginwidth="0" scrolling="no"></iframe>

<p><strong>Related Links</strong></p>

<ul>
  <li><a href="http://www.asp.net/mvc/samples/mvc-music-store">MVC Music Store Sample</a> </li>

  <li><a href="http://nerddinner.codeplex.com">NerdDinner Code</a> </li>

  <li><a href="http://www.nerddinner.com/">NerdDinner running Live</a> </li>
</ul><br/><hr/>Â© 2010 Scott Hanselman. All rights reserved. <br/></div>
<p><a href="http://feedads.g.doubleclick.net/~a/FoDREfrUQHQf3BAihwg3q01LKzg/0/da"><img src="http://feedads.g.doubleclick.net/~a/FoDREfrUQHQf3BAihwg3q01LKzg/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/FoDREfrUQHQf3BAihwg3q01LKzg/1/da"><img src="http://feedads.g.doubleclick.net/~a/FoDREfrUQHQf3BAihwg3q01LKzg/1/di" border="0" ismap="true"></img></a></p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=7GoYgKl8pKY:8L_0YOnInN8:D7DqB2pKExk"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=7GoYgKl8pKY:8L_0YOnInN8:D7DqB2pKExk" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=7GoYgKl8pKY:8L_0YOnInN8:MjquXQBfoPI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=MjquXQBfoPI" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=7GoYgKl8pKY:8L_0YOnInN8:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=7GoYgKl8pKY:8L_0YOnInN8:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=7GoYgKl8pKY:8L_0YOnInN8:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?i=7GoYgKl8pKY:8L_0YOnInN8:F7zBnMyn0Lo" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=7GoYgKl8pKY:8L_0YOnInN8:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/ScottHanselman?a=7GoYgKl8pKY:8L_0YOnInN8:5M_9TJJRyfI"><img src="http://feeds.feedburner.com/~ff/ScottHanselman?d=5M_9TJJRyfI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/ScottHanselman/~4/7GoYgKl8pKY" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.hanselman.com/blog/CommentView.aspx?guid=05bab686-7ade-4027-904e-7d245a2d4ca3";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:5:{i:0;a:5:{s:4:"data";s:7:"ASP.NET";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:11:"ASP.NET MVC";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:10:"NerdDinner";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:3;a:5:{s:4:"data";s:11:"Open Source";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:4;a:5:{s:4:"data";s:11:"Source Code";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:84:"http://www.hanselman.com/blog/ExtendingNerdDinnerAddingMEFAndPluginsToASPNETMVC.aspx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:27:"http://www.w3.org/2005/Atom";a:1:{s:4:"link";a:2:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:19:"application/rss+xml";s:4:"href";s:42:"http://feeds.feedburner.com/ScottHanselman";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:3:"rel";s:3:"hub";s:4:"href";s:32:"http://pubsubhubbub.appspot.com/";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:4:{s:4:"info";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:1:{s:3:"uri";s:14:"scotthanselman";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:14:"emailServiceId";a:1:{i:0;a:5:{s:4:"data";s:14:"ScottHanselman";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:18:"feedburnerHostname";a:1:{i:0;a:5:{s:4:"data";s:28:"http://feedburner.google.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:15:"browserFriendly";a:1:{i:0;a:5:{s:4:"data";s:138:"This is an XML content feed. It is intended to be viewed in a newsreader or syndicated to another site, subject to copyright and fair use.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:52:"http://backend.userland.com/creativeCommonsRssModule";a:1:{s:7:"license";a:1:{i:0;a:5:{s:4:"data";s:49:"http://creativecommons.org/licenses/by-nc-sa/2.0/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}}}}}}s:4:"type";i:128;s:7:"headers";a:10:{s:12:"content-type";s:23:"text/xml; charset=UTF-8";s:4:"etag";s:27:"j6CRJk78BUatsKt6b4FcCiOxjh4";s:13:"last-modified";s:29:"Tue, 22 Jun 2010 15:17:33 GMT";s:4:"date";s:29:"Tue, 22 Jun 2010 15:36:20 GMT";s:7:"expires";s:29:"Tue, 22 Jun 2010 15:36:20 GMT";s:13:"cache-control";s:18:"private, max-age=0";s:22:"x-content-type-options";s:7:"nosniff";s:16:"x-xss-protection";s:13:"1; mode=block";s:6:"server";s:3:"GSE";s:17:"transfer-encoding";s:7:"chunked";}s:5:"build";s:14:"20090627192103";}